-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_lenet_cnn_lenet_Pipeline_calculateLayer4_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
    Layer3_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Neurons_CPU_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Layer3_Neurons_CPU_ce1 : OUT STD_LOGIC;
    Layer3_Neurons_CPU_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    sext_ln70 : IN STD_LOGIC_VECTOR (61 downto 0);
    Layer3_Weights_CPU_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_CPU_EN_A : OUT STD_LOGIC;
    Layer3_Weights_CPU_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    Layer3_Weights_CPU_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_CPU_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_CPU_Addr_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_CPU_EN_B : OUT STD_LOGIC;
    Layer3_Weights_CPU_WEN_B : OUT STD_LOGIC_VECTOR (3 downto 0);
    Layer3_Weights_CPU_Din_B : OUT STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_CPU_Dout_B : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_SIGMOID_fu_171_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_SIGMOID_fu_171_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_SIGMOID_fu_171_p_ce : OUT STD_LOGIC;
    grp_SIGMOID_fu_171_p_start : OUT STD_LOGIC;
    grp_SIGMOID_fu_171_p_ready : IN STD_LOGIC;
    grp_SIGMOID_fu_171_p_done : IN STD_LOGIC;
    grp_SIGMOID_fu_171_p_idle : IN STD_LOGIC;
    grp_fu_176_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_176_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_176_p_ce : OUT STD_LOGIC;
    grp_fu_180_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_180_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_180_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_180_p_ce : OUT STD_LOGIC );
end;


architecture behav of cnn_lenet_cnn_lenet_Pipeline_calculateLayer4_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_4C9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001001";
    constant ap_const_lv64_4CA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001010";
    constant ap_const_lv64_4CB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001011";
    constant ap_const_lv64_4CC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001100";
    constant ap_const_lv64_4CD : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001101";
    constant ap_const_lv64_4CE : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001110";
    constant ap_const_lv64_4CF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001111";
    constant ap_const_lv64_4D0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010000";
    constant ap_const_lv64_4D1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010001";
    constant ap_const_lv64_4D2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010010";
    constant ap_const_lv64_4D3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010011";
    constant ap_const_lv64_4D4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010100";
    constant ap_const_lv64_4D5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010101";
    constant ap_const_lv64_4D6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010110";
    constant ap_const_lv64_4D7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010111";
    constant ap_const_lv64_4D8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011000";
    constant ap_const_lv64_4D9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011001";
    constant ap_const_lv64_4DA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011010";
    constant ap_const_lv64_4DB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011011";
    constant ap_const_lv64_4DC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011100";
    constant ap_const_lv64_4DD : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011101";
    constant ap_const_lv64_4DE : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011110";
    constant ap_const_lv64_4DF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011111";
    constant ap_const_lv64_4E0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011100000";
    constant ap_const_lv64_4E1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011100001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_4E3 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100011";
    constant ap_const_lv17_4CA : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001010";
    constant ap_const_lv17_4CB : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001011";
    constant ap_const_lv17_4CC : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001100";
    constant ap_const_lv17_4CD : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001101";
    constant ap_const_lv17_4CE : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001110";
    constant ap_const_lv17_4CF : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001111";
    constant ap_const_lv17_4D0 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010000";
    constant ap_const_lv17_4D1 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010001";
    constant ap_const_lv17_4D2 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010010";
    constant ap_const_lv17_4D3 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010011";
    constant ap_const_lv17_4D4 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010100";
    constant ap_const_lv17_4D5 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010101";
    constant ap_const_lv17_4D6 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010110";
    constant ap_const_lv17_4D7 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010111";
    constant ap_const_lv17_4D8 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011000";
    constant ap_const_lv17_4D9 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011001";
    constant ap_const_lv17_4DA : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011010";
    constant ap_const_lv17_4DB : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011011";
    constant ap_const_lv17_4DC : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011100";
    constant ap_const_lv17_4DD : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011101";
    constant ap_const_lv17_4DE : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011110";
    constant ap_const_lv17_4DF : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011111";
    constant ap_const_lv17_4E0 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100000";
    constant ap_const_lv17_4E1 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100001";
    constant ap_const_lv17_4E2 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal icmp_ln70_reg_1317 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage25 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal gmem_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal reg_654 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal reg_658 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_663 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal reg_667 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal reg_672 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_677 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal reg_682 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_702 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_717 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_721 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal reg_726 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln70_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1317_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1317_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln70_reg_1317_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_load_reg_1321 : STD_LOGIC_VECTOR (16 downto 0);
    signal bitcast_ln76_fu_826_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_1_fu_831_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_2_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_3_fu_861_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal somme_fu_886_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_s_reg_1464 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_4_fu_891_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_5_fu_896_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_5_reg_1499 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_6_fu_921_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_7_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_6_reg_1534 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_8_fu_951_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_9_fu_956_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_10_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_11_fu_986_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_13_reg_1579 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_13_reg_1589 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_1_reg_1609 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_12_fu_1011_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_13_fu_1016_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_15_reg_1624 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_15_reg_1634 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_1_1_reg_1654 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_14_fu_1041_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_15_fu_1046_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_17_reg_1669 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_17_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_1_2_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_16_fu_1071_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_17_fu_1076_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_19_reg_1714 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_19_reg_1724 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_1_3_reg_1744 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_18_fu_1101_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_19_fu_1106_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_21_reg_1759 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_21_reg_1769 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_1_4_reg_1784 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_1_4_reg_1784_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_20_fu_1131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_21_fu_1136_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_23_reg_1799 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_23_reg_1809 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_reg_1819 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_reg_1819_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_22_fu_1161_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_23_fu_1166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_25_reg_1834 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_1_reg_1839 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_1_reg_1839_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_24_fu_1171_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_25_fu_1175_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_2_reg_1854 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_2_reg_1854_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_26_fu_1180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_27_fu_1185_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_3_reg_1869 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_3_reg_1869_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_28_fu_1189_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_29_fu_1193_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_4_reg_1884 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_2_4_reg_1884_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_30_fu_1198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_31_fu_1203_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_reg_1899 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_reg_1899_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_32_fu_1207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_33_fu_1211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_1_reg_1914 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_1_reg_1914_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_34_fu_1216_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_35_fu_1221_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_2_reg_1929 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_2_reg_1929_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_2_reg_1929_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_36_fu_1225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_37_fu_1229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_3_reg_1944 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_3_reg_1944_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_3_reg_1944_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_38_fu_1234_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_39_fu_1239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_4_reg_1959 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_4_reg_1959_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_3_4_reg_1959_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_40_fu_1243_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_41_fu_1247_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_reg_1974 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_reg_1974_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_reg_1974_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_42_fu_1252_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_43_fu_1257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_1_reg_1989 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_1_reg_1989_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_1_reg_1989_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_44_fu_1261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_45_fu_1265_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_2_reg_2004 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_2_reg_2004_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_2_reg_2004_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_46_fu_1270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_47_fu_1275_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_3_reg_2019 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_3_reg_2019_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_3_reg_2019_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_48_fu_1279_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln76_49_fu_1283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_4_reg_2034 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_4_reg_2034_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul236_49_4_4_reg_2034_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_2039 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal grp_SIGMOID_fu_639_ap_ready : STD_LOGIC;
    signal grp_SIGMOID_fu_639_ap_ce : STD_LOGIC;
    signal ap_block_pp0_stage1_11001_ignoreCallOp543 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp544 : BOOLEAN;
    signal ap_block_pp0_stage3_11001_ignoreCallOp545 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp546 : BOOLEAN;
    signal ap_block_pp0_stage5_11001_ignoreCallOp547 : BOOLEAN;
    signal ap_block_pp0_stage6_11001_ignoreCallOp548 : BOOLEAN;
    signal ap_block_pp0_stage7_11001_ignoreCallOp549 : BOOLEAN;
    signal ap_block_pp0_stage8_11001_ignoreCallOp550 : BOOLEAN;
    signal ap_block_pp0_stage9_11001_ignoreCallOp551 : BOOLEAN;
    signal ap_block_pp0_stage10_11001_ignoreCallOp552 : BOOLEAN;
    signal grp_SIGMOID_fu_639_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast223_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_1_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_2_fu_821_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln76_3_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_4_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln76_5_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_6_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln76_7_fu_906_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_8_fu_916_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln76_9_fu_936_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_10_fu_946_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln76_11_fu_966_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_12_fu_976_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln76_13_fu_996_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_14_fu_1006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln76_15_fu_1026_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_16_fu_1036_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_17_fu_1056_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_18_fu_1066_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_19_fu_1086_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_20_fu_1096_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_21_fu_1116_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_22_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal zext_ln76_23_fu_1146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_24_fu_1156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11_01001 : BOOLEAN;
    signal phi_mul_fu_166 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal next_mul_fu_774_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_mul_load : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_170 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln70_fu_765_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal Layer3_Weights_CPU_Addr_B_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_646_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_646_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal ap_block_pp0_stage24 : BOOLEAN;
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal ap_block_pp0_stage25 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal grp_fu_650_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_650_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln76_fu_785_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_1_fu_806_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_2_fu_816_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_3_fu_836_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_4_fu_846_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_5_fu_866_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_6_fu_876_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_7_fu_901_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_8_fu_911_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_9_fu_931_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_10_fu_941_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_11_fu_961_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_12_fu_971_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_13_fu_991_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_14_fu_1001_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_15_fu_1021_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_16_fu_1031_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_17_fu_1051_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_18_fu_1061_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_19_fu_1081_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_20_fu_1091_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_21_fu_1111_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_22_fu_1121_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_23_fu_1141_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln76_24_fu_1151_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_646_ce : STD_LOGIC;
    signal grp_fu_650_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter3_stage11 : STD_LOGIC;
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_block_pp0_stage8_00001 : BOOLEAN;
    signal ap_block_pp0_stage12_00001 : BOOLEAN;
    signal ap_block_pp0_stage16_00001 : BOOLEAN;
    signal ap_block_pp0_stage20_00001 : BOOLEAN;
    signal ap_block_pp0_stage24_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage6_00001 : BOOLEAN;
    signal ap_block_pp0_stage10_00001 : BOOLEAN;
    signal ap_block_pp0_stage14_00001 : BOOLEAN;
    signal ap_block_pp0_stage18_00001 : BOOLEAN;
    signal ap_block_pp0_stage22_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage5_00001 : BOOLEAN;
    signal ap_block_pp0_stage9_00001 : BOOLEAN;
    signal ap_block_pp0_stage13_00001 : BOOLEAN;
    signal ap_block_pp0_stage17_00001 : BOOLEAN;
    signal ap_block_pp0_stage21_00001 : BOOLEAN;
    signal ap_block_pp0_stage25_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_block_pp0_stage7_00001 : BOOLEAN;
    signal ap_block_pp0_stage11_00001 : BOOLEAN;
    signal ap_block_pp0_stage15_00001 : BOOLEAN;
    signal ap_block_pp0_stage19_00001 : BOOLEAN;
    signal ap_block_pp0_stage23_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_lenet_SIGMOID IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_lenet_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_lenet_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_lenet_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component cnn_lenet_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage25,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage25)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    grp_SIGMOID_fu_639_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_SIGMOID_fu_639_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_SIGMOID_fu_639_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_SIGMOID_fu_639_ap_ready = ap_const_logic_1)) then 
                    grp_SIGMOID_fu_639_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage11) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage11) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage11) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    i_fu_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln70_fu_759_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_170 <= add_ln70_fu_765_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_170 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln70_fu_759_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_mul_fu_166 <= next_mul_fu_774_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_166 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;

    reg_658_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                reg_658 <= Layer3_Weights_CPU_Dout_B;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_658 <= Layer3_Weights_CPU_Dout_A;
            end if; 
        end if;
    end process;

    reg_667_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                reg_667 <= Layer3_Neurons_CPU_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                reg_667 <= Layer3_Neurons_CPU_q0;
            end if; 
        end if;
    end process;

    reg_672_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                reg_672 <= Layer3_Weights_CPU_Dout_B;
            elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                reg_672 <= Layer3_Weights_CPU_Dout_A;
            end if; 
        end if;
    end process;

    reg_677_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                reg_677 <= Layer3_Neurons_CPU_q1;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                reg_677 <= Layer3_Neurons_CPU_q0;
            end if; 
        end if;
    end process;

    reg_687_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
                reg_687 <= Layer3_Weights_CPU_Dout_B;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                reg_687 <= Layer3_Weights_CPU_Dout_A;
            end if; 
        end if;
    end process;

    reg_692_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    reg_692 <= Layer3_Neurons_CPU_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    reg_692 <= Layer3_Neurons_CPU_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_697_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    reg_697 <= Layer3_Neurons_CPU_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    reg_697 <= Layer3_Neurons_CPU_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_702_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                    reg_702 <= Layer3_Weights_CPU_Dout_B;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_702 <= Layer3_Weights_CPU_Dout_A;
                end if;
            end if; 
        end if;
    end process;

    reg_707_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                    reg_707 <= Layer3_Neurons_CPU_q1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    reg_707 <= Layer3_Neurons_CPU_q0;
                end if;
            end if; 
        end if;
    end process;

    reg_712_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                    reg_712 <= Layer3_Weights_CPU_Dout_B;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    reg_712 <= Layer3_Weights_CPU_Dout_A;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                Layer3_Neurons_CPU_load_13_reg_1589 <= Layer3_Neurons_CPU_q0;
                Layer3_Weights_CPU_load_13_reg_1579 <= Layer3_Weights_CPU_Dout_A;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                Layer3_Neurons_CPU_load_15_reg_1634 <= Layer3_Neurons_CPU_q0;
                Layer3_Weights_CPU_load_15_reg_1624 <= Layer3_Weights_CPU_Dout_A;
                mul236_49_1_reg_1609 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                Layer3_Neurons_CPU_load_17_reg_1679 <= Layer3_Neurons_CPU_q0;
                Layer3_Weights_CPU_load_17_reg_1669 <= Layer3_Weights_CPU_Dout_A;
                mul236_49_1_1_reg_1654 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                Layer3_Neurons_CPU_load_19_reg_1724 <= Layer3_Neurons_CPU_q0;
                Layer3_Weights_CPU_load_19_reg_1714 <= Layer3_Weights_CPU_Dout_A;
                mul236_49_1_2_reg_1699 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                Layer3_Neurons_CPU_load_21_reg_1769 <= Layer3_Neurons_CPU_q0;
                Layer3_Weights_CPU_load_21_reg_1759 <= Layer3_Weights_CPU_Dout_A;
                mul236_49_1_3_reg_1744 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                Layer3_Neurons_CPU_load_23_reg_1809 <= Layer3_Neurons_CPU_q0;
                Layer3_Weights_CPU_load_23_reg_1799 <= Layer3_Weights_CPU_Dout_A;
                mul236_49_1_4_reg_1784 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                Layer3_Weights_CPU_load_25_reg_1834 <= Layer3_Weights_CPU_Dout_A;
                mul236_49_2_reg_1819 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln70_reg_1317 <= icmp_ln70_fu_759_p2;
                icmp_ln70_reg_1317_pp0_iter1_reg <= icmp_ln70_reg_1317;
                icmp_ln70_reg_1317_pp0_iter2_reg <= icmp_ln70_reg_1317_pp0_iter1_reg;
                icmp_ln70_reg_1317_pp0_iter3_reg <= icmp_ln70_reg_1317_pp0_iter2_reg;
                mul236_49_4_3_reg_2019_pp0_iter2_reg <= mul236_49_4_3_reg_2019;
                mul236_49_4_3_reg_2019_pp0_iter3_reg <= mul236_49_4_3_reg_2019_pp0_iter2_reg;
                phi_mul_load_reg_1321 <= ap_sig_allocacmp_phi_mul_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                mul236_49_1_4_reg_1784_pp0_iter1_reg <= mul236_49_1_4_reg_1784;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                mul236_49_2_1_reg_1839 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                mul236_49_2_1_reg_1839_pp0_iter1_reg <= mul236_49_2_1_reg_1839;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                mul236_49_2_2_reg_1854 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                mul236_49_2_2_reg_1854_pp0_iter1_reg <= mul236_49_2_2_reg_1854;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then
                mul236_49_2_3_reg_1869 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then
                mul236_49_2_3_reg_1869_pp0_iter1_reg <= mul236_49_2_3_reg_1869;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then
                mul236_49_2_4_reg_1884 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then
                mul236_49_2_4_reg_1884_pp0_iter1_reg <= mul236_49_2_4_reg_1884;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                mul236_49_2_reg_1819_pp0_iter1_reg <= mul236_49_2_reg_1819;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then
                mul236_49_3_1_reg_1914 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then
                mul236_49_3_1_reg_1914_pp0_iter1_reg <= mul236_49_3_1_reg_1914;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then
                mul236_49_3_2_reg_1929 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then
                mul236_49_3_2_reg_1929_pp0_iter1_reg <= mul236_49_3_2_reg_1929;
                mul236_49_3_2_reg_1929_pp0_iter2_reg <= mul236_49_3_2_reg_1929_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then
                mul236_49_3_3_reg_1944 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then
                mul236_49_3_3_reg_1944_pp0_iter1_reg <= mul236_49_3_3_reg_1944;
                mul236_49_3_3_reg_1944_pp0_iter2_reg <= mul236_49_3_3_reg_1944_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then
                mul236_49_3_4_reg_1959 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then
                mul236_49_3_4_reg_1959_pp0_iter1_reg <= mul236_49_3_4_reg_1959;
                mul236_49_3_4_reg_1959_pp0_iter2_reg <= mul236_49_3_4_reg_1959_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then
                mul236_49_3_reg_1899 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then
                mul236_49_3_reg_1899_pp0_iter1_reg <= mul236_49_3_reg_1899;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then
                mul236_49_4_1_reg_1989 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then
                mul236_49_4_1_reg_1989_pp0_iter1_reg <= mul236_49_4_1_reg_1989;
                mul236_49_4_1_reg_1989_pp0_iter2_reg <= mul236_49_4_1_reg_1989_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then
                mul236_49_4_2_reg_2004 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then
                mul236_49_4_2_reg_2004_pp0_iter1_reg <= mul236_49_4_2_reg_2004;
                mul236_49_4_2_reg_2004_pp0_iter2_reg <= mul236_49_4_2_reg_2004_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul236_49_4_3_reg_2019 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul236_49_4_4_reg_2034 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul236_49_4_4_reg_2034_pp0_iter2_reg <= mul236_49_4_4_reg_2034;
                mul236_49_4_4_reg_2034_pp0_iter3_reg <= mul236_49_4_4_reg_2034_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then
                mul236_49_4_reg_1974 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then
                mul236_49_4_reg_1974_pp0_iter1_reg <= mul236_49_4_reg_1974;
                mul236_49_4_reg_1974_pp0_iter2_reg <= mul236_49_4_reg_1974_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul236_49_5_reg_1499 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul236_49_6_reg_1534 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul236_49_s_reg_1464 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_654 <= Layer3_Weights_CPU_Dout_B;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_663 <= Layer3_Neurons_CPU_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then
                reg_682 <= grp_fu_180_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)))) then
                reg_717 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_721 <= grp_fu_176_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)))) then
                reg_726 <= grp_fu_176_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then
                reg_731 <= grp_fu_176_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = 
    ap_CS_fsm_pp0_stage2)))) then
                reg_736 <= grp_fu_176_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                tmp_reg_2039 <= grp_SIGMOID_fu_171_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage25_subdone, ap_block_pp0_stage11_subdone, ap_condition_exit_pp0_iter3_stage11, ap_idle_pp0_0to2, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter3_stage11) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Layer3_Neurons_CPU_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage12)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4E1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4E0(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DE(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DC(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DA(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D8(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D6(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D4(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D2(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D0(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CE(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CC(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CA(11 - 1 downto 0);
            else 
                Layer3_Neurons_CPU_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            Layer3_Neurons_CPU_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Layer3_Neurons_CPU_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4DF(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4DD(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4DB(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4D9(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4D7(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4D5(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4D3(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4D1(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4CF(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4CD(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4CB(11 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Layer3_Neurons_CPU_address1 <= ap_const_lv64_4C9(11 - 1 downto 0);
            else 
                Layer3_Neurons_CPU_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            Layer3_Neurons_CPU_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Layer3_Neurons_CPU_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Neurons_CPU_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Layer3_Neurons_CPU_ce1 <= ap_const_logic_1;
        else 
            Layer3_Neurons_CPU_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Layer3_Weights_CPU_Addr_A <= std_logic_vector(shift_left(unsigned(Layer3_Weights_CPU_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Layer3_Weights_CPU_Addr_A_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, zext_ln76_fu_791_p1, zext_ln76_2_fu_821_p1, ap_block_pp0_stage2, zext_ln76_4_fu_851_p1, ap_block_pp0_stage3, zext_ln76_6_fu_881_p1, ap_block_pp0_stage4, zext_ln76_8_fu_916_p1, ap_block_pp0_stage5, zext_ln76_10_fu_946_p1, ap_block_pp0_stage6, zext_ln76_12_fu_976_p1, ap_block_pp0_stage7, zext_ln76_14_fu_1006_p1, ap_block_pp0_stage8, zext_ln76_16_fu_1036_p1, zext_ln76_18_fu_1066_p1, zext_ln76_20_fu_1096_p1, zext_ln76_22_fu_1126_p1, ap_block_pp0_stage12, zext_ln76_24_fu_1156_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_24_fu_1156_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_22_fu_1126_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_20_fu_1096_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_18_fu_1066_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_16_fu_1036_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_14_fu_1006_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_12_fu_976_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_10_fu_946_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_8_fu_916_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_6_fu_881_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_4_fu_851_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_2_fu_821_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Layer3_Weights_CPU_Addr_A_orig <= zext_ln76_fu_791_p1(32 - 1 downto 0);
            else 
                Layer3_Weights_CPU_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Layer3_Weights_CPU_Addr_A_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Layer3_Weights_CPU_Addr_B <= std_logic_vector(shift_left(unsigned(Layer3_Weights_CPU_Addr_B_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));

    Layer3_Weights_CPU_Addr_B_orig_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, p_cast223_fu_780_p1, zext_ln76_1_fu_811_p1, ap_block_pp0_stage2, zext_ln76_3_fu_841_p1, ap_block_pp0_stage3, zext_ln76_5_fu_871_p1, ap_block_pp0_stage4, zext_ln76_7_fu_906_p1, ap_block_pp0_stage5, zext_ln76_9_fu_936_p1, ap_block_pp0_stage6, zext_ln76_11_fu_966_p1, ap_block_pp0_stage7, zext_ln76_13_fu_996_p1, ap_block_pp0_stage8, zext_ln76_15_fu_1026_p1, zext_ln76_17_fu_1056_p1, zext_ln76_19_fu_1086_p1, zext_ln76_21_fu_1116_p1, ap_block_pp0_stage12, zext_ln76_23_fu_1146_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_23_fu_1146_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_21_fu_1116_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_19_fu_1086_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_17_fu_1056_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_15_fu_1026_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_13_fu_996_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_11_fu_966_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_9_fu_936_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_7_fu_906_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_5_fu_871_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_3_fu_841_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Layer3_Weights_CPU_Addr_B_orig <= zext_ln76_1_fu_811_p1(32 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Layer3_Weights_CPU_Addr_B_orig <= p_cast223_fu_780_p1(32 - 1 downto 0);
            else 
                Layer3_Weights_CPU_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            Layer3_Weights_CPU_Addr_B_orig <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    Layer3_Weights_CPU_Din_A <= ap_const_lv32_0;
    Layer3_Weights_CPU_Din_B <= ap_const_lv32_0;

    Layer3_Weights_CPU_EN_A_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Layer3_Weights_CPU_EN_A <= ap_const_logic_1;
        else 
            Layer3_Weights_CPU_EN_A <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Weights_CPU_EN_B_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Layer3_Weights_CPU_EN_B <= ap_const_logic_1;
        else 
            Layer3_Weights_CPU_EN_B <= ap_const_logic_0;
        end if; 
    end process;

    Layer3_Weights_CPU_WEN_A <= ap_const_lv4_0;
    Layer3_Weights_CPU_WEN_B <= ap_const_lv4_0;
    add_ln70_fu_765_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    add_ln76_10_fu_941_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D4));
    add_ln76_11_fu_961_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D5));
    add_ln76_12_fu_971_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D6));
    add_ln76_13_fu_991_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D7));
    add_ln76_14_fu_1001_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D8));
    add_ln76_15_fu_1021_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D9));
    add_ln76_16_fu_1031_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4DA));
    add_ln76_17_fu_1051_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4DB));
    add_ln76_18_fu_1061_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4DC));
    add_ln76_19_fu_1081_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4DD));
    add_ln76_1_fu_806_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4CB));
    add_ln76_20_fu_1091_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4DE));
    add_ln76_21_fu_1111_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4DF));
    add_ln76_22_fu_1121_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4E0));
    add_ln76_23_fu_1141_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4E1));
    add_ln76_24_fu_1151_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4E2));
    add_ln76_2_fu_816_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4CC));
    add_ln76_3_fu_836_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4CD));
    add_ln76_4_fu_846_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4CE));
    add_ln76_5_fu_866_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4CF));
    add_ln76_6_fu_876_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D0));
    add_ln76_7_fu_901_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D1));
    add_ln76_8_fu_911_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D2));
    add_ln76_9_fu_931_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1321) + unsigned(ap_const_lv17_4D3));
    add_ln76_fu_785_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv17_4CA));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001_ignoreCallOp552 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem_WREADY)
    begin
                ap_block_pp0_stage11_11001 <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem_WREADY)
    begin
                ap_block_pp0_stage11_subdone <= ((m_axi_gmem_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp543 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp544 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp545 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001_ignoreCallOp546 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001_ignoreCallOp547 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001_ignoreCallOp548 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001_ignoreCallOp549 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001_ignoreCallOp550 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001_ignoreCallOp551 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage25_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_subdone, icmp_ln70_reg_1317)
    begin
        if (((icmp_ln70_reg_1317 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            ap_condition_exit_pp0_iter0_stage25 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter3_stage11_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage11, icmp_ln70_reg_1317_pp0_iter3_reg, ap_block_pp0_stage11_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln70_reg_1317_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            ap_condition_exit_pp0_iter3_stage11 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter3_stage11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage25;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_170)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_170;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, phi_mul_fu_166, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_phi_mul_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_phi_mul_load <= phi_mul_fu_166;
        end if; 
    end process;

    bitcast_ln76_10_fu_981_p1 <= reg_654;
    bitcast_ln76_11_fu_986_p1 <= reg_692;
    bitcast_ln76_12_fu_1011_p1 <= reg_672;
    bitcast_ln76_13_fu_1016_p1 <= reg_663;
    bitcast_ln76_14_fu_1041_p1 <= reg_658;
    bitcast_ln76_15_fu_1046_p1 <= reg_697;
    bitcast_ln76_16_fu_1071_p1 <= reg_702;
    bitcast_ln76_17_fu_1076_p1 <= reg_677;
    bitcast_ln76_18_fu_1101_p1 <= reg_687;
    bitcast_ln76_19_fu_1106_p1 <= reg_707;
    bitcast_ln76_1_fu_831_p1 <= reg_663;
    bitcast_ln76_20_fu_1131_p1 <= reg_712;
    bitcast_ln76_21_fu_1136_p1 <= reg_667;
    bitcast_ln76_22_fu_1161_p1 <= reg_654;
    bitcast_ln76_23_fu_1166_p1 <= reg_717;
    bitcast_ln76_24_fu_1171_p1 <= Layer3_Weights_CPU_load_13_reg_1579;
    bitcast_ln76_25_fu_1175_p1 <= reg_692;
    bitcast_ln76_26_fu_1180_p1 <= reg_672;
    bitcast_ln76_27_fu_1185_p1 <= Layer3_Neurons_CPU_load_13_reg_1589;
    bitcast_ln76_28_fu_1189_p1 <= Layer3_Weights_CPU_load_15_reg_1624;
    bitcast_ln76_29_fu_1193_p1 <= reg_663;
    bitcast_ln76_2_fu_856_p1 <= reg_658;
    bitcast_ln76_30_fu_1198_p1 <= reg_658;
    bitcast_ln76_31_fu_1203_p1 <= Layer3_Neurons_CPU_load_15_reg_1634;
    bitcast_ln76_32_fu_1207_p1 <= Layer3_Weights_CPU_load_17_reg_1669;
    bitcast_ln76_33_fu_1211_p1 <= reg_697;
    bitcast_ln76_34_fu_1216_p1 <= reg_702;
    bitcast_ln76_35_fu_1221_p1 <= Layer3_Neurons_CPU_load_17_reg_1679;
    bitcast_ln76_36_fu_1225_p1 <= Layer3_Weights_CPU_load_19_reg_1714;
    bitcast_ln76_37_fu_1229_p1 <= reg_677;
    bitcast_ln76_38_fu_1234_p1 <= reg_687;
    bitcast_ln76_39_fu_1239_p1 <= Layer3_Neurons_CPU_load_19_reg_1724;
    bitcast_ln76_3_fu_861_p1 <= reg_667;
    bitcast_ln76_40_fu_1243_p1 <= Layer3_Weights_CPU_load_21_reg_1759;
    bitcast_ln76_41_fu_1247_p1 <= reg_707;
    bitcast_ln76_42_fu_1252_p1 <= reg_712;
    bitcast_ln76_43_fu_1257_p1 <= Layer3_Neurons_CPU_load_21_reg_1769;
    bitcast_ln76_44_fu_1261_p1 <= Layer3_Weights_CPU_load_23_reg_1799;
    bitcast_ln76_45_fu_1265_p1 <= reg_667;
    bitcast_ln76_46_fu_1270_p1 <= reg_654;
    bitcast_ln76_47_fu_1275_p1 <= Layer3_Neurons_CPU_load_23_reg_1809;
    bitcast_ln76_48_fu_1279_p1 <= Layer3_Weights_CPU_load_25_reg_1834;
    bitcast_ln76_49_fu_1283_p1 <= reg_717;
    bitcast_ln76_4_fu_891_p1 <= reg_672;
    bitcast_ln76_5_fu_896_p1 <= reg_663;
    bitcast_ln76_6_fu_921_p1 <= reg_658;
    bitcast_ln76_7_fu_926_p1 <= reg_677;
    bitcast_ln76_8_fu_951_p1 <= reg_687;
    bitcast_ln76_9_fu_956_p1 <= reg_667;
    bitcast_ln76_fu_826_p1 <= reg_658;

    gmem_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_gmem_WREADY, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            gmem_blk_n_W <= m_axi_gmem_WREADY;
        else 
            gmem_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    grp_SIGMOID_fu_171_p_ce <= grp_SIGMOID_fu_639_ap_ce;
    grp_SIGMOID_fu_171_p_din1 <= reg_736;
    grp_SIGMOID_fu_171_p_start <= grp_SIGMOID_fu_639_ap_start_reg;

    grp_SIGMOID_fu_639_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage1_11001_ignoreCallOp543, ap_block_pp0_stage2_11001_ignoreCallOp544, ap_block_pp0_stage3_11001_ignoreCallOp545, ap_block_pp0_stage4_11001_ignoreCallOp546, ap_block_pp0_stage5_11001_ignoreCallOp547, ap_block_pp0_stage6_11001_ignoreCallOp548, ap_block_pp0_stage7_11001_ignoreCallOp549, ap_block_pp0_stage8_11001_ignoreCallOp550, ap_block_pp0_stage9_11001_ignoreCallOp551, ap_block_pp0_stage10_11001_ignoreCallOp552)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001_ignoreCallOp552) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001_ignoreCallOp551) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001_ignoreCallOp550) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001_ignoreCallOp549) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001_ignoreCallOp548) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001_ignoreCallOp547) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp546) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp545) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp544) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp543) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_SIGMOID_fu_639_ap_ce <= ap_const_logic_1;
        else 
            grp_SIGMOID_fu_639_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_SIGMOID_fu_639_ap_ready <= grp_SIGMOID_fu_171_p_ready;
    grp_fu_176_p_ce <= grp_fu_646_ce;
    grp_fu_176_p_din0 <= grp_fu_646_p0;
    grp_fu_176_p_din1 <= grp_fu_646_p1;
    grp_fu_176_p_opcode <= ap_const_lv2_0;
    grp_fu_180_p_ce <= grp_fu_650_ce;
    grp_fu_180_p_din0 <= grp_fu_650_p0;
    grp_fu_180_p_din1 <= grp_fu_650_p1;

    grp_fu_646_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_block_pp0_stage25_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_646_ce <= ap_const_logic_1;
        else 
            grp_fu_646_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_646_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, reg_721, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage23, reg_726, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage21, reg_731, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage24, reg_736, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage22, somme_fu_886_p1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage12, ap_block_pp0_stage16, ap_block_pp0_stage20, ap_block_pp0_stage24, ap_block_pp0_stage14, ap_block_pp0_stage18, ap_block_pp0_stage22, ap_block_pp0_stage13, ap_block_pp0_stage17, ap_block_pp0_stage21, ap_block_pp0_stage25, ap_block_pp0_stage15, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_646_p0 <= reg_736;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)))) then 
            grp_fu_646_p0 <= reg_731;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
            grp_fu_646_p0 <= reg_726;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then 
            grp_fu_646_p0 <= reg_721;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_646_p0 <= somme_fu_886_p1;
        else 
            grp_fu_646_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_646_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, reg_682, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage22, mul236_49_s_reg_1464, mul236_49_5_reg_1499, mul236_49_6_reg_1534, mul236_49_1_reg_1609, mul236_49_1_1_reg_1654, mul236_49_1_2_reg_1699, mul236_49_1_3_reg_1744, mul236_49_1_4_reg_1784_pp0_iter1_reg, mul236_49_2_reg_1819_pp0_iter1_reg, mul236_49_2_1_reg_1839_pp0_iter1_reg, mul236_49_2_2_reg_1854_pp0_iter1_reg, mul236_49_2_3_reg_1869_pp0_iter1_reg, mul236_49_2_4_reg_1884_pp0_iter1_reg, mul236_49_3_reg_1899_pp0_iter1_reg, mul236_49_3_1_reg_1914_pp0_iter1_reg, mul236_49_3_2_reg_1929_pp0_iter2_reg, mul236_49_3_3_reg_1944_pp0_iter2_reg, mul236_49_3_4_reg_1959_pp0_iter2_reg, mul236_49_4_reg_1974_pp0_iter2_reg, mul236_49_4_1_reg_1989_pp0_iter2_reg, mul236_49_4_2_reg_2004_pp0_iter2_reg, mul236_49_4_3_reg_2019_pp0_iter3_reg, mul236_49_4_4_reg_2034_pp0_iter3_reg, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage12, ap_block_pp0_stage16, ap_block_pp0_stage20, ap_block_pp0_stage24, ap_block_pp0_stage14, ap_block_pp0_stage18, ap_block_pp0_stage22, ap_block_pp0_stage13, ap_block_pp0_stage17, ap_block_pp0_stage21, ap_block_pp0_stage25, ap_block_pp0_stage15, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
            grp_fu_646_p1 <= mul236_49_4_4_reg_2034_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
            grp_fu_646_p1 <= mul236_49_4_3_reg_2019_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_646_p1 <= mul236_49_4_2_reg_2004_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_646_p1 <= mul236_49_4_1_reg_1989_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_646_p1 <= mul236_49_4_reg_1974_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_646_p1 <= mul236_49_3_4_reg_1959_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            grp_fu_646_p1 <= mul236_49_3_3_reg_1944_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_646_p1 <= mul236_49_3_2_reg_1929_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_646_p1 <= mul236_49_3_1_reg_1914_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_646_p1 <= mul236_49_3_reg_1899_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_646_p1 <= mul236_49_2_4_reg_1884_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_646_p1 <= mul236_49_2_3_reg_1869_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_646_p1 <= mul236_49_2_2_reg_1854_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_646_p1 <= mul236_49_2_1_reg_1839_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_646_p1 <= mul236_49_2_reg_1819_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_646_p1 <= mul236_49_1_4_reg_1784_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_646_p1 <= mul236_49_1_3_reg_1744;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_646_p1 <= mul236_49_1_2_reg_1699;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_646_p1 <= mul236_49_1_1_reg_1654;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
            grp_fu_646_p1 <= mul236_49_1_reg_1609;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_646_p1 <= mul236_49_6_reg_1534;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_646_p1 <= mul236_49_5_reg_1499;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_646_p1 <= mul236_49_s_reg_1464;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)))) then 
            grp_fu_646_p1 <= reg_682;
        else 
            grp_fu_646_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_650_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_block_pp0_stage25_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_650_ce <= ap_const_logic_1;
        else 
            grp_fu_650_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_650_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage22, bitcast_ln76_fu_826_p1, bitcast_ln76_2_fu_856_p1, bitcast_ln76_4_fu_891_p1, bitcast_ln76_6_fu_921_p1, bitcast_ln76_8_fu_951_p1, bitcast_ln76_10_fu_981_p1, bitcast_ln76_12_fu_1011_p1, bitcast_ln76_14_fu_1041_p1, bitcast_ln76_16_fu_1071_p1, bitcast_ln76_18_fu_1101_p1, bitcast_ln76_20_fu_1131_p1, bitcast_ln76_22_fu_1161_p1, bitcast_ln76_24_fu_1171_p1, bitcast_ln76_26_fu_1180_p1, bitcast_ln76_28_fu_1189_p1, bitcast_ln76_30_fu_1198_p1, bitcast_ln76_32_fu_1207_p1, bitcast_ln76_34_fu_1216_p1, bitcast_ln76_36_fu_1225_p1, bitcast_ln76_38_fu_1234_p1, bitcast_ln76_40_fu_1243_p1, bitcast_ln76_42_fu_1252_p1, bitcast_ln76_44_fu_1261_p1, bitcast_ln76_46_fu_1270_p1, bitcast_ln76_48_fu_1279_p1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage12, ap_block_pp0_stage16, ap_block_pp0_stage20, ap_block_pp0_stage24, ap_block_pp0_stage14, ap_block_pp0_stage18, ap_block_pp0_stage22, ap_block_pp0_stage13, ap_block_pp0_stage17, ap_block_pp0_stage21, ap_block_pp0_stage25, ap_block_pp0_stage15, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_650_p0 <= bitcast_ln76_48_fu_1279_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            grp_fu_650_p0 <= bitcast_ln76_46_fu_1270_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
            grp_fu_650_p0 <= bitcast_ln76_44_fu_1261_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
            grp_fu_650_p0 <= bitcast_ln76_42_fu_1252_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_650_p0 <= bitcast_ln76_40_fu_1243_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_650_p0 <= bitcast_ln76_38_fu_1234_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then 
            grp_fu_650_p0 <= bitcast_ln76_36_fu_1225_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
            grp_fu_650_p0 <= bitcast_ln76_34_fu_1216_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_650_p0 <= bitcast_ln76_32_fu_1207_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_650_p0 <= bitcast_ln76_30_fu_1198_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_650_p0 <= bitcast_ln76_28_fu_1189_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_650_p0 <= bitcast_ln76_26_fu_1180_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_650_p0 <= bitcast_ln76_24_fu_1171_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_650_p0 <= bitcast_ln76_22_fu_1161_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_650_p0 <= bitcast_ln76_20_fu_1131_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_650_p0 <= bitcast_ln76_18_fu_1101_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_650_p0 <= bitcast_ln76_16_fu_1071_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_650_p0 <= bitcast_ln76_14_fu_1041_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_650_p0 <= bitcast_ln76_12_fu_1011_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_650_p0 <= bitcast_ln76_10_fu_981_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_650_p0 <= bitcast_ln76_8_fu_951_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_650_p0 <= bitcast_ln76_6_fu_921_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_650_p0 <= bitcast_ln76_4_fu_891_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_650_p0 <= bitcast_ln76_2_fu_856_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_650_p0 <= bitcast_ln76_fu_826_p1;
        else 
            grp_fu_650_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_650_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage22, bitcast_ln76_1_fu_831_p1, bitcast_ln76_3_fu_861_p1, bitcast_ln76_5_fu_896_p1, bitcast_ln76_7_fu_926_p1, bitcast_ln76_9_fu_956_p1, bitcast_ln76_11_fu_986_p1, bitcast_ln76_13_fu_1016_p1, bitcast_ln76_15_fu_1046_p1, bitcast_ln76_17_fu_1076_p1, bitcast_ln76_19_fu_1106_p1, bitcast_ln76_21_fu_1136_p1, bitcast_ln76_23_fu_1166_p1, bitcast_ln76_25_fu_1175_p1, bitcast_ln76_27_fu_1185_p1, bitcast_ln76_29_fu_1193_p1, bitcast_ln76_31_fu_1203_p1, bitcast_ln76_33_fu_1211_p1, bitcast_ln76_35_fu_1221_p1, bitcast_ln76_37_fu_1229_p1, bitcast_ln76_39_fu_1239_p1, bitcast_ln76_41_fu_1247_p1, bitcast_ln76_43_fu_1257_p1, bitcast_ln76_45_fu_1265_p1, bitcast_ln76_47_fu_1275_p1, bitcast_ln76_49_fu_1283_p1, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage12, ap_block_pp0_stage16, ap_block_pp0_stage20, ap_block_pp0_stage24, ap_block_pp0_stage14, ap_block_pp0_stage18, ap_block_pp0_stage22, ap_block_pp0_stage13, ap_block_pp0_stage17, ap_block_pp0_stage21, ap_block_pp0_stage25, ap_block_pp0_stage15, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_650_p1 <= bitcast_ln76_49_fu_1283_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            grp_fu_650_p1 <= bitcast_ln76_47_fu_1275_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
            grp_fu_650_p1 <= bitcast_ln76_45_fu_1265_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
            grp_fu_650_p1 <= bitcast_ln76_43_fu_1257_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_650_p1 <= bitcast_ln76_41_fu_1247_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_650_p1 <= bitcast_ln76_39_fu_1239_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then 
            grp_fu_650_p1 <= bitcast_ln76_37_fu_1229_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
            grp_fu_650_p1 <= bitcast_ln76_35_fu_1221_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_650_p1 <= bitcast_ln76_33_fu_1211_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_650_p1 <= bitcast_ln76_31_fu_1203_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_650_p1 <= bitcast_ln76_29_fu_1193_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_650_p1 <= bitcast_ln76_27_fu_1185_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_650_p1 <= bitcast_ln76_25_fu_1175_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_650_p1 <= bitcast_ln76_23_fu_1166_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_650_p1 <= bitcast_ln76_21_fu_1136_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_650_p1 <= bitcast_ln76_19_fu_1106_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_650_p1 <= bitcast_ln76_17_fu_1076_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_650_p1 <= bitcast_ln76_15_fu_1046_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_650_p1 <= bitcast_ln76_13_fu_1016_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_650_p1 <= bitcast_ln76_11_fu_986_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_650_p1 <= bitcast_ln76_9_fu_956_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_650_p1 <= bitcast_ln76_7_fu_926_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_650_p1 <= bitcast_ln76_5_fu_896_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_650_p1 <= bitcast_ln76_3_fu_861_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_650_p1 <= bitcast_ln76_1_fu_831_p1;
        else 
            grp_fu_650_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln70_fu_759_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_64) else "0";
    m_axi_gmem_ARADDR <= ap_const_lv64_0;
    m_axi_gmem_ARBURST <= ap_const_lv2_0;
    m_axi_gmem_ARCACHE <= ap_const_lv4_0;
    m_axi_gmem_ARID <= ap_const_lv1_0;
    m_axi_gmem_ARLEN <= ap_const_lv32_0;
    m_axi_gmem_ARLOCK <= ap_const_lv2_0;
    m_axi_gmem_ARPROT <= ap_const_lv3_0;
    m_axi_gmem_ARQOS <= ap_const_lv4_0;
    m_axi_gmem_ARREGION <= ap_const_lv4_0;
    m_axi_gmem_ARSIZE <= ap_const_lv3_0;
    m_axi_gmem_ARUSER <= ap_const_lv1_0;
    m_axi_gmem_ARVALID <= ap_const_logic_0;
    m_axi_gmem_AWADDR <= ap_const_lv64_0;
    m_axi_gmem_AWBURST <= ap_const_lv2_0;
    m_axi_gmem_AWCACHE <= ap_const_lv4_0;
    m_axi_gmem_AWID <= ap_const_lv1_0;
    m_axi_gmem_AWLEN <= ap_const_lv32_0;
    m_axi_gmem_AWLOCK <= ap_const_lv2_0;
    m_axi_gmem_AWPROT <= ap_const_lv3_0;
    m_axi_gmem_AWQOS <= ap_const_lv4_0;
    m_axi_gmem_AWREGION <= ap_const_lv4_0;
    m_axi_gmem_AWSIZE <= ap_const_lv3_0;
    m_axi_gmem_AWUSER <= ap_const_lv1_0;
    m_axi_gmem_AWVALID <= ap_const_logic_0;
    m_axi_gmem_BREADY <= ap_const_logic_0;
    m_axi_gmem_RREADY <= ap_const_logic_0;
    m_axi_gmem_WDATA <= tmp_reg_2039;
    m_axi_gmem_WID <= ap_const_lv1_0;
    m_axi_gmem_WLAST <= ap_const_logic_0;
    m_axi_gmem_WSTRB <= ap_const_lv4_F;
    m_axi_gmem_WUSER <= ap_const_lv1_0;

    m_axi_gmem_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            m_axi_gmem_WVALID <= ap_const_logic_1;
        else 
            m_axi_gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    next_mul_fu_774_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv17_4E3));
    p_cast223_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_phi_mul_load),64));
    somme_fu_886_p1 <= reg_654;
    zext_ln76_10_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_10_fu_941_p2),64));
    zext_ln76_11_fu_966_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_11_fu_961_p2),64));
    zext_ln76_12_fu_976_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_12_fu_971_p2),64));
    zext_ln76_13_fu_996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_13_fu_991_p2),64));
    zext_ln76_14_fu_1006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_14_fu_1001_p2),64));
    zext_ln76_15_fu_1026_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_15_fu_1021_p2),64));
    zext_ln76_16_fu_1036_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_16_fu_1031_p2),64));
    zext_ln76_17_fu_1056_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_17_fu_1051_p2),64));
    zext_ln76_18_fu_1066_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_18_fu_1061_p2),64));
    zext_ln76_19_fu_1086_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_19_fu_1081_p2),64));
    zext_ln76_1_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_1_fu_806_p2),64));
    zext_ln76_20_fu_1096_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_20_fu_1091_p2),64));
    zext_ln76_21_fu_1116_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_21_fu_1111_p2),64));
    zext_ln76_22_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_22_fu_1121_p2),64));
    zext_ln76_23_fu_1146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_23_fu_1141_p2),64));
    zext_ln76_24_fu_1156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_24_fu_1151_p2),64));
    zext_ln76_2_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_2_fu_816_p2),64));
    zext_ln76_3_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_3_fu_836_p2),64));
    zext_ln76_4_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_4_fu_846_p2),64));
    zext_ln76_5_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_5_fu_866_p2),64));
    zext_ln76_6_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_6_fu_876_p2),64));
    zext_ln76_7_fu_906_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_7_fu_901_p2),64));
    zext_ln76_8_fu_916_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_8_fu_911_p2),64));
    zext_ln76_9_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_9_fu_931_p2),64));
    zext_ln76_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_fu_785_p2),64));
end behav;
