-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Lenet_HW is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Layer1_Neurons_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer1_Neurons_stream_TVALID : IN STD_LOGIC;
    Layer1_Neurons_stream_TREADY : OUT STD_LOGIC;
    Layer1_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer1_Weights_stream_TVALID : IN STD_LOGIC;
    Layer1_Weights_stream_TREADY : OUT STD_LOGIC;
    Layer2_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer2_Weights_stream_TVALID : IN STD_LOGIC;
    Layer2_Weights_stream_TREADY : OUT STD_LOGIC;
    Layer3_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_stream_TVALID : IN STD_LOGIC;
    Layer3_Weights_stream_TREADY : OUT STD_LOGIC;
    Layer4_Neurons_stream_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    Layer4_Neurons_stream_TVALID : OUT STD_LOGIC;
    Layer4_Neurons_stream_TREADY : IN STD_LOGIC );
end;


architecture behav of Lenet_HW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Lenet_HW_Lenet_HW,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010i-clg225-1L,HLS_INPUT_CLOCK=50.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=35.985380,HLS_SYN_LAT=187789,HLS_SYN_TPT=none,HLS_SYN_MEM=11,HLS_SYN_DSP=0,HLS_SYN_FF=10105,HLS_SYN_LUT=14807,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (38 downto 0) := "000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (38 downto 0) := "000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (38 downto 0) := "000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (38 downto 0) := "000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (38 downto 0) := "000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (38 downto 0) := "000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (38 downto 0) := "000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (38 downto 0) := "000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (38 downto 0) := "000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (38 downto 0) := "000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (38 downto 0) := "001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (38 downto 0) := "010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (38 downto 0) := "100000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_3FE55555571F7693 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100101010101010101010101010111000111110111011010010011";
    constant ap_const_lv64_3FFB74538EF34D6A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111011011101000101001110001110111100110100110101101010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv11_19 : STD_LOGIC_VECTOR (10 downto 0) := "00000011001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (38 downto 0) := "000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Layer3_Weights_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln109_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Layer4_Neurons_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_169 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal phi_mul_load_reg_252 : STD_LOGIC_VECTOR (10 downto 0);
    signal Layer3_Weights_stream_read_reg_260 : STD_LOGIC_VECTOR (31 downto 0);
    signal somme_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal somme_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal conv_i_fu_160_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_i_reg_270 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_generic_tanh_double_s_fu_146_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_275 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal Layer2_Neurons_CPU_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal Layer2_Neurons_CPU_ce0 : STD_LOGIC;
    signal Layer2_Neurons_CPU_we0 : STD_LOGIC;
    signal Layer2_Neurons_CPU_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer2_Neurons_CPU_ce1 : STD_LOGIC;
    signal Layer2_Neurons_CPU_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal Layer3_Neurons_CPU_we0 : STD_LOGIC;
    signal Layer3_Neurons_CPU_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer2_fu_107_ap_start : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_ap_done : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_ap_idle : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_ap_ready : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_Layer1_Neurons_stream_TREADY : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_Layer1_Weights_stream_TREADY : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_we0 : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_285_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_285_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_285_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_285_p_ce : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_grp_fu_289_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_289_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_289_p_ce : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_grp_fu_163_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_163_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer2_fu_107_grp_fu_163_p_ce : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_ce : STD_LOGIC;
    signal grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_start : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_ap_start : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_ap_done : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_ap_idle : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_ap_ready : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce1 : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_Layer2_Weights_stream_TREADY : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_we0 : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_285_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_285_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_285_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_285_p_ce : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_grp_fu_289_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_289_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_289_p_ce : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_grp_fu_163_p_din0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_163_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer3_fu_122_grp_fu_163_p_ce : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_din1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_ce : STD_LOGIC;
    signal grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_start : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_done : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_idle : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_ready : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Weights_stream_TREADY : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_somme_52_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_somme_52_out_ap_vld : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_ce : STD_LOGIC;
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_ce : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_146_ap_start : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_146_ap_done : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_146_ap_idle : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_146_ap_ready : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_146_ap_ce : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_146_t_in : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_calculateLayer2_fu_107_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_calculateLayer3_fu_122_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_generic_tanh_double_s_fu_146_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (38 downto 0);
    signal ap_NS_fsm_state12 : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal phi_mul_fu_74 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal next_mul_fu_191_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal regslice_both_Layer4_Neurons_stream_U_apdone_blk : STD_LOGIC;
    signal ap_block_state6 : BOOLEAN;
    signal i_fu_78 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln109_fu_203_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_163_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal conv24_i_fu_157_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_163_ce : STD_LOGIC;
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_285_ce : STD_LOGIC;
    signal grp_fu_289_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_289_ce : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ST_fsm_state33_blk : STD_LOGIC;
    signal ap_ST_fsm_state34_blk : STD_LOGIC;
    signal ap_ST_fsm_state35_blk : STD_LOGIC;
    signal ap_ST_fsm_state36_blk : STD_LOGIC;
    signal ap_ST_fsm_state37_blk : STD_LOGIC;
    signal ap_ST_fsm_state38_blk : STD_LOGIC;
    signal ap_ST_fsm_state39_blk : STD_LOGIC;
    signal regslice_both_Layer1_Neurons_stream_U_apdone_blk : STD_LOGIC;
    signal Layer1_Neurons_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer1_Neurons_stream_TVALID_int_regslice : STD_LOGIC;
    signal Layer1_Neurons_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Layer1_Neurons_stream_U_ack_in : STD_LOGIC;
    signal regslice_both_Layer1_Weights_stream_U_apdone_blk : STD_LOGIC;
    signal Layer1_Weights_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer1_Weights_stream_TVALID_int_regslice : STD_LOGIC;
    signal Layer1_Weights_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Layer1_Weights_stream_U_ack_in : STD_LOGIC;
    signal regslice_both_Layer2_Weights_stream_U_apdone_blk : STD_LOGIC;
    signal Layer2_Weights_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer2_Weights_stream_TVALID_int_regslice : STD_LOGIC;
    signal Layer2_Weights_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Layer2_Weights_stream_U_ack_in : STD_LOGIC;
    signal regslice_both_Layer3_Weights_stream_U_apdone_blk : STD_LOGIC;
    signal Layer3_Weights_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_stream_TVALID_int_regslice : STD_LOGIC;
    signal Layer3_Weights_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Layer3_Weights_stream_U_ack_in : STD_LOGIC;
    signal Layer4_Neurons_stream_TDATA_int_regslice : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer4_Neurons_stream_TVALID_int_regslice : STD_LOGIC;
    signal Layer4_Neurons_stream_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_Layer4_Neurons_stream_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component Lenet_HW_calculateLayer2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Layer1_Neurons_stream_TVALID : IN STD_LOGIC;
        Layer1_Weights_stream_TVALID : IN STD_LOGIC;
        Layer1_Neurons_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer1_Neurons_stream_TREADY : OUT STD_LOGIC;
        Layer1_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer1_Weights_stream_TREADY : OUT STD_LOGIC;
        Layer2_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Layer2_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer2_Neurons_CPU_we0 : OUT STD_LOGIC;
        Layer2_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_285_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_ce : OUT STD_LOGIC;
        grp_fu_289_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_ce : OUT STD_LOGIC;
        grp_fu_163_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_163_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_163_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_163_p_ce : OUT STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_generic_tanh_double_s_fu_146_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_generic_tanh_double_s_fu_146_p_ce : OUT STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_start : OUT STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_ready : IN STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_done : IN STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_idle : IN STD_LOGIC );
    end component;


    component Lenet_HW_calculateLayer3 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Layer2_Weights_stream_TVALID : IN STD_LOGIC;
        Layer2_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Layer2_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer2_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer2_Neurons_CPU_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        Layer2_Neurons_CPU_ce1 : OUT STD_LOGIC;
        Layer2_Neurons_CPU_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer2_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer2_Weights_stream_TREADY : OUT STD_LOGIC;
        Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer3_Neurons_CPU_we0 : OUT STD_LOGIC;
        Layer3_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_285_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_ce : OUT STD_LOGIC;
        grp_fu_289_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_ce : OUT STD_LOGIC;
        grp_fu_163_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_163_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_163_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_fu_163_p_ce : OUT STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
        grp_generic_tanh_double_s_fu_146_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
        grp_generic_tanh_double_s_fu_146_p_ce : OUT STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_start : OUT STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_ready : IN STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_done : IN STD_LOGIC;
        grp_generic_tanh_double_s_fu_146_p_idle : IN STD_LOGIC );
    end component;


    component Lenet_HW_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Layer3_Weights_stream_TVALID : IN STD_LOGIC;
        somme : IN STD_LOGIC_VECTOR (31 downto 0);
        phi_mul : IN STD_LOGIC_VECTOR (10 downto 0);
        Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer3_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer3_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer3_Weights_stream_TREADY : OUT STD_LOGIC;
        somme_52_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        somme_52_out_ap_vld : OUT STD_LOGIC;
        grp_fu_285_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_285_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_285_p_ce : OUT STD_LOGIC;
        grp_fu_289_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_289_p_ce : OUT STD_LOGIC );
    end component;


    component Lenet_HW_generic_tanh_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Lenet_HW_fptrunc_64ns_32_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_fpext_32ns_64_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Lenet_HW_dmul_64ns_64ns_64_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Lenet_HW_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_Layer2_Neurons_CPU_RAM_1WNR_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_Layer3_Neurons_CPU_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    Layer2_Neurons_CPU_U : component Lenet_HW_Layer2_Neurons_CPU_RAM_1WNR_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Layer2_Neurons_CPU_address0,
        ce0 => Layer2_Neurons_CPU_ce0,
        we0 => Layer2_Neurons_CPU_we0,
        d0 => grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_d0,
        q0 => Layer2_Neurons_CPU_q0,
        address1 => grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address1,
        ce1 => Layer2_Neurons_CPU_ce1,
        q1 => Layer2_Neurons_CPU_q1);

    Layer3_Neurons_CPU_U : component Lenet_HW_Layer3_Neurons_CPU_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 1250,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Layer3_Neurons_CPU_address0,
        ce0 => Layer3_Neurons_CPU_ce0,
        we0 => Layer3_Neurons_CPU_we0,
        d0 => grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_d0,
        q0 => Layer3_Neurons_CPU_q0);

    grp_calculateLayer2_fu_107 : component Lenet_HW_calculateLayer2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_calculateLayer2_fu_107_ap_start,
        ap_done => grp_calculateLayer2_fu_107_ap_done,
        ap_idle => grp_calculateLayer2_fu_107_ap_idle,
        ap_ready => grp_calculateLayer2_fu_107_ap_ready,
        Layer1_Neurons_stream_TVALID => Layer1_Neurons_stream_TVALID_int_regslice,
        Layer1_Weights_stream_TVALID => Layer1_Weights_stream_TVALID_int_regslice,
        Layer1_Neurons_stream_TDATA => Layer1_Neurons_stream_TDATA_int_regslice,
        Layer1_Neurons_stream_TREADY => grp_calculateLayer2_fu_107_Layer1_Neurons_stream_TREADY,
        Layer1_Weights_stream_TDATA => Layer1_Weights_stream_TDATA_int_regslice,
        Layer1_Weights_stream_TREADY => grp_calculateLayer2_fu_107_Layer1_Weights_stream_TREADY,
        Layer2_Neurons_CPU_address0 => grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_address0,
        Layer2_Neurons_CPU_ce0 => grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_ce0,
        Layer2_Neurons_CPU_we0 => grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_we0,
        Layer2_Neurons_CPU_d0 => grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_d0,
        grp_fu_285_p_din0 => grp_calculateLayer2_fu_107_grp_fu_285_p_din0,
        grp_fu_285_p_din1 => grp_calculateLayer2_fu_107_grp_fu_285_p_din1,
        grp_fu_285_p_opcode => grp_calculateLayer2_fu_107_grp_fu_285_p_opcode,
        grp_fu_285_p_dout0 => grp_fu_285_p2,
        grp_fu_285_p_ce => grp_calculateLayer2_fu_107_grp_fu_285_p_ce,
        grp_fu_289_p_din0 => grp_calculateLayer2_fu_107_grp_fu_289_p_din0,
        grp_fu_289_p_din1 => grp_calculateLayer2_fu_107_grp_fu_289_p_din1,
        grp_fu_289_p_dout0 => grp_fu_289_p2,
        grp_fu_289_p_ce => grp_calculateLayer2_fu_107_grp_fu_289_p_ce,
        grp_fu_163_p_din0 => grp_calculateLayer2_fu_107_grp_fu_163_p_din0,
        grp_fu_163_p_din1 => grp_calculateLayer2_fu_107_grp_fu_163_p_din1,
        grp_fu_163_p_dout0 => grp_fu_163_p2,
        grp_fu_163_p_ce => grp_calculateLayer2_fu_107_grp_fu_163_p_ce,
        grp_generic_tanh_double_s_fu_146_p_din1 => grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_din1,
        grp_generic_tanh_double_s_fu_146_p_dout0 => grp_generic_tanh_double_s_fu_146_ap_return,
        grp_generic_tanh_double_s_fu_146_p_ce => grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_ce,
        grp_generic_tanh_double_s_fu_146_p_start => grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_start,
        grp_generic_tanh_double_s_fu_146_p_ready => grp_generic_tanh_double_s_fu_146_ap_ready,
        grp_generic_tanh_double_s_fu_146_p_done => grp_generic_tanh_double_s_fu_146_ap_done,
        grp_generic_tanh_double_s_fu_146_p_idle => grp_generic_tanh_double_s_fu_146_ap_idle);

    grp_calculateLayer3_fu_122 : component Lenet_HW_calculateLayer3
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_calculateLayer3_fu_122_ap_start,
        ap_done => grp_calculateLayer3_fu_122_ap_done,
        ap_idle => grp_calculateLayer3_fu_122_ap_idle,
        ap_ready => grp_calculateLayer3_fu_122_ap_ready,
        Layer2_Weights_stream_TVALID => Layer2_Weights_stream_TVALID_int_regslice,
        Layer2_Neurons_CPU_address0 => grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address0,
        Layer2_Neurons_CPU_ce0 => grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce0,
        Layer2_Neurons_CPU_q0 => Layer2_Neurons_CPU_q0,
        Layer2_Neurons_CPU_address1 => grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address1,
        Layer2_Neurons_CPU_ce1 => grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce1,
        Layer2_Neurons_CPU_q1 => Layer2_Neurons_CPU_q1,
        Layer2_Weights_stream_TDATA => Layer2_Weights_stream_TDATA_int_regslice,
        Layer2_Weights_stream_TREADY => grp_calculateLayer3_fu_122_Layer2_Weights_stream_TREADY,
        Layer3_Neurons_CPU_address0 => grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0 => grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_we0 => grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_we0,
        Layer3_Neurons_CPU_d0 => grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_d0,
        grp_fu_285_p_din0 => grp_calculateLayer3_fu_122_grp_fu_285_p_din0,
        grp_fu_285_p_din1 => grp_calculateLayer3_fu_122_grp_fu_285_p_din1,
        grp_fu_285_p_opcode => grp_calculateLayer3_fu_122_grp_fu_285_p_opcode,
        grp_fu_285_p_dout0 => grp_fu_285_p2,
        grp_fu_285_p_ce => grp_calculateLayer3_fu_122_grp_fu_285_p_ce,
        grp_fu_289_p_din0 => grp_calculateLayer3_fu_122_grp_fu_289_p_din0,
        grp_fu_289_p_din1 => grp_calculateLayer3_fu_122_grp_fu_289_p_din1,
        grp_fu_289_p_dout0 => grp_fu_289_p2,
        grp_fu_289_p_ce => grp_calculateLayer3_fu_122_grp_fu_289_p_ce,
        grp_fu_163_p_din0 => grp_calculateLayer3_fu_122_grp_fu_163_p_din0,
        grp_fu_163_p_din1 => grp_calculateLayer3_fu_122_grp_fu_163_p_din1,
        grp_fu_163_p_dout0 => grp_fu_163_p2,
        grp_fu_163_p_ce => grp_calculateLayer3_fu_122_grp_fu_163_p_ce,
        grp_generic_tanh_double_s_fu_146_p_din1 => grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_din1,
        grp_generic_tanh_double_s_fu_146_p_dout0 => grp_generic_tanh_double_s_fu_146_ap_return,
        grp_generic_tanh_double_s_fu_146_p_ce => grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_ce,
        grp_generic_tanh_double_s_fu_146_p_start => grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_start,
        grp_generic_tanh_double_s_fu_146_p_ready => grp_generic_tanh_double_s_fu_146_ap_ready,
        grp_generic_tanh_double_s_fu_146_p_done => grp_generic_tanh_double_s_fu_146_ap_done,
        grp_generic_tanh_double_s_fu_146_p_idle => grp_generic_tanh_double_s_fu_146_ap_idle);

    grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136 : component Lenet_HW_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start,
        ap_done => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_done,
        ap_idle => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_idle,
        ap_ready => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_ready,
        Layer3_Weights_stream_TVALID => Layer3_Weights_stream_TVALID_int_regslice,
        somme => somme_reg_265,
        phi_mul => phi_mul_load_reg_252,
        Layer3_Neurons_CPU_address0 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_q0 => Layer3_Neurons_CPU_q0,
        Layer3_Weights_stream_TDATA => Layer3_Weights_stream_TDATA_int_regslice,
        Layer3_Weights_stream_TREADY => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Weights_stream_TREADY,
        somme_52_out => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_somme_52_out,
        somme_52_out_ap_vld => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_somme_52_out_ap_vld,
        grp_fu_285_p_din0 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din0,
        grp_fu_285_p_din1 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din1,
        grp_fu_285_p_opcode => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_opcode,
        grp_fu_285_p_dout0 => grp_fu_285_p2,
        grp_fu_285_p_ce => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_ce,
        grp_fu_289_p_din0 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din0,
        grp_fu_289_p_din1 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din1,
        grp_fu_289_p_dout0 => grp_fu_289_p2,
        grp_fu_289_p_ce => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_ce);

    grp_generic_tanh_double_s_fu_146 : component Lenet_HW_generic_tanh_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_generic_tanh_double_s_fu_146_ap_start,
        ap_done => grp_generic_tanh_double_s_fu_146_ap_done,
        ap_idle => grp_generic_tanh_double_s_fu_146_ap_idle,
        ap_ready => grp_generic_tanh_double_s_fu_146_ap_ready,
        ap_ce => grp_generic_tanh_double_s_fu_146_ap_ce,
        t_in => grp_generic_tanh_double_s_fu_146_t_in,
        ap_return => grp_generic_tanh_double_s_fu_146_ap_return);

    fptrunc_64ns_32_1_no_dsp_1_U65 : component Lenet_HW_fptrunc_64ns_32_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        din0 => reg_169,
        dout => conv24_i_fu_157_p1);

    fpext_32ns_64_1_no_dsp_1_U66 : component Lenet_HW_fpext_32ns_64_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_somme_52_out,
        dout => conv_i_fu_160_p1);

    dmul_64ns_64ns_64_2_max_dsp_1_U67 : component Lenet_HW_dmul_64ns_64ns_64_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_163_p0,
        din1 => grp_fu_163_p1,
        ce => grp_fu_163_ce,
        dout => grp_fu_163_p2);

    fadd_32ns_32ns_32_2_full_dsp_1_U68 : component Lenet_HW_fadd_32ns_32ns_32_2_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_285_p0,
        din1 => grp_fu_285_p1,
        ce => grp_fu_285_ce,
        dout => grp_fu_285_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U69 : component Lenet_HW_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_289_p0,
        din1 => grp_fu_289_p1,
        ce => grp_fu_289_ce,
        dout => grp_fu_289_p2);

    regslice_both_Layer1_Neurons_stream_U : component Lenet_HW_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Layer1_Neurons_stream_TDATA,
        vld_in => Layer1_Neurons_stream_TVALID,
        ack_in => regslice_both_Layer1_Neurons_stream_U_ack_in,
        data_out => Layer1_Neurons_stream_TDATA_int_regslice,
        vld_out => Layer1_Neurons_stream_TVALID_int_regslice,
        ack_out => Layer1_Neurons_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_Layer1_Neurons_stream_U_apdone_blk);

    regslice_both_Layer1_Weights_stream_U : component Lenet_HW_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Layer1_Weights_stream_TDATA,
        vld_in => Layer1_Weights_stream_TVALID,
        ack_in => regslice_both_Layer1_Weights_stream_U_ack_in,
        data_out => Layer1_Weights_stream_TDATA_int_regslice,
        vld_out => Layer1_Weights_stream_TVALID_int_regslice,
        ack_out => Layer1_Weights_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_Layer1_Weights_stream_U_apdone_blk);

    regslice_both_Layer2_Weights_stream_U : component Lenet_HW_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Layer2_Weights_stream_TDATA,
        vld_in => Layer2_Weights_stream_TVALID,
        ack_in => regslice_both_Layer2_Weights_stream_U_ack_in,
        data_out => Layer2_Weights_stream_TDATA_int_regslice,
        vld_out => Layer2_Weights_stream_TVALID_int_regslice,
        ack_out => Layer2_Weights_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_Layer2_Weights_stream_U_apdone_blk);

    regslice_both_Layer3_Weights_stream_U : component Lenet_HW_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Layer3_Weights_stream_TDATA,
        vld_in => Layer3_Weights_stream_TVALID,
        ack_in => regslice_both_Layer3_Weights_stream_U_ack_in,
        data_out => Layer3_Weights_stream_TDATA_int_regslice,
        vld_out => Layer3_Weights_stream_TVALID_int_regslice,
        ack_out => Layer3_Weights_stream_TREADY_int_regslice,
        apdone_blk => regslice_both_Layer3_Weights_stream_U_apdone_blk);

    regslice_both_Layer4_Neurons_stream_U : component Lenet_HW_regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => Layer4_Neurons_stream_TDATA_int_regslice,
        vld_in => Layer4_Neurons_stream_TVALID_int_regslice,
        ack_in => Layer4_Neurons_stream_TREADY_int_regslice,
        data_out => Layer4_Neurons_stream_TDATA,
        vld_out => regslice_both_Layer4_Neurons_stream_U_vld_out,
        ack_out => Layer4_Neurons_stream_TREADY,
        apdone_blk => regslice_both_Layer4_Neurons_stream_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_ready = ap_const_logic_1)) then 
                    grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_calculateLayer2_fu_107_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_calculateLayer2_fu_107_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_calculateLayer2_fu_107_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateLayer2_fu_107_ap_ready = ap_const_logic_1)) then 
                    grp_calculateLayer2_fu_107_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_calculateLayer3_fu_122_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_calculateLayer3_fu_122_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_calculateLayer3_fu_122_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateLayer3_fu_122_ap_ready = ap_const_logic_1)) then 
                    grp_calculateLayer3_fu_122_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_tanh_double_s_fu_146_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_generic_tanh_double_s_fu_146_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state12) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    grp_generic_tanh_double_s_fu_146_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_tanh_double_s_fu_146_ap_ready = ap_const_logic_1)) then 
                    grp_generic_tanh_double_s_fu_146_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_fu_78 <= ap_const_lv7_0;
            elsif (((icmp_ln109_fu_197_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_fu_78 <= add_ln109_fu_203_p2;
            end if; 
        end if;
    end process;

    phi_mul_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_fu_74 <= ap_const_lv11_0;
            elsif (((icmp_ln109_fu_197_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                phi_mul_fu_74 <= next_mul_fu_191_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Layer3_Weights_stream_read_reg_260 <= Layer3_Weights_stream_TDATA_int_regslice;
                phi_mul_load_reg_252 <= phi_mul_fu_74;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                conv_i_reg_270 <= conv_i_fu_160_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state11))) then
                reg_169 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                somme_reg_265 <= somme_fu_219_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                tmp_reg_275 <= grp_generic_tanh_double_s_fu_146_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state6, icmp_ln109_fu_197_p2, ap_CS_fsm_state38, ap_CS_fsm_state39, grp_calculateLayer2_fu_107_ap_done, grp_calculateLayer3_fu_122_ap_done, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8, ap_block_state6, Layer4_Neurons_stream_TREADY_int_regslice)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (grp_calculateLayer2_fu_107_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((grp_calculateLayer3_fu_122_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln109_fu_197_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln109_fu_197_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = Layer4_Neurons_stream_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state39) and (ap_const_logic_1 = Layer4_Neurons_stream_TREADY_int_regslice))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state39;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Layer1_Neurons_stream_TREADY <= regslice_both_Layer1_Neurons_stream_U_ack_in;

    Layer1_Neurons_stream_TREADY_int_regslice_assign_proc : process(grp_calculateLayer2_fu_107_Layer1_Neurons_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Layer1_Neurons_stream_TREADY_int_regslice <= grp_calculateLayer2_fu_107_Layer1_Neurons_stream_TREADY;
        else 
            Layer1_Neurons_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    Layer1_Weights_stream_TREADY <= regslice_both_Layer1_Weights_stream_U_ack_in;

    Layer1_Weights_stream_TREADY_int_regslice_assign_proc : process(grp_calculateLayer2_fu_107_Layer1_Weights_stream_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Layer1_Weights_stream_TREADY_int_regslice <= grp_calculateLayer2_fu_107_Layer1_Weights_stream_TREADY;
        else 
            Layer1_Weights_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    Layer2_Neurons_CPU_address0_assign_proc : process(grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_address0, grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer2_Neurons_CPU_address0 <= grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Layer2_Neurons_CPU_address0 <= grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_address0;
        else 
            Layer2_Neurons_CPU_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    Layer2_Neurons_CPU_ce0_assign_proc : process(grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_ce0, grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce0, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer2_Neurons_CPU_ce0 <= grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Layer2_Neurons_CPU_ce0 <= grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_ce0;
        else 
            Layer2_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer2_Neurons_CPU_ce1_assign_proc : process(grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce1, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer2_Neurons_CPU_ce1 <= grp_calculateLayer3_fu_122_Layer2_Neurons_CPU_ce1;
        else 
            Layer2_Neurons_CPU_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    Layer2_Neurons_CPU_we0_assign_proc : process(grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_we0, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Layer2_Neurons_CPU_we0 <= grp_calculateLayer2_fu_107_Layer2_Neurons_CPU_we0;
        else 
            Layer2_Neurons_CPU_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer2_Weights_stream_TREADY <= regslice_both_Layer2_Weights_stream_U_ack_in;

    Layer2_Weights_stream_TREADY_int_regslice_assign_proc : process(grp_calculateLayer3_fu_122_Layer2_Weights_stream_TREADY, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer2_Weights_stream_TREADY_int_regslice <= grp_calculateLayer3_fu_122_Layer2_Weights_stream_TREADY;
        else 
            Layer2_Weights_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Neurons_CPU_address0_assign_proc : process(grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_address0, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_address0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Layer3_Neurons_CPU_address0 <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer3_Neurons_CPU_address0 <= grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_address0;
        else 
            Layer3_Neurons_CPU_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Layer3_Neurons_CPU_ce0_assign_proc : process(grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_ce0, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_ce0, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Layer3_Neurons_CPU_ce0 <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Neurons_CPU_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer3_Neurons_CPU_ce0 <= grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_ce0;
        else 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Neurons_CPU_we0_assign_proc : process(grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer3_Neurons_CPU_we0 <= grp_calculateLayer3_fu_122_Layer3_Neurons_CPU_we0;
        else 
            Layer3_Neurons_CPU_we0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Weights_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state6, icmp_ln109_fu_197_p2, Layer3_Weights_stream_TVALID_int_regslice)
    begin
        if (((icmp_ln109_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Layer3_Weights_stream_TDATA_blk_n <= Layer3_Weights_stream_TVALID_int_regslice;
        else 
            Layer3_Weights_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Layer3_Weights_stream_TREADY <= regslice_both_Layer3_Weights_stream_U_ack_in;

    Layer3_Weights_stream_TREADY_int_regslice_assign_proc : process(ap_CS_fsm_state6, icmp_ln109_fu_197_p2, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Weights_stream_TREADY, ap_CS_fsm_state8, ap_block_state6)
    begin
        if (((icmp_ln109_fu_197_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            Layer3_Weights_stream_TREADY_int_regslice <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Layer3_Weights_stream_TREADY_int_regslice <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_Layer3_Weights_stream_TREADY;
        else 
            Layer3_Weights_stream_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    Layer4_Neurons_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state39, Layer4_Neurons_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            Layer4_Neurons_stream_TDATA_blk_n <= Layer4_Neurons_stream_TREADY_int_regslice;
        else 
            Layer4_Neurons_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    Layer4_Neurons_stream_TDATA_int_regslice <= conv24_i_fu_157_p1;
    Layer4_Neurons_stream_TVALID <= regslice_both_Layer4_Neurons_stream_U_vld_out;

    Layer4_Neurons_stream_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_state38, Layer4_Neurons_stream_TREADY_int_regslice)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) and (ap_const_logic_1 = Layer4_Neurons_stream_TREADY_int_regslice))) then 
            Layer4_Neurons_stream_TVALID_int_regslice <= ap_const_logic_1;
        else 
            Layer4_Neurons_stream_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    add_ln109_fu_203_p2 <= std_logic_vector(unsigned(i_fu_78) + unsigned(ap_const_lv7_1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state12 <= ap_NS_fsm(11);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;
    ap_ST_fsm_state27_blk <= ap_const_logic_0;
    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;
    ap_ST_fsm_state32_blk <= ap_const_logic_0;
    ap_ST_fsm_state33_blk <= ap_const_logic_0;
    ap_ST_fsm_state34_blk <= ap_const_logic_0;
    ap_ST_fsm_state35_blk <= ap_const_logic_0;
    ap_ST_fsm_state36_blk <= ap_const_logic_0;
    ap_ST_fsm_state37_blk <= ap_const_logic_0;

    ap_ST_fsm_state38_blk_assign_proc : process(Layer4_Neurons_stream_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Layer4_Neurons_stream_TREADY_int_regslice)) then 
            ap_ST_fsm_state38_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state38_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state39_blk_assign_proc : process(Layer4_Neurons_stream_TREADY_int_regslice)
    begin
        if ((ap_const_logic_0 = Layer4_Neurons_stream_TREADY_int_regslice)) then 
            ap_ST_fsm_state39_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state39_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(grp_calculateLayer2_fu_107_ap_done)
    begin
        if ((grp_calculateLayer2_fu_107_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_ST_fsm_state5_blk_assign_proc : process(grp_calculateLayer3_fu_122_ap_done)
    begin
        if ((grp_calculateLayer3_fu_122_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state5_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state5_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state6_blk_assign_proc : process(ap_block_state6)
    begin
        if ((ap_const_boolean_1 = ap_block_state6)) then 
            ap_ST_fsm_state6_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state6_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state7_blk <= ap_const_logic_0;

    ap_ST_fsm_state8_blk_assign_proc : process(grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_done)
    begin
        if ((grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state8_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state8_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state6_assign_proc : process(icmp_ln109_fu_197_p2, regslice_both_Layer4_Neurons_stream_U_apdone_blk, Layer3_Weights_stream_TVALID_int_regslice)
    begin
                ap_block_state6 <= ((regslice_both_Layer4_Neurons_stream_U_apdone_blk = ap_const_logic_1) or ((icmp_ln109_fu_197_p2 = ap_const_lv1_0) and (ap_const_logic_0 = Layer3_Weights_stream_TVALID_int_regslice)));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6, icmp_ln109_fu_197_p2, ap_block_state6)
    begin
        if (((icmp_ln109_fu_197_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6, icmp_ln109_fu_197_p2, ap_block_state6)
    begin
        if (((icmp_ln109_fu_197_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state6) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_ap_start_reg;
    grp_calculateLayer2_fu_107_ap_start <= grp_calculateLayer2_fu_107_ap_start_reg;
    grp_calculateLayer3_fu_122_ap_start <= grp_calculateLayer3_fu_122_ap_start_reg;

    grp_fu_163_ce_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_163_p_ce, grp_calculateLayer3_fu_122_grp_fu_163_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_163_ce <= grp_calculateLayer3_fu_122_grp_fu_163_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_163_ce <= grp_calculateLayer2_fu_107_grp_fu_163_p_ce;
        else 
            grp_fu_163_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_163_p0_assign_proc : process(conv_i_reg_270, tmp_reg_275, grp_calculateLayer2_fu_107_grp_fu_163_p_din0, grp_calculateLayer3_fu_122_grp_fu_163_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_163_p0 <= grp_calculateLayer3_fu_122_grp_fu_163_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_163_p0 <= grp_calculateLayer2_fu_107_grp_fu_163_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_163_p0 <= tmp_reg_275;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_163_p0 <= conv_i_reg_270;
        else 
            grp_fu_163_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_163_p1_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_163_p_din1, grp_calculateLayer3_fu_122_grp_fu_163_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_163_p1 <= grp_calculateLayer3_fu_122_grp_fu_163_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_163_p1 <= grp_calculateLayer2_fu_107_grp_fu_163_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            grp_fu_163_p1 <= ap_const_lv64_3FFB74538EF34D6A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_163_p1 <= ap_const_lv64_3FE55555571F7693;
        else 
            grp_fu_163_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_ce_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_285_p_ce, grp_calculateLayer3_fu_122_grp_fu_285_p_ce, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_285_ce <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_285_ce <= grp_calculateLayer3_fu_122_grp_fu_285_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_285_ce <= grp_calculateLayer2_fu_107_grp_fu_285_p_ce;
        else 
            grp_fu_285_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_285_p0_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_285_p_din0, grp_calculateLayer3_fu_122_grp_fu_285_p_din0, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_285_p0 <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_285_p0 <= grp_calculateLayer3_fu_122_grp_fu_285_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_285_p0 <= grp_calculateLayer2_fu_107_grp_fu_285_p_din0;
        else 
            grp_fu_285_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_285_p1_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_285_p_din1, grp_calculateLayer3_fu_122_grp_fu_285_p_din1, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_285_p1 <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_285_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_285_p1 <= grp_calculateLayer3_fu_122_grp_fu_285_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_285_p1 <= grp_calculateLayer2_fu_107_grp_fu_285_p_din1;
        else 
            grp_fu_285_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_289_ce_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_289_p_ce, grp_calculateLayer3_fu_122_grp_fu_289_p_ce, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_289_ce <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_289_ce <= grp_calculateLayer3_fu_122_grp_fu_289_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_289_ce <= grp_calculateLayer2_fu_107_grp_fu_289_p_ce;
        else 
            grp_fu_289_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_289_p0_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_289_p_din0, grp_calculateLayer3_fu_122_grp_fu_289_p_din0, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din0, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_289_p0 <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_289_p0 <= grp_calculateLayer3_fu_122_grp_fu_289_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_289_p0 <= grp_calculateLayer2_fu_107_grp_fu_289_p_din0;
        else 
            grp_fu_289_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_289_p1_assign_proc : process(grp_calculateLayer2_fu_107_grp_fu_289_p_din1, grp_calculateLayer3_fu_122_grp_fu_289_p_din1, grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_289_p1 <= grp_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4_fu_136_grp_fu_289_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_289_p1 <= grp_calculateLayer3_fu_122_grp_fu_289_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_fu_289_p1 <= grp_calculateLayer2_fu_107_grp_fu_289_p_din1;
        else 
            grp_fu_289_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_generic_tanh_double_s_fu_146_ap_ce_assign_proc : process(grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_ce, grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_ce, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_generic_tanh_double_s_fu_146_ap_ce <= grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_generic_tanh_double_s_fu_146_ap_ce <= grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_ce;
        else 
            grp_generic_tanh_double_s_fu_146_ap_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_generic_tanh_double_s_fu_146_ap_start_assign_proc : process(grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_start, grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_start, ap_CS_fsm_state3, ap_CS_fsm_state5, grp_generic_tanh_double_s_fu_146_ap_start_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_generic_tanh_double_s_fu_146_ap_start <= grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_start;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_generic_tanh_double_s_fu_146_ap_start <= grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_start;
        else 
            grp_generic_tanh_double_s_fu_146_ap_start <= grp_generic_tanh_double_s_fu_146_ap_start_reg;
        end if; 
    end process;


    grp_generic_tanh_double_s_fu_146_t_in_assign_proc : process(reg_169, grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_din1, grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_din1, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_generic_tanh_double_s_fu_146_t_in <= grp_calculateLayer3_fu_122_grp_generic_tanh_double_s_fu_146_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            grp_generic_tanh_double_s_fu_146_t_in <= grp_calculateLayer2_fu_107_grp_generic_tanh_double_s_fu_146_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_generic_tanh_double_s_fu_146_t_in <= reg_169;
        else 
            grp_generic_tanh_double_s_fu_146_t_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln109_fu_197_p2 <= "1" when (i_fu_78 = ap_const_lv7_64) else "0";
    next_mul_fu_191_p2 <= std_logic_vector(unsigned(phi_mul_fu_74) + unsigned(ap_const_lv11_19));
    somme_fu_219_p1 <= Layer3_Weights_stream_read_reg_260;
end behav;
