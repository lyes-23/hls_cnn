-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Lenet_HW_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Layer3_Weights_stream_TVALID : IN STD_LOGIC;
    somme : IN STD_LOGIC_VECTOR (31 downto 0);
    phi_mul : IN STD_LOGIC_VECTOR (10 downto 0);
    Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
    Layer3_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer3_Weights_stream_TREADY : OUT STD_LOGIC;
    somme_52_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    somme_52_out_ap_vld : OUT STD_LOGIC;
    grp_fu_285_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_285_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_285_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_285_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_285_p_ce : OUT STD_LOGIC;
    grp_fu_289_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_289_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_289_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_289_p_ce : OUT STD_LOGIC );
end;


architecture behav of Lenet_HW_Lenet_HW_Pipeline_VITIS_LOOP_112_2_VITIS_LOOP_114_3_VITIS_LOOP_115_4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_4E2 : STD_LOGIC_VECTOR (10 downto 0) := "10011100010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln112_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Layer3_Weights_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln112_reg_419 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_419_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal Layer3_Weights_stream_read_reg_428 : STD_LOGIC_VECTOR (31 downto 0);
    signal weight_fu_359_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast3_fu_295_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal somme_51_fu_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_somme_51_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal m_fu_72 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal m_1_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_m_load : STD_LOGIC_VECTOR (2 downto 0);
    signal k_fu_76 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln114_fu_249_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_k_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_fu_80 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln114_1_fu_326_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten_load : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_84 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln112_fu_235_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten14_fu_88 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln112_fu_179_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten14_load : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal icmp_ln114_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln115_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln105_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln112_1_fu_229_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln105_fu_203_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln105_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln114_fu_243_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl_fu_261_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln112_fu_257_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_269_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln114_fu_279_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp2_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp1_cast_fu_275_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_fu_289_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln115_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln115_fu_300_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln114_1_fu_320_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_130_ce : STD_LOGIC;
    signal grp_fu_134_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component Lenet_HW_fadd_32ns_32ns_32_2_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component Lenet_HW_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component Lenet_HW_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    indvar_flatten14_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    indvar_flatten14_fu_88 <= add_ln112_fu_179_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten14_fu_88 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    indvar_flatten_fu_80 <= select_ln114_1_fu_326_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_80 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    j_fu_84 <= select_ln112_fu_235_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_84 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    k_fu_76 <= select_ln114_fu_249_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_76 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    m_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1))) then 
                    m_fu_72 <= m_1_fu_312_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    m_fu_72 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    somme_51_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    somme_51_fu_68 <= somme;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    somme_51_fu_68 <= grp_fu_285_p_dout0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                Layer3_Weights_stream_read_reg_428 <= Layer3_Weights_stream_TDATA;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                icmp_ln112_reg_419 <= icmp_ln112_fu_173_p2;
                icmp_ln112_reg_419_pp0_iter1_reg <= icmp_ln112_reg_419;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Layer3_Neurons_CPU_address0 <= p_cast3_fu_295_p1(11 - 1 downto 0);

    Layer3_Neurons_CPU_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer3_Weights_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, Layer3_Weights_stream_TVALID, icmp_ln112_fu_173_p2, ap_block_pp0_stage0, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Layer3_Weights_stream_TDATA_blk_n <= Layer3_Weights_stream_TVALID;
        else 
            Layer3_Weights_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    Layer3_Weights_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln112_fu_173_p2, ap_block_pp0_stage0_11001, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Layer3_Weights_stream_TREADY <= ap_const_logic_1;
        else 
            Layer3_Weights_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    add_ln112_1_fu_229_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv6_1));
    add_ln112_fu_179_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten14_load) + unsigned(ap_const_lv11_1));
    add_ln114_1_fu_320_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten_load) + unsigned(ap_const_lv6_1));
    add_ln114_fu_243_p2 <= std_logic_vector(unsigned(select_ln105_fu_203_p3) + unsigned(ap_const_lv3_1));
    add_ln115_fu_300_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_m_load) + unsigned(ap_const_lv3_1));
    and_ln105_fu_223_p2 <= (xor_ln105_fu_211_p2 and icmp_ln115_fu_217_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_00001_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_00001 <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_01001_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_block_state1_pp0_stage0_iter0, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start_int = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(Layer3_Weights_stream_TVALID, icmp_ln112_fu_173_p2)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((icmp_ln112_fu_173_p2 = ap_const_lv1_0) and (ap_const_logic_0 = Layer3_Weights_stream_TVALID));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln112_fu_173_p2, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln112_fu_173_p2 = ap_const_lv1_1) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten14_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten14_fu_88)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten14_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten14_load <= indvar_flatten14_fu_88;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten_fu_80)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten_load <= indvar_flatten_fu_80;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_84)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_84;
        end if; 
    end process;


    ap_sig_allocacmp_k_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, k_fu_76)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_k_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_k_load <= k_fu_76;
        end if; 
    end process;


    ap_sig_allocacmp_m_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, m_fu_72)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_m_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_m_load <= m_fu_72;
        end if; 
    end process;


    ap_sig_allocacmp_somme_51_load_1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, somme_51_fu_68, grp_fu_285_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_sig_allocacmp_somme_51_load_1 <= grp_fu_285_p_dout0;
        else 
            ap_sig_allocacmp_somme_51_load_1 <= somme_51_fu_68;
        end if; 
    end process;

    empty_fu_289_p2 <= std_logic_vector(unsigned(tmp2_fu_283_p2) + unsigned(tmp1_cast_fu_275_p1));

    grp_fu_130_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_130_ce <= ap_const_logic_1;
        else 
            grp_fu_130_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_134_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_134_ce <= ap_const_logic_1;
        else 
            grp_fu_134_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_285_p_ce <= grp_fu_130_ce;
    grp_fu_285_p_din0 <= ap_sig_allocacmp_somme_51_load_1;
    grp_fu_285_p_din1 <= grp_fu_289_p_dout0;
    grp_fu_285_p_opcode <= ap_const_lv2_0;
    grp_fu_289_p_ce <= grp_fu_134_ce;
    grp_fu_289_p_din0 <= weight_fu_359_p1;
    grp_fu_289_p_din1 <= Layer3_Neurons_CPU_q0;
    icmp_ln112_fu_173_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten14_load = ap_const_lv11_4E2) else "0";
    icmp_ln114_fu_197_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten_load = ap_const_lv6_19) else "0";
    icmp_ln115_fu_217_p2 <= "1" when (ap_sig_allocacmp_m_load = ap_const_lv3_5) else "0";
    m_1_fu_312_p3 <= 
        ap_const_lv3_1 when (or_ln115_fu_306_p2(0) = '1') else 
        add_ln115_fu_300_p2;
    or_ln115_fu_306_p2 <= (icmp_ln114_fu_197_p2 or and_ln105_fu_223_p2);
    p_cast3_fu_295_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_fu_289_p2),64));
    p_shl_fu_261_p3 <= (select_ln112_fu_235_p3 & ap_const_lv2_0);
    select_ln105_fu_203_p3 <= 
        ap_const_lv3_0 when (icmp_ln114_fu_197_p2(0) = '1') else 
        ap_sig_allocacmp_k_load;
    select_ln112_fu_235_p3 <= 
        add_ln112_1_fu_229_p2 when (icmp_ln114_fu_197_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln114_1_fu_326_p3 <= 
        ap_const_lv6_1 when (icmp_ln114_fu_197_p2(0) = '1') else 
        add_ln114_1_fu_320_p2;
    select_ln114_fu_249_p3 <= 
        add_ln114_fu_243_p2 when (and_ln105_fu_223_p2(0) = '1') else 
        select_ln105_fu_203_p3;
    somme_52_out <= somme_51_fu_68;

    somme_52_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln112_reg_419_pp0_iter1_reg)
    begin
        if (((icmp_ln112_reg_419_pp0_iter1_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            somme_52_out_ap_vld <= ap_const_logic_1;
        else 
            somme_52_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_269_p2),11));
    tmp1_fu_269_p2 <= std_logic_vector(unsigned(p_shl_fu_261_p3) + unsigned(zext_ln112_fu_257_p1));
    tmp2_fu_283_p2 <= std_logic_vector(unsigned(phi_mul) + unsigned(zext_ln114_fu_279_p1));
    weight_fu_359_p1 <= Layer3_Weights_stream_read_reg_428;
    xor_ln105_fu_211_p2 <= (icmp_ln114_fu_197_p2 xor ap_const_lv1_1);
    zext_ln112_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln112_fu_235_p3),8));
    zext_ln114_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln114_fu_249_p3),11));
end behav;
