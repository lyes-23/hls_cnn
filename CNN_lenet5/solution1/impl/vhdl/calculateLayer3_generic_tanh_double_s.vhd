-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateLayer3_generic_tanh_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of calculateLayer3_generic_tanh_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4036000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110110000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_3C8 : STD_LOGIC_VECTOR (10 downto 0) := "01111001000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3E4 : STD_LOGIC_VECTOR (10 downto 0) := "01111100100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_3E5 : STD_LOGIC_VECTOR (10 downto 0) := "01111100101";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal expx_reg_60_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal expx_reg_60_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_129_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_139 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_pred166_state28 : BOOLEAN;
    signal ap_predicate_pred174_state28 : BOOLEAN;
    signal din_sign_reg_364 : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_364_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal abst_in_fu_183_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_369 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_378_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_382_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_386_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_134_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_390_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_394_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln55_fu_234_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln38_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_404_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal x_3_fu_245_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_3_reg_409 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_3_reg_409_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_417 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln9_1_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_422_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_426_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_125_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_exp_generic_double_s_fu_89_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_435 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add2_reg_445 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln66_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_120_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln38_fu_336_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_exp_generic_double_s_fu_89_ap_start : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_done : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_idle : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_ready : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_ce : STD_LOGIC;
    signal ap_predicate_op80_call_state5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp80 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter10_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter11_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter12_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter13_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter14_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred657_state14 : BOOLEAN;
    signal ap_phi_reg_pp0_iter0_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter10_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter11_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter12_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter13_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter14_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter15_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter16_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter17_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter18_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter19_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter20_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter21_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter22_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter23_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter24_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter25_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter26_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter27_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter28_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter29_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter30_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter31_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred782_state31 : BOOLEAN;
    signal grp_exp_generic_double_s_fu_89_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op80_call_state5_state4 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_129_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred891_state18 : BOOLEAN;
    signal ap_predicate_pred896_state18 : BOOLEAN;
    signal data_fu_145_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln479_fu_171_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal t_fu_175_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal din_exp_fu_157_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_sig_fu_167_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln46_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_210_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_228_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_fu_252_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_1_fu_263_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln9_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sign_fu_255_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln66_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln66_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_fu_343_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln83_fu_347_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_1_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal grp_fu_100_ce : STD_LOGIC;
    signal grp_fu_104_ce : STD_LOGIC;
    signal grp_fu_109_ce : STD_LOGIC;
    signal grp_fu_114_ce : STD_LOGIC;
    signal grp_fu_120_ce : STD_LOGIC;
    signal grp_fu_125_ce : STD_LOGIC;
    signal grp_fu_129_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to30 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_646 : BOOLEAN;
    signal ap_condition_795 : BOOLEAN;
    signal ap_condition_596 : BOOLEAN;
    signal ap_condition_145 : BOOLEAN;
    signal ap_condition_764 : BOOLEAN;
    signal ap_condition_769 : BOOLEAN;
    signal ap_condition_614 : BOOLEAN;
    signal ap_condition_862 : BOOLEAN;
    signal ap_condition_856 : BOOLEAN;
    signal ap_condition_1016 : BOOLEAN;
    signal ap_condition_854 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component calculateLayer3_exp_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dadddsub_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dadd_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dsub_64ns_64ns_64_3_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dmul_64ns_64ns_64_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_ddiv_64ns_64ns_64_11_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dcmp_64ns_64ns_1_1_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_exp_generic_double_s_fu_89 : component calculateLayer3_exp_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_generic_double_s_fu_89_ap_start,
        ap_done => grp_exp_generic_double_s_fu_89_ap_done,
        ap_idle => grp_exp_generic_double_s_fu_89_ap_idle,
        ap_ready => grp_exp_generic_double_s_fu_89_ap_ready,
        ap_ce => grp_exp_generic_double_s_fu_89_ap_ce,
        x => x_3_reg_409_pp0_iter3_reg,
        ap_return => grp_exp_generic_double_s_fu_89_ap_return);

    dadddsub_64ns_64ns_64_3_full_dsp_1_U15 : component calculateLayer3_dadddsub_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_100_p0,
        din1 => grp_fu_100_p1,
        opcode => grp_fu_100_opcode,
        ce => grp_fu_100_ce,
        dout => grp_fu_100_p2);

    dadd_64ns_64ns_64_3_full_dsp_1_U16 : component calculateLayer3_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abst_in_fu_183_p1,
        din1 => abst_in_fu_183_p1,
        ce => grp_fu_104_ce,
        dout => grp_fu_104_p2);

    dadd_64ns_64ns_64_3_full_dsp_1_U17 : component calculateLayer3_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_4_reg_435,
        din1 => ap_const_lv64_BFF0000000000000,
        ce => grp_fu_109_ce,
        dout => grp_fu_109_p2);

    dadd_64ns_64ns_64_3_full_dsp_1_U18 : component calculateLayer3_dadd_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_reg_pp0_iter14_expx_reg_60,
        din1 => ap_const_lv64_4000000000000000,
        ce => grp_fu_114_ce,
        dout => grp_fu_114_p2);

    dsub_64ns_64ns_64_3_full_dsp_1_U19 : component calculateLayer3_dsub_64ns_64ns_64_3_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv64_3FF0000000000000,
        din1 => reg_139,
        ce => grp_fu_120_ce,
        dout => grp_fu_120_p2);

    dmul_64ns_64ns_64_3_max_dsp_1_U20 : component calculateLayer3_dmul_64ns_64ns_64_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => abst_in_reg_369_pp0_iter2_reg,
        din1 => add_reg_417,
        ce => grp_fu_125_ce,
        dout => grp_fu_125_p2);

    ddiv_64ns_64ns_64_11_no_dsp_1_U21 : component calculateLayer3_ddiv_64ns_64ns_64_11_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_129_p0,
        din1 => add2_reg_445,
        ce => grp_fu_129_ce,
        dout => grp_fu_129_p2);

    dcmp_64ns_64ns_1_1_no_dsp_1_U22 : component calculateLayer3_dcmp_64ns_64ns_1_1_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        din0 => abst_in_fu_183_p1,
        din1 => ap_const_lv64_4036000000000000,
        opcode => ap_const_lv5_4,
        dout => tmp_2_fu_134_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_generic_double_s_fu_89_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_predicate_op80_call_state5_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                    grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_generic_double_s_fu_89_ap_ready = ap_const_logic_1)) then 
                    grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter14_expx_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_646)) then
                if ((ap_predicate_pred657_state14 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter14_expx_reg_60 <= grp_fu_109_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter14_expx_reg_60 <= ap_phi_reg_pp0_iter13_expx_reg_60;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_596)) then
                if ((ap_const_boolean_1 = ap_condition_795)) then 
                    ap_phi_reg_pp0_iter1_resultf_3_reg_72 <= ap_const_lv64_3FF0000000000000;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_resultf_3_reg_72 <= ap_phi_reg_pp0_iter0_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter28_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_145)) then
                if ((ap_predicate_pred174_state28 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter28_resultf_3_reg_72 <= grp_fu_129_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter28_resultf_3_reg_72 <= ap_phi_reg_pp0_iter27_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter31_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_764)) then
                if ((icmp_ln36_reg_378_pp0_iter29_reg = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter31_resultf_3_reg_72 <= select_ln38_fu_336_p3;
                elsif ((ap_predicate_pred782_state31 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter31_resultf_3_reg_72 <= grp_fu_120_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter31_resultf_3_reg_72 <= ap_phi_reg_pp0_iter30_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_expx_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((tmp_2_reg_390_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln45_reg_382_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln10_1_fu_315_p2) and (ap_const_lv1_0 = and_ln9_1_fu_291_p2) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((tmp_2_reg_390_pp0_iter2_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln45_reg_382_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_ce) and (ap_const_lv1_1 = and_ln9_1_fu_291_p2) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter2_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
                ap_phi_reg_pp0_iter4_expx_reg_60 <= x_3_reg_409;
            elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ap_phi_reg_pp0_iter4_expx_reg_60 <= ap_phi_reg_pp0_iter3_expx_reg_60;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter6_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_614)) then
                if ((ap_const_boolean_1 = ap_condition_769)) then 
                    ap_phi_reg_pp0_iter6_resultf_3_reg_72 <= grp_fu_125_p2;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter6_resultf_3_reg_72 <= ap_phi_reg_pp0_iter5_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    abst_in_reg_369(62 downto 0) <= abst_in_fu_183_p1(62 downto 0);
                    abst_in_reg_369_pp0_iter1_reg(62 downto 0) <= abst_in_reg_369(62 downto 0);
                and_ln46_reg_386 <= and_ln46_fu_216_p2;
                and_ln46_reg_386_pp0_iter1_reg <= and_ln46_reg_386;
                din_sign_reg_364 <= data_fu_145_p1(63 downto 63);
                din_sign_reg_364_pp0_iter1_reg <= din_sign_reg_364;
                icmp_ln36_reg_378 <= icmp_ln36_fu_192_p2;
                icmp_ln36_reg_378_pp0_iter1_reg <= icmp_ln36_reg_378;
                icmp_ln38_reg_404 <= icmp_ln38_fu_239_p2;
                icmp_ln38_reg_404_pp0_iter1_reg <= icmp_ln38_reg_404;
                icmp_ln45_reg_382 <= icmp_ln45_fu_198_p2;
                icmp_ln45_reg_382_pp0_iter1_reg <= icmp_ln45_reg_382;
                icmp_ln54_reg_394 <= icmp_ln54_fu_222_p2;
                icmp_ln54_reg_394_pp0_iter1_reg <= icmp_ln54_reg_394;
                tmp_2_reg_390 <= tmp_2_fu_134_p2;
                tmp_2_reg_390_pp0_iter1_reg <= tmp_2_reg_390;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    abst_in_reg_369_pp0_iter2_reg(62 downto 0) <= abst_in_reg_369_pp0_iter1_reg(62 downto 0);
                add2_reg_445 <= grp_fu_114_p2;
                and_ln10_1_reg_426 <= and_ln10_1_fu_315_p2;
                and_ln10_1_reg_426_pp0_iter10_reg <= and_ln10_1_reg_426_pp0_iter9_reg;
                and_ln10_1_reg_426_pp0_iter11_reg <= and_ln10_1_reg_426_pp0_iter10_reg;
                and_ln10_1_reg_426_pp0_iter4_reg <= and_ln10_1_reg_426;
                and_ln10_1_reg_426_pp0_iter5_reg <= and_ln10_1_reg_426_pp0_iter4_reg;
                and_ln10_1_reg_426_pp0_iter6_reg <= and_ln10_1_reg_426_pp0_iter5_reg;
                and_ln10_1_reg_426_pp0_iter7_reg <= and_ln10_1_reg_426_pp0_iter6_reg;
                and_ln10_1_reg_426_pp0_iter8_reg <= and_ln10_1_reg_426_pp0_iter7_reg;
                and_ln10_1_reg_426_pp0_iter9_reg <= and_ln10_1_reg_426_pp0_iter8_reg;
                and_ln46_reg_386_pp0_iter10_reg <= and_ln46_reg_386_pp0_iter9_reg;
                and_ln46_reg_386_pp0_iter11_reg <= and_ln46_reg_386_pp0_iter10_reg;
                and_ln46_reg_386_pp0_iter12_reg <= and_ln46_reg_386_pp0_iter11_reg;
                and_ln46_reg_386_pp0_iter13_reg <= and_ln46_reg_386_pp0_iter12_reg;
                and_ln46_reg_386_pp0_iter14_reg <= and_ln46_reg_386_pp0_iter13_reg;
                and_ln46_reg_386_pp0_iter15_reg <= and_ln46_reg_386_pp0_iter14_reg;
                and_ln46_reg_386_pp0_iter16_reg <= and_ln46_reg_386_pp0_iter15_reg;
                and_ln46_reg_386_pp0_iter17_reg <= and_ln46_reg_386_pp0_iter16_reg;
                and_ln46_reg_386_pp0_iter18_reg <= and_ln46_reg_386_pp0_iter17_reg;
                and_ln46_reg_386_pp0_iter19_reg <= and_ln46_reg_386_pp0_iter18_reg;
                and_ln46_reg_386_pp0_iter20_reg <= and_ln46_reg_386_pp0_iter19_reg;
                and_ln46_reg_386_pp0_iter21_reg <= and_ln46_reg_386_pp0_iter20_reg;
                and_ln46_reg_386_pp0_iter22_reg <= and_ln46_reg_386_pp0_iter21_reg;
                and_ln46_reg_386_pp0_iter23_reg <= and_ln46_reg_386_pp0_iter22_reg;
                and_ln46_reg_386_pp0_iter24_reg <= and_ln46_reg_386_pp0_iter23_reg;
                and_ln46_reg_386_pp0_iter25_reg <= and_ln46_reg_386_pp0_iter24_reg;
                and_ln46_reg_386_pp0_iter26_reg <= and_ln46_reg_386_pp0_iter25_reg;
                and_ln46_reg_386_pp0_iter27_reg <= and_ln46_reg_386_pp0_iter26_reg;
                and_ln46_reg_386_pp0_iter28_reg <= and_ln46_reg_386_pp0_iter27_reg;
                and_ln46_reg_386_pp0_iter2_reg <= and_ln46_reg_386_pp0_iter1_reg;
                and_ln46_reg_386_pp0_iter3_reg <= and_ln46_reg_386_pp0_iter2_reg;
                and_ln46_reg_386_pp0_iter4_reg <= and_ln46_reg_386_pp0_iter3_reg;
                and_ln46_reg_386_pp0_iter5_reg <= and_ln46_reg_386_pp0_iter4_reg;
                and_ln46_reg_386_pp0_iter6_reg <= and_ln46_reg_386_pp0_iter5_reg;
                and_ln46_reg_386_pp0_iter7_reg <= and_ln46_reg_386_pp0_iter6_reg;
                and_ln46_reg_386_pp0_iter8_reg <= and_ln46_reg_386_pp0_iter7_reg;
                and_ln46_reg_386_pp0_iter9_reg <= and_ln46_reg_386_pp0_iter8_reg;
                and_ln9_1_reg_422 <= and_ln9_1_fu_291_p2;
                and_ln9_1_reg_422_pp0_iter10_reg <= and_ln9_1_reg_422_pp0_iter9_reg;
                and_ln9_1_reg_422_pp0_iter11_reg <= and_ln9_1_reg_422_pp0_iter10_reg;
                and_ln9_1_reg_422_pp0_iter4_reg <= and_ln9_1_reg_422;
                and_ln9_1_reg_422_pp0_iter5_reg <= and_ln9_1_reg_422_pp0_iter4_reg;
                and_ln9_1_reg_422_pp0_iter6_reg <= and_ln9_1_reg_422_pp0_iter5_reg;
                and_ln9_1_reg_422_pp0_iter7_reg <= and_ln9_1_reg_422_pp0_iter6_reg;
                and_ln9_1_reg_422_pp0_iter8_reg <= and_ln9_1_reg_422_pp0_iter7_reg;
                and_ln9_1_reg_422_pp0_iter9_reg <= and_ln9_1_reg_422_pp0_iter8_reg;
                    ap_predicate_pred166_state28 <= ((icmp_ln54_reg_394_pp0_iter25_reg = ap_const_lv1_0) and (tmp_2_reg_390_pp0_iter25_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter25_reg) and (icmp_ln36_reg_378_pp0_iter25_reg = ap_const_lv1_0));
                    ap_predicate_pred174_state28 <= ((icmp_ln54_reg_394_pp0_iter25_reg = ap_const_lv1_1) and (tmp_2_reg_390_pp0_iter25_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter25_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter25_reg) and (icmp_ln36_reg_378_pp0_iter25_reg = ap_const_lv1_0));
                    ap_predicate_pred657_state14 <= ((tmp_2_reg_390_pp0_iter11_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter11_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_reg_426_pp0_iter11_reg) and (ap_const_lv1_0 = and_ln9_1_reg_422_pp0_iter11_reg) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter11_reg));
                    ap_predicate_pred782_state31 <= ((icmp_ln54_reg_394_pp0_iter28_reg = ap_const_lv1_0) and (tmp_2_reg_390_pp0_iter28_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter28_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter28_reg));
                    ap_predicate_pred891_state18 <= ((icmp_ln54_reg_394_pp0_iter15_reg = ap_const_lv1_0) and (tmp_2_reg_390_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter15_reg));
                    ap_predicate_pred896_state18 <= ((icmp_ln54_reg_394_pp0_iter15_reg = ap_const_lv1_1) and (tmp_2_reg_390_pp0_iter15_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter15_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter15_reg));
                din_sign_reg_364_pp0_iter10_reg <= din_sign_reg_364_pp0_iter9_reg;
                din_sign_reg_364_pp0_iter11_reg <= din_sign_reg_364_pp0_iter10_reg;
                din_sign_reg_364_pp0_iter12_reg <= din_sign_reg_364_pp0_iter11_reg;
                din_sign_reg_364_pp0_iter13_reg <= din_sign_reg_364_pp0_iter12_reg;
                din_sign_reg_364_pp0_iter14_reg <= din_sign_reg_364_pp0_iter13_reg;
                din_sign_reg_364_pp0_iter15_reg <= din_sign_reg_364_pp0_iter14_reg;
                din_sign_reg_364_pp0_iter16_reg <= din_sign_reg_364_pp0_iter15_reg;
                din_sign_reg_364_pp0_iter17_reg <= din_sign_reg_364_pp0_iter16_reg;
                din_sign_reg_364_pp0_iter18_reg <= din_sign_reg_364_pp0_iter17_reg;
                din_sign_reg_364_pp0_iter19_reg <= din_sign_reg_364_pp0_iter18_reg;
                din_sign_reg_364_pp0_iter20_reg <= din_sign_reg_364_pp0_iter19_reg;
                din_sign_reg_364_pp0_iter21_reg <= din_sign_reg_364_pp0_iter20_reg;
                din_sign_reg_364_pp0_iter22_reg <= din_sign_reg_364_pp0_iter21_reg;
                din_sign_reg_364_pp0_iter23_reg <= din_sign_reg_364_pp0_iter22_reg;
                din_sign_reg_364_pp0_iter24_reg <= din_sign_reg_364_pp0_iter23_reg;
                din_sign_reg_364_pp0_iter25_reg <= din_sign_reg_364_pp0_iter24_reg;
                din_sign_reg_364_pp0_iter26_reg <= din_sign_reg_364_pp0_iter25_reg;
                din_sign_reg_364_pp0_iter27_reg <= din_sign_reg_364_pp0_iter26_reg;
                din_sign_reg_364_pp0_iter28_reg <= din_sign_reg_364_pp0_iter27_reg;
                din_sign_reg_364_pp0_iter29_reg <= din_sign_reg_364_pp0_iter28_reg;
                din_sign_reg_364_pp0_iter2_reg <= din_sign_reg_364_pp0_iter1_reg;
                din_sign_reg_364_pp0_iter30_reg <= din_sign_reg_364_pp0_iter29_reg;
                din_sign_reg_364_pp0_iter3_reg <= din_sign_reg_364_pp0_iter2_reg;
                din_sign_reg_364_pp0_iter4_reg <= din_sign_reg_364_pp0_iter3_reg;
                din_sign_reg_364_pp0_iter5_reg <= din_sign_reg_364_pp0_iter4_reg;
                din_sign_reg_364_pp0_iter6_reg <= din_sign_reg_364_pp0_iter5_reg;
                din_sign_reg_364_pp0_iter7_reg <= din_sign_reg_364_pp0_iter6_reg;
                din_sign_reg_364_pp0_iter8_reg <= din_sign_reg_364_pp0_iter7_reg;
                din_sign_reg_364_pp0_iter9_reg <= din_sign_reg_364_pp0_iter8_reg;
                expx_reg_60_pp0_iter15_reg <= expx_reg_60;
                expx_reg_60_pp0_iter16_reg <= expx_reg_60_pp0_iter15_reg;
                icmp_ln36_reg_378_pp0_iter10_reg <= icmp_ln36_reg_378_pp0_iter9_reg;
                icmp_ln36_reg_378_pp0_iter11_reg <= icmp_ln36_reg_378_pp0_iter10_reg;
                icmp_ln36_reg_378_pp0_iter12_reg <= icmp_ln36_reg_378_pp0_iter11_reg;
                icmp_ln36_reg_378_pp0_iter13_reg <= icmp_ln36_reg_378_pp0_iter12_reg;
                icmp_ln36_reg_378_pp0_iter14_reg <= icmp_ln36_reg_378_pp0_iter13_reg;
                icmp_ln36_reg_378_pp0_iter15_reg <= icmp_ln36_reg_378_pp0_iter14_reg;
                icmp_ln36_reg_378_pp0_iter16_reg <= icmp_ln36_reg_378_pp0_iter15_reg;
                icmp_ln36_reg_378_pp0_iter17_reg <= icmp_ln36_reg_378_pp0_iter16_reg;
                icmp_ln36_reg_378_pp0_iter18_reg <= icmp_ln36_reg_378_pp0_iter17_reg;
                icmp_ln36_reg_378_pp0_iter19_reg <= icmp_ln36_reg_378_pp0_iter18_reg;
                icmp_ln36_reg_378_pp0_iter20_reg <= icmp_ln36_reg_378_pp0_iter19_reg;
                icmp_ln36_reg_378_pp0_iter21_reg <= icmp_ln36_reg_378_pp0_iter20_reg;
                icmp_ln36_reg_378_pp0_iter22_reg <= icmp_ln36_reg_378_pp0_iter21_reg;
                icmp_ln36_reg_378_pp0_iter23_reg <= icmp_ln36_reg_378_pp0_iter22_reg;
                icmp_ln36_reg_378_pp0_iter24_reg <= icmp_ln36_reg_378_pp0_iter23_reg;
                icmp_ln36_reg_378_pp0_iter25_reg <= icmp_ln36_reg_378_pp0_iter24_reg;
                icmp_ln36_reg_378_pp0_iter26_reg <= icmp_ln36_reg_378_pp0_iter25_reg;
                icmp_ln36_reg_378_pp0_iter27_reg <= icmp_ln36_reg_378_pp0_iter26_reg;
                icmp_ln36_reg_378_pp0_iter28_reg <= icmp_ln36_reg_378_pp0_iter27_reg;
                icmp_ln36_reg_378_pp0_iter29_reg <= icmp_ln36_reg_378_pp0_iter28_reg;
                icmp_ln36_reg_378_pp0_iter2_reg <= icmp_ln36_reg_378_pp0_iter1_reg;
                icmp_ln36_reg_378_pp0_iter3_reg <= icmp_ln36_reg_378_pp0_iter2_reg;
                icmp_ln36_reg_378_pp0_iter4_reg <= icmp_ln36_reg_378_pp0_iter3_reg;
                icmp_ln36_reg_378_pp0_iter5_reg <= icmp_ln36_reg_378_pp0_iter4_reg;
                icmp_ln36_reg_378_pp0_iter6_reg <= icmp_ln36_reg_378_pp0_iter5_reg;
                icmp_ln36_reg_378_pp0_iter7_reg <= icmp_ln36_reg_378_pp0_iter6_reg;
                icmp_ln36_reg_378_pp0_iter8_reg <= icmp_ln36_reg_378_pp0_iter7_reg;
                icmp_ln36_reg_378_pp0_iter9_reg <= icmp_ln36_reg_378_pp0_iter8_reg;
                icmp_ln38_reg_404_pp0_iter10_reg <= icmp_ln38_reg_404_pp0_iter9_reg;
                icmp_ln38_reg_404_pp0_iter11_reg <= icmp_ln38_reg_404_pp0_iter10_reg;
                icmp_ln38_reg_404_pp0_iter12_reg <= icmp_ln38_reg_404_pp0_iter11_reg;
                icmp_ln38_reg_404_pp0_iter13_reg <= icmp_ln38_reg_404_pp0_iter12_reg;
                icmp_ln38_reg_404_pp0_iter14_reg <= icmp_ln38_reg_404_pp0_iter13_reg;
                icmp_ln38_reg_404_pp0_iter15_reg <= icmp_ln38_reg_404_pp0_iter14_reg;
                icmp_ln38_reg_404_pp0_iter16_reg <= icmp_ln38_reg_404_pp0_iter15_reg;
                icmp_ln38_reg_404_pp0_iter17_reg <= icmp_ln38_reg_404_pp0_iter16_reg;
                icmp_ln38_reg_404_pp0_iter18_reg <= icmp_ln38_reg_404_pp0_iter17_reg;
                icmp_ln38_reg_404_pp0_iter19_reg <= icmp_ln38_reg_404_pp0_iter18_reg;
                icmp_ln38_reg_404_pp0_iter20_reg <= icmp_ln38_reg_404_pp0_iter19_reg;
                icmp_ln38_reg_404_pp0_iter21_reg <= icmp_ln38_reg_404_pp0_iter20_reg;
                icmp_ln38_reg_404_pp0_iter22_reg <= icmp_ln38_reg_404_pp0_iter21_reg;
                icmp_ln38_reg_404_pp0_iter23_reg <= icmp_ln38_reg_404_pp0_iter22_reg;
                icmp_ln38_reg_404_pp0_iter24_reg <= icmp_ln38_reg_404_pp0_iter23_reg;
                icmp_ln38_reg_404_pp0_iter25_reg <= icmp_ln38_reg_404_pp0_iter24_reg;
                icmp_ln38_reg_404_pp0_iter26_reg <= icmp_ln38_reg_404_pp0_iter25_reg;
                icmp_ln38_reg_404_pp0_iter27_reg <= icmp_ln38_reg_404_pp0_iter26_reg;
                icmp_ln38_reg_404_pp0_iter28_reg <= icmp_ln38_reg_404_pp0_iter27_reg;
                icmp_ln38_reg_404_pp0_iter29_reg <= icmp_ln38_reg_404_pp0_iter28_reg;
                icmp_ln38_reg_404_pp0_iter2_reg <= icmp_ln38_reg_404_pp0_iter1_reg;
                icmp_ln38_reg_404_pp0_iter3_reg <= icmp_ln38_reg_404_pp0_iter2_reg;
                icmp_ln38_reg_404_pp0_iter4_reg <= icmp_ln38_reg_404_pp0_iter3_reg;
                icmp_ln38_reg_404_pp0_iter5_reg <= icmp_ln38_reg_404_pp0_iter4_reg;
                icmp_ln38_reg_404_pp0_iter6_reg <= icmp_ln38_reg_404_pp0_iter5_reg;
                icmp_ln38_reg_404_pp0_iter7_reg <= icmp_ln38_reg_404_pp0_iter6_reg;
                icmp_ln38_reg_404_pp0_iter8_reg <= icmp_ln38_reg_404_pp0_iter7_reg;
                icmp_ln38_reg_404_pp0_iter9_reg <= icmp_ln38_reg_404_pp0_iter8_reg;
                icmp_ln45_reg_382_pp0_iter10_reg <= icmp_ln45_reg_382_pp0_iter9_reg;
                icmp_ln45_reg_382_pp0_iter11_reg <= icmp_ln45_reg_382_pp0_iter10_reg;
                icmp_ln45_reg_382_pp0_iter12_reg <= icmp_ln45_reg_382_pp0_iter11_reg;
                icmp_ln45_reg_382_pp0_iter13_reg <= icmp_ln45_reg_382_pp0_iter12_reg;
                icmp_ln45_reg_382_pp0_iter14_reg <= icmp_ln45_reg_382_pp0_iter13_reg;
                icmp_ln45_reg_382_pp0_iter15_reg <= icmp_ln45_reg_382_pp0_iter14_reg;
                icmp_ln45_reg_382_pp0_iter16_reg <= icmp_ln45_reg_382_pp0_iter15_reg;
                icmp_ln45_reg_382_pp0_iter17_reg <= icmp_ln45_reg_382_pp0_iter16_reg;
                icmp_ln45_reg_382_pp0_iter18_reg <= icmp_ln45_reg_382_pp0_iter17_reg;
                icmp_ln45_reg_382_pp0_iter19_reg <= icmp_ln45_reg_382_pp0_iter18_reg;
                icmp_ln45_reg_382_pp0_iter20_reg <= icmp_ln45_reg_382_pp0_iter19_reg;
                icmp_ln45_reg_382_pp0_iter21_reg <= icmp_ln45_reg_382_pp0_iter20_reg;
                icmp_ln45_reg_382_pp0_iter22_reg <= icmp_ln45_reg_382_pp0_iter21_reg;
                icmp_ln45_reg_382_pp0_iter23_reg <= icmp_ln45_reg_382_pp0_iter22_reg;
                icmp_ln45_reg_382_pp0_iter24_reg <= icmp_ln45_reg_382_pp0_iter23_reg;
                icmp_ln45_reg_382_pp0_iter25_reg <= icmp_ln45_reg_382_pp0_iter24_reg;
                icmp_ln45_reg_382_pp0_iter26_reg <= icmp_ln45_reg_382_pp0_iter25_reg;
                icmp_ln45_reg_382_pp0_iter27_reg <= icmp_ln45_reg_382_pp0_iter26_reg;
                icmp_ln45_reg_382_pp0_iter28_reg <= icmp_ln45_reg_382_pp0_iter27_reg;
                icmp_ln45_reg_382_pp0_iter2_reg <= icmp_ln45_reg_382_pp0_iter1_reg;
                icmp_ln45_reg_382_pp0_iter3_reg <= icmp_ln45_reg_382_pp0_iter2_reg;
                icmp_ln45_reg_382_pp0_iter4_reg <= icmp_ln45_reg_382_pp0_iter3_reg;
                icmp_ln45_reg_382_pp0_iter5_reg <= icmp_ln45_reg_382_pp0_iter4_reg;
                icmp_ln45_reg_382_pp0_iter6_reg <= icmp_ln45_reg_382_pp0_iter5_reg;
                icmp_ln45_reg_382_pp0_iter7_reg <= icmp_ln45_reg_382_pp0_iter6_reg;
                icmp_ln45_reg_382_pp0_iter8_reg <= icmp_ln45_reg_382_pp0_iter7_reg;
                icmp_ln45_reg_382_pp0_iter9_reg <= icmp_ln45_reg_382_pp0_iter8_reg;
                icmp_ln54_reg_394_pp0_iter10_reg <= icmp_ln54_reg_394_pp0_iter9_reg;
                icmp_ln54_reg_394_pp0_iter11_reg <= icmp_ln54_reg_394_pp0_iter10_reg;
                icmp_ln54_reg_394_pp0_iter12_reg <= icmp_ln54_reg_394_pp0_iter11_reg;
                icmp_ln54_reg_394_pp0_iter13_reg <= icmp_ln54_reg_394_pp0_iter12_reg;
                icmp_ln54_reg_394_pp0_iter14_reg <= icmp_ln54_reg_394_pp0_iter13_reg;
                icmp_ln54_reg_394_pp0_iter15_reg <= icmp_ln54_reg_394_pp0_iter14_reg;
                icmp_ln54_reg_394_pp0_iter16_reg <= icmp_ln54_reg_394_pp0_iter15_reg;
                icmp_ln54_reg_394_pp0_iter17_reg <= icmp_ln54_reg_394_pp0_iter16_reg;
                icmp_ln54_reg_394_pp0_iter18_reg <= icmp_ln54_reg_394_pp0_iter17_reg;
                icmp_ln54_reg_394_pp0_iter19_reg <= icmp_ln54_reg_394_pp0_iter18_reg;
                icmp_ln54_reg_394_pp0_iter20_reg <= icmp_ln54_reg_394_pp0_iter19_reg;
                icmp_ln54_reg_394_pp0_iter21_reg <= icmp_ln54_reg_394_pp0_iter20_reg;
                icmp_ln54_reg_394_pp0_iter22_reg <= icmp_ln54_reg_394_pp0_iter21_reg;
                icmp_ln54_reg_394_pp0_iter23_reg <= icmp_ln54_reg_394_pp0_iter22_reg;
                icmp_ln54_reg_394_pp0_iter24_reg <= icmp_ln54_reg_394_pp0_iter23_reg;
                icmp_ln54_reg_394_pp0_iter25_reg <= icmp_ln54_reg_394_pp0_iter24_reg;
                icmp_ln54_reg_394_pp0_iter26_reg <= icmp_ln54_reg_394_pp0_iter25_reg;
                icmp_ln54_reg_394_pp0_iter27_reg <= icmp_ln54_reg_394_pp0_iter26_reg;
                icmp_ln54_reg_394_pp0_iter28_reg <= icmp_ln54_reg_394_pp0_iter27_reg;
                icmp_ln54_reg_394_pp0_iter2_reg <= icmp_ln54_reg_394_pp0_iter1_reg;
                icmp_ln54_reg_394_pp0_iter3_reg <= icmp_ln54_reg_394_pp0_iter2_reg;
                icmp_ln54_reg_394_pp0_iter4_reg <= icmp_ln54_reg_394_pp0_iter3_reg;
                icmp_ln54_reg_394_pp0_iter5_reg <= icmp_ln54_reg_394_pp0_iter4_reg;
                icmp_ln54_reg_394_pp0_iter6_reg <= icmp_ln54_reg_394_pp0_iter5_reg;
                icmp_ln54_reg_394_pp0_iter7_reg <= icmp_ln54_reg_394_pp0_iter6_reg;
                icmp_ln54_reg_394_pp0_iter8_reg <= icmp_ln54_reg_394_pp0_iter7_reg;
                icmp_ln54_reg_394_pp0_iter9_reg <= icmp_ln54_reg_394_pp0_iter8_reg;
                tmp_2_reg_390_pp0_iter10_reg <= tmp_2_reg_390_pp0_iter9_reg;
                tmp_2_reg_390_pp0_iter11_reg <= tmp_2_reg_390_pp0_iter10_reg;
                tmp_2_reg_390_pp0_iter12_reg <= tmp_2_reg_390_pp0_iter11_reg;
                tmp_2_reg_390_pp0_iter13_reg <= tmp_2_reg_390_pp0_iter12_reg;
                tmp_2_reg_390_pp0_iter14_reg <= tmp_2_reg_390_pp0_iter13_reg;
                tmp_2_reg_390_pp0_iter15_reg <= tmp_2_reg_390_pp0_iter14_reg;
                tmp_2_reg_390_pp0_iter16_reg <= tmp_2_reg_390_pp0_iter15_reg;
                tmp_2_reg_390_pp0_iter17_reg <= tmp_2_reg_390_pp0_iter16_reg;
                tmp_2_reg_390_pp0_iter18_reg <= tmp_2_reg_390_pp0_iter17_reg;
                tmp_2_reg_390_pp0_iter19_reg <= tmp_2_reg_390_pp0_iter18_reg;
                tmp_2_reg_390_pp0_iter20_reg <= tmp_2_reg_390_pp0_iter19_reg;
                tmp_2_reg_390_pp0_iter21_reg <= tmp_2_reg_390_pp0_iter20_reg;
                tmp_2_reg_390_pp0_iter22_reg <= tmp_2_reg_390_pp0_iter21_reg;
                tmp_2_reg_390_pp0_iter23_reg <= tmp_2_reg_390_pp0_iter22_reg;
                tmp_2_reg_390_pp0_iter24_reg <= tmp_2_reg_390_pp0_iter23_reg;
                tmp_2_reg_390_pp0_iter25_reg <= tmp_2_reg_390_pp0_iter24_reg;
                tmp_2_reg_390_pp0_iter26_reg <= tmp_2_reg_390_pp0_iter25_reg;
                tmp_2_reg_390_pp0_iter27_reg <= tmp_2_reg_390_pp0_iter26_reg;
                tmp_2_reg_390_pp0_iter28_reg <= tmp_2_reg_390_pp0_iter27_reg;
                tmp_2_reg_390_pp0_iter2_reg <= tmp_2_reg_390_pp0_iter1_reg;
                tmp_2_reg_390_pp0_iter3_reg <= tmp_2_reg_390_pp0_iter2_reg;
                tmp_2_reg_390_pp0_iter4_reg <= tmp_2_reg_390_pp0_iter3_reg;
                tmp_2_reg_390_pp0_iter5_reg <= tmp_2_reg_390_pp0_iter4_reg;
                tmp_2_reg_390_pp0_iter6_reg <= tmp_2_reg_390_pp0_iter5_reg;
                tmp_2_reg_390_pp0_iter7_reg <= tmp_2_reg_390_pp0_iter6_reg;
                tmp_2_reg_390_pp0_iter8_reg <= tmp_2_reg_390_pp0_iter7_reg;
                tmp_2_reg_390_pp0_iter9_reg <= tmp_2_reg_390_pp0_iter8_reg;
                tmp_4_reg_435 <= grp_exp_generic_double_s_fu_89_ap_return;
                x_3_reg_409 <= x_3_fu_245_p3;
                x_3_reg_409_pp0_iter3_reg <= x_3_reg_409;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_reg_417 <= grp_fu_100_p2;
                ap_phi_reg_pp0_iter3_expx_reg_60 <= ap_phi_reg_pp0_iter2_expx_reg_60;
                ap_phi_reg_pp0_iter3_resultf_3_reg_72 <= ap_phi_reg_pp0_iter2_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter10_expx_reg_60 <= ap_phi_reg_pp0_iter9_expx_reg_60;
                ap_phi_reg_pp0_iter10_resultf_3_reg_72 <= ap_phi_reg_pp0_iter9_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter11_expx_reg_60 <= ap_phi_reg_pp0_iter10_expx_reg_60;
                ap_phi_reg_pp0_iter11_resultf_3_reg_72 <= ap_phi_reg_pp0_iter10_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter12_expx_reg_60 <= ap_phi_reg_pp0_iter11_expx_reg_60;
                ap_phi_reg_pp0_iter12_resultf_3_reg_72 <= ap_phi_reg_pp0_iter11_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter13_expx_reg_60 <= ap_phi_reg_pp0_iter12_expx_reg_60;
                ap_phi_reg_pp0_iter13_resultf_3_reg_72 <= ap_phi_reg_pp0_iter12_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter14_resultf_3_reg_72 <= ap_phi_reg_pp0_iter13_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter15_resultf_3_reg_72 <= ap_phi_reg_pp0_iter14_resultf_3_reg_72;
                expx_reg_60 <= ap_phi_reg_pp0_iter14_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter16_resultf_3_reg_72 <= ap_phi_reg_pp0_iter15_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter17_resultf_3_reg_72 <= ap_phi_reg_pp0_iter16_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter18_resultf_3_reg_72 <= ap_phi_reg_pp0_iter17_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter19_resultf_3_reg_72 <= ap_phi_reg_pp0_iter18_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter1_expx_reg_60 <= ap_phi_reg_pp0_iter0_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter20_resultf_3_reg_72 <= ap_phi_reg_pp0_iter19_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter20 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter21_resultf_3_reg_72 <= ap_phi_reg_pp0_iter20_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter22_resultf_3_reg_72 <= ap_phi_reg_pp0_iter21_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter23_resultf_3_reg_72 <= ap_phi_reg_pp0_iter22_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter23 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter24_resultf_3_reg_72 <= ap_phi_reg_pp0_iter23_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter24 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter25_resultf_3_reg_72 <= ap_phi_reg_pp0_iter24_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter25 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter26_resultf_3_reg_72 <= ap_phi_reg_pp0_iter25_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter27_resultf_3_reg_72 <= ap_phi_reg_pp0_iter26_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter28 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter29_resultf_3_reg_72 <= ap_phi_reg_pp0_iter28_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter2_expx_reg_60 <= ap_phi_reg_pp0_iter1_expx_reg_60;
                ap_phi_reg_pp0_iter2_resultf_3_reg_72 <= ap_phi_reg_pp0_iter1_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter29 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter30_resultf_3_reg_72 <= ap_phi_reg_pp0_iter29_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter4_resultf_3_reg_72 <= ap_phi_reg_pp0_iter3_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter5_expx_reg_60 <= ap_phi_reg_pp0_iter4_expx_reg_60;
                ap_phi_reg_pp0_iter5_resultf_3_reg_72 <= ap_phi_reg_pp0_iter4_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter6_expx_reg_60 <= ap_phi_reg_pp0_iter5_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter7_expx_reg_60 <= ap_phi_reg_pp0_iter6_expx_reg_60;
                ap_phi_reg_pp0_iter7_resultf_3_reg_72 <= ap_phi_reg_pp0_iter6_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter8_expx_reg_60 <= ap_phi_reg_pp0_iter7_expx_reg_60;
                ap_phi_reg_pp0_iter8_resultf_3_reg_72 <= ap_phi_reg_pp0_iter7_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_phi_reg_pp0_iter9_expx_reg_60 <= ap_phi_reg_pp0_iter8_expx_reg_60;
                ap_phi_reg_pp0_iter9_resultf_3_reg_72 <= ap_phi_reg_pp0_iter8_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_ce) and (ap_predicate_pred174_state28 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_ce) and (ap_predicate_pred166_state28 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1)))) then
                reg_139 <= grp_fu_129_p2;
            end if;
        end if;
    end process;
    abst_in_reg_369(63) <= '0';
    abst_in_reg_369_pp0_iter1_reg(63) <= '0';
    abst_in_reg_369_pp0_iter2_reg(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    abst_in_fu_183_p1 <= t_fu_175_p3;
    and_ln10_1_fu_315_p2 <= (icmp_ln10_fu_303_p2 and and_ln10_fu_309_p2);
    and_ln10_fu_309_p2 <= (xor_ln10_fu_297_p2 and icmp_ln9_1_fu_279_p2);
    and_ln46_fu_216_p2 <= (icmp_ln46_fu_204_p2 and icmp_ln46_1_fu_210_p2);
    and_ln9_1_fu_291_p2 <= (xs_sign_fu_255_p3 and and_ln9_fu_285_p2);
    and_ln9_fu_285_p2 <= (icmp_ln9_fu_273_p2 and icmp_ln9_1_fu_279_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001_ignoreCallOp80 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_condition_1016_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_00001)
    begin
                ap_condition_1016 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001));
    end process;


    ap_condition_145_assign_proc : process(ap_enable_reg_pp0_iter27, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_145 <= ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter27 = ap_const_logic_1));
    end process;


    ap_condition_596_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_596 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_614_assign_proc : process(ap_enable_reg_pp0_iter5, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_614 <= ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_646_assign_proc : process(ap_enable_reg_pp0_iter13, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_646 <= ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_764_assign_proc : process(ap_enable_reg_pp0_iter30, ap_ce, ap_block_pp0_stage0_11001)
    begin
                ap_condition_764 <= ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1));
    end process;


    ap_condition_769_assign_proc : process(icmp_ln36_reg_378_pp0_iter4_reg, icmp_ln45_reg_382_pp0_iter4_reg, and_ln46_reg_386_pp0_iter4_reg)
    begin
                ap_condition_769 <= (((icmp_ln45_reg_382_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln36_reg_378_pp0_iter4_reg = ap_const_lv1_0)) or ((icmp_ln36_reg_378_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln46_reg_386_pp0_iter4_reg)));
    end process;


    ap_condition_795_assign_proc : process(icmp_ln36_fu_192_p2, icmp_ln45_fu_198_p2, and_ln46_fu_216_p2, tmp_2_fu_134_p2)
    begin
                ap_condition_795 <= ((tmp_2_fu_134_p2 = ap_const_lv1_0) and (icmp_ln45_fu_198_p2 = ap_const_lv1_0) and (icmp_ln36_fu_192_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_216_p2));
    end process;


    ap_condition_854_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
                ap_condition_854 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_856_assign_proc : process(icmp_ln36_fu_192_p2, icmp_ln45_fu_198_p2, and_ln46_fu_216_p2, tmp_2_fu_134_p2)
    begin
                ap_condition_856 <= ((tmp_2_fu_134_p2 = ap_const_lv1_1) and (icmp_ln45_fu_198_p2 = ap_const_lv1_0) and (icmp_ln36_fu_192_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_fu_216_p2));
    end process;


    ap_condition_862_assign_proc : process(icmp_ln36_fu_192_p2, icmp_ln45_fu_198_p2, and_ln46_fu_216_p2)
    begin
                ap_condition_862 <= (((icmp_ln45_fu_198_p2 = ap_const_lv1_1) and (icmp_ln36_fu_192_p2 = ap_const_lv1_0)) or ((icmp_ln36_fu_192_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln46_fu_216_p2)));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter31, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter31 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to30_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to30 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to30 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_expx_reg_60 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_resultf_3_reg_72 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op80_call_state5_assign_proc : process(icmp_ln36_reg_378_pp0_iter3_reg, icmp_ln45_reg_382_pp0_iter3_reg, and_ln46_reg_386_pp0_iter3_reg, tmp_2_reg_390_pp0_iter3_reg, and_ln9_1_reg_422, and_ln10_1_reg_426)
    begin
                ap_predicate_op80_call_state5 <= ((tmp_2_reg_390_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_reg_426) and (ap_const_lv1_0 = and_ln9_1_reg_422) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter3_reg));
    end process;


    ap_predicate_op80_call_state5_state4_assign_proc : process(icmp_ln36_reg_378_pp0_iter2_reg, icmp_ln45_reg_382_pp0_iter2_reg, and_ln46_reg_386_pp0_iter2_reg, tmp_2_reg_390_pp0_iter2_reg, and_ln9_1_fu_291_p2, and_ln10_1_fu_315_p2)
    begin
                ap_predicate_op80_call_state5_state4 <= ((tmp_2_reg_390_pp0_iter2_reg = ap_const_lv1_1) and (icmp_ln45_reg_382_pp0_iter2_reg = ap_const_lv1_0) and (icmp_ln36_reg_378_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_fu_315_p2) and (ap_const_lv1_0 = and_ln9_1_fu_291_p2) and (ap_const_lv1_0 = and_ln46_reg_386_pp0_iter2_reg));
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to30)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to30 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        bitcast_ln83_1_fu_353_p1 when (din_sign_reg_364_pp0_iter30_reg(0) = '1') else 
        ap_phi_reg_pp0_iter31_resultf_3_reg_72;
    bitcast_ln55_fu_234_p1 <= or_ln55_fu_228_p2;
    bitcast_ln66_1_fu_331_p1 <= xor_ln66_fu_325_p2;
    bitcast_ln66_fu_321_p1 <= expx_reg_60_pp0_iter16_reg;
    bitcast_ln83_1_fu_353_p1 <= xor_ln83_fu_347_p2;
    bitcast_ln83_fu_343_p1 <= ap_phi_reg_pp0_iter31_resultf_3_reg_72;
    data_1_fu_252_p1 <= x_3_reg_409;
    data_fu_145_p1 <= t_in;
    din_exp_fu_157_p4 <= data_fu_145_p1(62 downto 52);
    din_sig_fu_167_p1 <= data_fu_145_p1(52 - 1 downto 0);

    grp_exp_generic_double_s_fu_89_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001_ignoreCallOp80)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp80))) then 
            grp_exp_generic_double_s_fu_89_ap_ce <= ap_const_logic_1;
        else 
            grp_exp_generic_double_s_fu_89_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_generic_double_s_fu_89_ap_start <= grp_exp_generic_double_s_fu_89_ap_start_reg;

    grp_fu_100_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_100_ce <= ap_const_logic_1;
        else 
            grp_fu_100_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_100_opcode_assign_proc : process(ap_condition_862, ap_condition_856, ap_condition_1016)
    begin
        if ((ap_const_boolean_1 = ap_condition_1016)) then
            if ((ap_const_boolean_1 = ap_condition_856)) then 
                grp_fu_100_opcode <= ap_const_lv2_1;
            elsif ((ap_const_boolean_1 = ap_condition_862)) then 
                grp_fu_100_opcode <= ap_const_lv2_0;
            else 
                grp_fu_100_opcode <= "XX";
            end if;
        else 
            grp_fu_100_opcode <= "XX";
        end if; 
    end process;


    grp_fu_100_p0_assign_proc : process(abst_in_fu_183_p1, bitcast_ln55_fu_234_p1, ap_condition_862, ap_condition_856, ap_condition_854)
    begin
        if ((ap_const_boolean_1 = ap_condition_854)) then
            if ((ap_const_boolean_1 = ap_condition_862)) then 
                grp_fu_100_p0 <= abst_in_fu_183_p1;
            elsif ((ap_const_boolean_1 = ap_condition_856)) then 
                grp_fu_100_p0 <= bitcast_ln55_fu_234_p1;
            else 
                grp_fu_100_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_100_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_100_p1_assign_proc : process(abst_in_fu_183_p1, ap_condition_862, ap_condition_856, ap_condition_854)
    begin
        if ((ap_const_boolean_1 = ap_condition_854)) then
            if ((ap_const_boolean_1 = ap_condition_862)) then 
                grp_fu_100_p1 <= ap_const_lv64_3FF0000000000000;
            elsif ((ap_const_boolean_1 = ap_condition_856)) then 
                grp_fu_100_p1 <= abst_in_fu_183_p1;
            else 
                grp_fu_100_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_100_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_104_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_104_ce <= ap_const_logic_1;
        else 
            grp_fu_104_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_109_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_109_ce <= ap_const_logic_1;
        else 
            grp_fu_109_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_114_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_114_ce <= ap_const_logic_1;
        else 
            grp_fu_114_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_120_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_120_ce <= ap_const_logic_1;
        else 
            grp_fu_120_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_125_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_125_ce <= ap_const_logic_1;
        else 
            grp_fu_125_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_129_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_129_ce <= ap_const_logic_1;
        else 
            grp_fu_129_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_129_p0_assign_proc : process(ap_enable_reg_pp0_iter17, bitcast_ln66_1_fu_331_p1, ap_block_pp0_stage0, ap_predicate_pred891_state18, ap_predicate_pred896_state18)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if ((ap_predicate_pred896_state18 = ap_const_boolean_1)) then 
                grp_fu_129_p0 <= bitcast_ln66_1_fu_331_p1;
            elsif ((ap_predicate_pred891_state18 = ap_const_boolean_1)) then 
                grp_fu_129_p0 <= ap_const_lv64_4000000000000000;
            else 
                grp_fu_129_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_129_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln10_fu_303_p2 <= "1" when (unsigned(xs_exp_1_fu_263_p4) < unsigned(ap_const_lv11_3E5)) else "0";
    icmp_ln36_fu_192_p2 <= "1" when (din_exp_fu_157_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln38_fu_239_p2 <= "0" when (din_sig_fu_167_p1 = ap_const_lv52_0) else "1";
    icmp_ln45_fu_198_p2 <= "1" when (unsigned(din_exp_fu_157_p4) < unsigned(ap_const_lv11_3C8)) else "0";
    icmp_ln46_1_fu_210_p2 <= "1" when (din_sig_fu_167_p1 = ap_const_lv52_0) else "0";
    icmp_ln46_fu_204_p2 <= "1" when (din_exp_fu_157_p4 = ap_const_lv11_3C8) else "0";
    icmp_ln54_fu_222_p2 <= "1" when (unsigned(din_exp_fu_157_p4) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln9_1_fu_279_p2 <= "0" when (xs_exp_1_fu_263_p4 = ap_const_lv11_0) else "1";
    icmp_ln9_fu_273_p2 <= "1" when (unsigned(xs_exp_1_fu_263_p4) < unsigned(ap_const_lv11_3E4)) else "0";
    or_ln55_fu_228_p2 <= (t_fu_175_p3 or ap_const_lv64_8000000000000000);
    select_ln38_fu_336_p3 <= 
        ap_const_lv64_7FFFFFFFFFFFFFFF when (icmp_ln38_reg_404_pp0_iter29_reg(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    t_fu_175_p3 <= (ap_const_lv1_0 & trunc_ln479_fu_171_p1);
    trunc_ln479_fu_171_p1 <= data_fu_145_p1(63 - 1 downto 0);
    x_3_fu_245_p3 <= 
        grp_fu_100_p2 when (icmp_ln54_reg_394_pp0_iter1_reg(0) = '1') else 
        grp_fu_104_p2;
    xor_ln10_fu_297_p2 <= (xs_sign_fu_255_p3 xor ap_const_lv1_1);
    xor_ln66_fu_325_p2 <= (bitcast_ln66_fu_321_p1 xor ap_const_lv64_8000000000000000);
    xor_ln83_fu_347_p2 <= (bitcast_ln83_fu_343_p1 xor ap_const_lv64_8000000000000000);
    xs_exp_1_fu_263_p4 <= data_1_fu_252_p1(62 downto 52);
    xs_sign_fu_255_p3 <= data_1_fu_252_p1(63 downto 63);
end behav;
