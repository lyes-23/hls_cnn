-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Lenet_HW_exp_generic_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of Lenet_HW_exp_generic_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv71_58B90BFBE8E7BCD5E4 : STD_LOGIC_VECTOR (70 downto 0) := "10110001011100100001011111110111110100011100111101111001101010111100100";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv64_7FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0111111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv58_10 : STD_LOGIC_VECTOR (57 downto 0) := "0000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv49_0 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv13_1FFF : STD_LOGIC_VECTOR (12 downto 0) := "1111111111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv13_1C02 : STD_LOGIC_VECTOR (12 downto 0) := "1110000000010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv31_5C55 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000101110001010101";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_ce0 : STD_LOGIC;
    signal table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_q0 : STD_LOGIC_VECTOR (57 downto 0);
    signal table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0 : STD_LOGIC;
    signal table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0 : STD_LOGIC_VECTOR (25 downto 0);
    signal table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce1 : STD_LOGIC;
    signal table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q1 : STD_LOGIC_VECTOR (25 downto 0);
    signal table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0 : STD_LOGIC;
    signal table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0 : STD_LOGIC_VECTOR (41 downto 0);
    signal es_sign_fu_274_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal es_sign_reg_1109 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal es_sign_reg_1109_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal es_sign_reg_1109_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal es_sign_reg_1109_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal es_sign_reg_1109_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1114_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1114_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1114_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_1114_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_1122_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_1122_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_1122_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_1122_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln224_fu_336_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln224_reg_1128 : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln224_reg_1128_pp0_iter1_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln224_reg_1128_pp0_iter2_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln224_reg_1128_pp0_iter3_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal select_ln224_reg_1128_pp0_iter4_reg : STD_LOGIC_VECTOR (53 downto 0);
    signal tmp_6_reg_1133 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1133_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln255_fu_458_p1 : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln255_reg_1143 : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln255_reg_1143_pp0_iter1_reg : STD_LOGIC_VECTOR (58 downto 0);
    signal trunc_ln255_reg_1143_pp0_iter2_reg : STD_LOGIC_VECTOR (58 downto 0);
    signal icmp_ln309_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_1148 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_1148_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_1148_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_1148_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_reg_1148_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_2_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_2_reg_1156 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_2_reg_1156_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_2_reg_1156_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_2_reg_1156_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln309_2_reg_1156_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_exp_fu_540_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_exp_reg_1166 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_exp_reg_1166_pp0_iter4_reg : STD_LOGIC_VECTOR (12 downto 0);
    signal m_diff_hi_reg_1172 : STD_LOGIC_VECTOR (7 downto 0);
    signal Z2_fu_586_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal Z2_reg_1177 : STD_LOGIC_VECTOR (7 downto 0);
    signal Z2_reg_1177_pp0_iter4_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal Z3_fu_596_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal Z3_reg_1183 : STD_LOGIC_VECTOR (7 downto 0);
    signal Z4_fu_606_p1 : STD_LOGIC_VECTOR (34 downto 0);
    signal Z4_reg_1188 : STD_LOGIC_VECTOR (34 downto 0);
    signal tmp_3_fu_715_p4 : STD_LOGIC_VECTOR (39 downto 0);
    signal tmp_3_reg_1213 : STD_LOGIC_VECTOR (39 downto 0);
    signal add_ln145_fu_758_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal add_ln145_reg_1218 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln114_fu_620_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln119_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln138_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln292_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_ln123_fu_258_p0 : STD_LOGIC_VECTOR (42 downto 0);
    signal mul_ln123_fu_258_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln142_fu_262_p0 : STD_LOGIC_VECTOR (48 downto 0);
    signal mul_ln142_fu_262_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln297_fu_266_p0 : STD_LOGIC_VECTOR (49 downto 0);
    signal mul_ln297_fu_266_p1 : STD_LOGIC_VECTOR (49 downto 0);
    signal data_fu_270_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal es_exp_fu_282_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal es_sig_fu_292_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln486_fu_308_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal e_frac_fu_318_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal zext_ln221_fu_326_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal e_frac_1_fu_330_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal m_frac_l_fu_344_p3 : STD_LOGIC_VECTOR (60 downto 0);
    signal m_exp_fu_312_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln229_fu_364_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_356_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln229_fu_370_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln229_fu_374_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln229_1_fu_382_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln227_fu_352_p1 : STD_LOGIC_VECTOR (70 downto 0);
    signal zext_ln229_fu_386_p1 : STD_LOGIC_VECTOR (70 downto 0);
    signal ashr_ln229_fu_390_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal shl_ln229_fu_396_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal m_fix_fu_402_p3 : STD_LOGIC_VECTOR (70 downto 0);
    signal m_fix_l_fu_410_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln230_fu_420_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_fix_hi_fu_436_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln230_fu_424_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ashr_ln230_fu_430_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln230_fu_468_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln2_fu_476_p3 : STD_LOGIC_VECTOR (70 downto 0);
    signal shl_ln_fu_490_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1098_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln243_fu_517_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_cast_fu_501_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln243_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln243_1_fu_526_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_8_fu_510_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln243_fu_532_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln249_fu_253_p2 : STD_LOGIC_VECTOR (70 downto 0);
    signal tmp_1_fu_553_p4 : STD_LOGIC_VECTOR (57 downto 0);
    signal and_ln_fu_563_p3 : STD_LOGIC_VECTOR (58 downto 0);
    signal m_diff_fu_571_p2 : STD_LOGIC_VECTOR (58 downto 0);
    signal Z4_ind_fu_610_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_Z4_fu_639_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln115_fu_649_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln115_1_fu_652_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal exp_Z3_m_1_fu_662_p4 : STD_LOGIC_VECTOR (42 downto 0);
    signal exp_Z4_m_1_fu_656_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln123_fu_258_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_2_fu_685_p4 : STD_LOGIC_VECTOR (19 downto 0);
    signal zext_ln130_1_fu_695_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal add_ln130_fu_699_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln130_fu_705_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal zext_ln120_fu_671_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal exp_Z2_m_1_fu_725_p4 : STD_LOGIC_VECTOR (48 downto 0);
    signal exp_Z2P_m_1_fu_709_p2 : STD_LOGIC_VECTOR (43 downto 0);
    signal mul_ln142_fu_262_p2 : STD_LOGIC_VECTOR (92 downto 0);
    signal tmp_7_fu_744_p4 : STD_LOGIC_VECTOR (35 downto 0);
    signal zext_ln145_2_fu_754_p1 : STD_LOGIC_VECTOR (43 downto 0);
    signal xor_ln182_fu_764_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_1_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln182_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln185_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_789_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln1_fu_811_p5 : STD_LOGIC_VECTOR (50 downto 0);
    signal zext_ln145_1_fu_825_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal zext_ln145_fu_821_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal exp_Z1P_m_1_l_fu_828_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal exp_Z1_hi_fu_844_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal exp_Z1P_m_1_fu_834_p4 : STD_LOGIC_VECTOR (49 downto 0);
    signal add_ln297_fu_854_p2 : STD_LOGIC_VECTOR (57 downto 0);
    signal mul_ln297_fu_266_p2 : STD_LOGIC_VECTOR (99 downto 0);
    signal shl_ln1_fu_870_p3 : STD_LOGIC_VECTOR (106 downto 0);
    signal zext_ln297_2_fu_878_p1 : STD_LOGIC_VECTOR (106 downto 0);
    signal add_ln297_1_fu_882_p2 : STD_LOGIC_VECTOR (106 downto 0);
    signal tmp_9_fu_888_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_exp_1_fu_896_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal r_exp_2_fu_901_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_10_fu_908_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln309_1_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_929_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln336_fu_950_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_960_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_5_fu_970_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal out_exp_fu_954_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln303_fu_980_p3 : STD_LOGIC_VECTOR (51 downto 0);
    signal t_fu_988_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln185_fu_803_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln497_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln309_fu_924_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln309_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln309_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln309_1_fu_1019_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln309_1_fu_1025_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_1_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln309_2_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln310_fu_936_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln18_1_fu_1002_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln309_1_fu_1050_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln309_2_fu_1061_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln309_3_fu_1056_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln309_2_fu_1066_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln309_3_fu_1072_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln309_4_fu_1078_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln326_fu_944_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln309_5_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln309_fu_1042_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_1098_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1098_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln123_fu_258_p00 : STD_LOGIC_VECTOR (78 downto 0);
    signal mul_ln123_fu_258_p10 : STD_LOGIC_VECTOR (78 downto 0);
    signal mul_ln142_fu_262_p00 : STD_LOGIC_VECTOR (92 downto 0);
    signal mul_ln142_fu_262_p10 : STD_LOGIC_VECTOR (92 downto 0);
    signal mul_ln297_fu_266_p00 : STD_LOGIC_VECTOR (99 downto 0);
    signal mul_ln297_fu_266_p10 : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component Lenet_HW_mul_13s_71s_71_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (70 downto 0);
        dout : OUT STD_LOGIC_VECTOR (70 downto 0) );
    end component;


    component Lenet_HW_mul_43ns_36ns_79_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (42 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        dout : OUT STD_LOGIC_VECTOR (78 downto 0) );
    end component;


    component Lenet_HW_mul_49ns_44ns_93_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (48 downto 0);
        din1 : IN STD_LOGIC_VECTOR (43 downto 0);
        dout : OUT STD_LOGIC_VECTOR (92 downto 0) );
    end component;


    component Lenet_HW_mul_50ns_50ns_100_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (49 downto 0);
        din1 : IN STD_LOGIC_VECTOR (49 downto 0);
        dout : OUT STD_LOGIC_VECTOR (99 downto 0) );
    end component;


    component Lenet_HW_mac_muladd_16s_15ns_19s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component Lenet_HW_exp_generic_double_s_table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_arbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (57 downto 0) );
    end component;


    component Lenet_HW_exp_generic_double_s_table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_arracud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (25 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component Lenet_HW_exp_generic_double_s_table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_arradEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (41 downto 0) );
    end component;



begin
    table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_U : component Lenet_HW_exp_generic_double_s_table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_arbkb
    generic map (
        DataWidth => 58,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_address0,
        ce0 => table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_ce0,
        q0 => table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_q0);

    table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_U : component Lenet_HW_exp_generic_double_s_table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_arracud
    generic map (
        DataWidth => 26,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address0,
        ce0 => table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0,
        q0 => table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0,
        address1 => table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address1,
        ce1 => table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce1,
        q1 => table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q1);

    table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_U : component Lenet_HW_exp_generic_double_s_table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_arradEe
    generic map (
        DataWidth => 42,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address0,
        ce0 => table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0,
        q0 => table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0);

    mul_13s_71s_71_1_1_U1 : component Lenet_HW_mul_13s_71s_71_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 71,
        dout_WIDTH => 71)
    port map (
        din0 => r_exp_fu_540_p3,
        din1 => ap_const_lv71_58B90BFBE8E7BCD5E4,
        dout => mul_ln249_fu_253_p2);

    mul_43ns_36ns_79_1_1_U2 : component Lenet_HW_mul_43ns_36ns_79_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 43,
        din1_WIDTH => 36,
        dout_WIDTH => 79)
    port map (
        din0 => mul_ln123_fu_258_p0,
        din1 => mul_ln123_fu_258_p1,
        dout => mul_ln123_fu_258_p2);

    mul_49ns_44ns_93_1_1_U3 : component Lenet_HW_mul_49ns_44ns_93_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 49,
        din1_WIDTH => 44,
        dout_WIDTH => 93)
    port map (
        din0 => mul_ln142_fu_262_p0,
        din1 => mul_ln142_fu_262_p1,
        dout => mul_ln142_fu_262_p2);

    mul_50ns_50ns_100_1_1_U4 : component Lenet_HW_mul_50ns_50ns_100_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 50,
        din1_WIDTH => 50,
        dout_WIDTH => 100)
    port map (
        din0 => mul_ln297_fu_266_p0,
        din1 => mul_ln297_fu_266_p1,
        dout => mul_ln297_fu_266_p2);

    mac_muladd_16s_15ns_19s_31_4_1_U5 : component Lenet_HW_mac_muladd_16s_15ns_19s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 15,
        din2_WIDTH => 19,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => m_fix_hi_fu_436_p4,
        din1 => grp_fu_1098_p1,
        din2 => shl_ln_fu_490_p3,
        ce => grp_fu_1098_ce,
        dout => grp_fu_1098_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce))) then
                Z2_reg_1177 <= m_diff_fu_571_p2(50 downto 43);
                Z2_reg_1177_pp0_iter4_reg <= Z2_reg_1177;
                Z3_reg_1183 <= m_diff_fu_571_p2(42 downto 35);
                Z4_reg_1188 <= Z4_fu_606_p1;
                add_ln145_reg_1218 <= add_ln145_fu_758_p2;
                es_sign_reg_1109_pp0_iter2_reg <= es_sign_reg_1109_pp0_iter1_reg;
                es_sign_reg_1109_pp0_iter3_reg <= es_sign_reg_1109_pp0_iter2_reg;
                es_sign_reg_1109_pp0_iter4_reg <= es_sign_reg_1109_pp0_iter3_reg;
                icmp_ln18_1_reg_1122_pp0_iter2_reg <= icmp_ln18_1_reg_1122_pp0_iter1_reg;
                icmp_ln18_1_reg_1122_pp0_iter3_reg <= icmp_ln18_1_reg_1122_pp0_iter2_reg;
                icmp_ln18_1_reg_1122_pp0_iter4_reg <= icmp_ln18_1_reg_1122_pp0_iter3_reg;
                icmp_ln18_reg_1114_pp0_iter2_reg <= icmp_ln18_reg_1114_pp0_iter1_reg;
                icmp_ln18_reg_1114_pp0_iter3_reg <= icmp_ln18_reg_1114_pp0_iter2_reg;
                icmp_ln18_reg_1114_pp0_iter4_reg <= icmp_ln18_reg_1114_pp0_iter3_reg;
                icmp_ln309_2_reg_1156_pp0_iter2_reg <= icmp_ln309_2_reg_1156_pp0_iter1_reg;
                icmp_ln309_2_reg_1156_pp0_iter3_reg <= icmp_ln309_2_reg_1156_pp0_iter2_reg;
                icmp_ln309_2_reg_1156_pp0_iter4_reg <= icmp_ln309_2_reg_1156_pp0_iter3_reg;
                icmp_ln309_reg_1148_pp0_iter2_reg <= icmp_ln309_reg_1148_pp0_iter1_reg;
                icmp_ln309_reg_1148_pp0_iter3_reg <= icmp_ln309_reg_1148_pp0_iter2_reg;
                icmp_ln309_reg_1148_pp0_iter4_reg <= icmp_ln309_reg_1148_pp0_iter3_reg;
                m_diff_hi_reg_1172 <= m_diff_fu_571_p2(58 downto 51);
                r_exp_reg_1166 <= r_exp_fu_540_p3;
                r_exp_reg_1166_pp0_iter4_reg <= r_exp_reg_1166;
                select_ln224_reg_1128_pp0_iter2_reg <= select_ln224_reg_1128_pp0_iter1_reg;
                select_ln224_reg_1128_pp0_iter3_reg <= select_ln224_reg_1128_pp0_iter2_reg;
                select_ln224_reg_1128_pp0_iter4_reg <= select_ln224_reg_1128_pp0_iter3_reg;
                tmp_3_reg_1213 <= table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0(41 downto 2);
                trunc_ln255_reg_1143_pp0_iter2_reg <= trunc_ln255_reg_1143_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                es_sign_reg_1109 <= data_fu_270_p1(63 downto 63);
                es_sign_reg_1109_pp0_iter1_reg <= es_sign_reg_1109;
                icmp_ln18_1_reg_1122 <= icmp_ln18_1_fu_302_p2;
                icmp_ln18_1_reg_1122_pp0_iter1_reg <= icmp_ln18_1_reg_1122;
                icmp_ln18_reg_1114 <= icmp_ln18_fu_296_p2;
                icmp_ln18_reg_1114_pp0_iter1_reg <= icmp_ln18_reg_1114;
                icmp_ln309_2_reg_1156 <= icmp_ln309_2_fu_484_p2;
                icmp_ln309_2_reg_1156_pp0_iter1_reg <= icmp_ln309_2_reg_1156;
                icmp_ln309_reg_1148 <= icmp_ln309_fu_462_p2;
                icmp_ln309_reg_1148_pp0_iter1_reg <= icmp_ln309_reg_1148;
                select_ln224_reg_1128 <= select_ln224_fu_336_p3;
                select_ln224_reg_1128_pp0_iter1_reg <= select_ln224_reg_1128;
                tmp_6_reg_1133 <= m_fix_fu_402_p3(70 downto 70);
                tmp_6_reg_1133_pp0_iter1_reg <= tmp_6_reg_1133;
                trunc_ln255_reg_1143 <= trunc_ln255_fu_458_p1;
                trunc_ln255_reg_1143_pp0_iter1_reg <= trunc_ln255_reg_1143;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Z2_fu_586_p4 <= m_diff_fu_571_p2(50 downto 43);
    Z3_fu_596_p4 <= m_diff_fu_571_p2(42 downto 35);
    Z4_fu_606_p1 <= m_diff_fu_571_p2(35 - 1 downto 0);
    Z4_ind_fu_610_p4 <= m_diff_fu_571_p2(34 downto 27);
    add_ln130_fu_699_p2 <= std_logic_vector(unsigned(exp_Z4_m_1_fu_656_p2) + unsigned(zext_ln130_1_fu_695_p1));
    add_ln145_fu_758_p2 <= std_logic_vector(unsigned(exp_Z2P_m_1_fu_709_p2) + unsigned(zext_ln145_2_fu_754_p1));
    add_ln243_1_fu_526_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_501_p4) + unsigned(ap_const_lv13_1));
    add_ln297_1_fu_882_p2 <= std_logic_vector(unsigned(shl_ln1_fu_870_p3) + unsigned(zext_ln297_2_fu_878_p1));
    add_ln297_fu_854_p2 <= std_logic_vector(unsigned(table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_q0) + unsigned(ap_const_lv58_10));
    and_ln182_1_fu_769_p2 <= (xor_ln182_fu_764_p2 and icmp_ln18_1_reg_1122_pp0_iter4_reg);
    and_ln182_fu_774_p2 <= (icmp_ln18_reg_1114_pp0_iter4_reg and and_ln182_1_fu_769_p2);
    and_ln18_fu_784_p2 <= (xor_ln18_fu_779_p2 and icmp_ln18_reg_1114_pp0_iter4_reg);
    and_ln1_fu_811_p5 <= (((Z2_reg_1177_pp0_iter4_reg & ap_const_lv1_0) & tmp_3_reg_1213) & ap_const_lv2_0);
    and_ln309_1_fu_1019_p2 <= (xor_ln309_fu_1014_p2 and icmp_ln309_1_fu_918_p2);
    and_ln309_2_fu_1036_p2 <= (xor_ln18_1_fu_1031_p2 and or_ln309_1_fu_1025_p2);
    and_ln309_3_fu_1056_p2 <= (xor_ln309_1_fu_1050_p2 and icmp_ln309_reg_1148_pp0_iter4_reg);
    and_ln309_4_fu_1078_p2 <= (xor_ln18_1_fu_1031_p2 and or_ln309_3_fu_1072_p2);
    and_ln309_5_fu_1084_p2 <= (icmp_ln326_fu_944_p2 and and_ln309_4_fu_1078_p2);
    and_ln309_fu_1009_p2 <= (or_ln309_fu_924_p2 and icmp_ln309_reg_1148_pp0_iter4_reg);
    and_ln_fu_563_p3 <= (tmp_1_fu_553_p4 & ap_const_lv1_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to4)
    begin
        if (((ap_idle_pp0_0to4 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        ap_const_lv64_0 when (and_ln309_5_fu_1084_p2(0) = '1') else 
        select_ln309_fu_1042_p3;
    ashr_ln229_fu_390_p2 <= std_logic_vector(shift_right(signed(sext_ln227_fu_352_p1),to_integer(unsigned('0' & zext_ln229_fu_386_p1(31-1 downto 0)))));
    ashr_ln230_fu_430_p2 <= std_logic_vector(shift_right(signed(m_fix_l_fu_410_p4),to_integer(unsigned('0' & zext_ln230_fu_420_p1(31-1 downto 0)))));
    bitcast_ln497_fu_998_p1 <= t_fu_988_p4;
    data_fu_270_p1 <= x;
    e_frac_1_fu_330_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(zext_ln221_fu_326_p1));
    e_frac_fu_318_p3 <= (ap_const_lv1_1 & es_sig_fu_292_p1);
    es_exp_fu_282_p4 <= data_fu_270_p1(62 downto 52);
    es_sig_fu_292_p1 <= data_fu_270_p1(52 - 1 downto 0);
    es_sign_fu_274_p3 <= data_fu_270_p1(63 downto 63);
    exp_Z1P_m_1_fu_834_p4 <= exp_Z1P_m_1_l_fu_828_p2(51 downto 2);
    exp_Z1P_m_1_l_fu_828_p2 <= std_logic_vector(unsigned(zext_ln145_1_fu_825_p1) + unsigned(zext_ln145_fu_821_p1));
    exp_Z1_hi_fu_844_p4 <= table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_q0(57 downto 8);
    exp_Z2P_m_1_fu_709_p2 <= std_logic_vector(unsigned(zext_ln130_fu_705_p1) + unsigned(zext_ln120_fu_671_p1));
    exp_Z2_m_1_fu_725_p4 <= ((Z2_reg_1177 & ap_const_lv1_0) & tmp_3_fu_715_p4);
    exp_Z3_m_1_fu_662_p4 <= ((Z3_reg_1183 & ap_const_lv9_0) & table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0);
    exp_Z4_m_1_fu_656_p2 <= std_logic_vector(unsigned(zext_ln115_fu_649_p1) + unsigned(zext_ln115_1_fu_652_p1));
    f_Z4_fu_639_p4 <= table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q1(25 downto 16);

    grp_fu_1098_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_1098_ce <= ap_const_logic_1;
        else 
            grp_fu_1098_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1098_p1 <= ap_const_lv31_5C55(15 - 1 downto 0);
    icmp_ln18_1_fu_302_p2 <= "1" when (es_sig_fu_292_p1 = ap_const_lv52_0) else "0";
    icmp_ln18_fu_296_p2 <= "1" when (es_exp_fu_282_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln243_fu_520_p2 <= "1" when (trunc_ln243_fu_517_p1 = ap_const_lv18_0) else "0";
    icmp_ln309_1_fu_918_p2 <= "1" when (signed(tmp_10_fu_908_p4) > signed(ap_const_lv3_0)) else "0";
    icmp_ln309_2_fu_484_p2 <= "0" when (shl_ln2_fu_476_p3 = sext_ln227_fu_352_p1) else "1";
    icmp_ln309_fu_462_p2 <= "1" when (signed(m_exp_fu_312_p2) > signed(ap_const_lv12_0)) else "0";
    icmp_ln326_fu_944_p2 <= "1" when (signed(r_exp_2_fu_901_p3) < signed(ap_const_lv13_1C02)) else "0";
    m_diff_fu_571_p2 <= std_logic_vector(unsigned(trunc_ln255_reg_1143_pp0_iter2_reg) - unsigned(and_ln_fu_563_p3));
    m_exp_fu_312_p2 <= std_logic_vector(unsigned(zext_ln486_fu_308_p1) + unsigned(ap_const_lv12_C01));
    m_fix_fu_402_p3 <= 
        ashr_ln229_fu_390_p2 when (tmp_fu_356_p3(0) = '1') else 
        shl_ln229_fu_396_p2;
    m_fix_hi_fu_436_p4 <= m_fix_fu_402_p3(70 downto 55);
    m_fix_l_fu_410_p4 <= m_fix_fu_402_p3(70 downto 7);
    m_frac_l_fu_344_p3 <= (select_ln224_fu_336_p3 & ap_const_lv7_0);
    mul_ln123_fu_258_p0 <= mul_ln123_fu_258_p00(43 - 1 downto 0);
    mul_ln123_fu_258_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z3_m_1_fu_662_p4),79));
    mul_ln123_fu_258_p1 <= mul_ln123_fu_258_p10(36 - 1 downto 0);
    mul_ln123_fu_258_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z4_m_1_fu_656_p2),79));
    mul_ln142_fu_262_p0 <= mul_ln142_fu_262_p00(49 - 1 downto 0);
    mul_ln142_fu_262_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z2_m_1_fu_725_p4),93));
    mul_ln142_fu_262_p1 <= mul_ln142_fu_262_p10(44 - 1 downto 0);
    mul_ln142_fu_262_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z2P_m_1_fu_709_p2),93));
    mul_ln297_fu_266_p0 <= mul_ln297_fu_266_p00(50 - 1 downto 0);
    mul_ln297_fu_266_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z1P_m_1_fu_834_p4),100));
    mul_ln297_fu_266_p1 <= mul_ln297_fu_266_p10(50 - 1 downto 0);
    mul_ln297_fu_266_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z1_hi_fu_844_p4),100));
    or_ln185_fu_797_p2 <= (and_ln18_fu_784_p2 or and_ln182_fu_774_p2);
    or_ln309_1_fu_1025_p2 <= (and_ln309_fu_1009_p2 or and_ln309_1_fu_1019_p2);
    or_ln309_2_fu_1061_p2 <= (icmp_ln309_reg_1148_pp0_iter4_reg or icmp_ln309_1_fu_918_p2);
    or_ln309_3_fu_1072_p2 <= (xor_ln309_2_fu_1066_p2 or and_ln309_3_fu_1056_p2);
    or_ln309_fu_924_p2 <= (icmp_ln309_2_reg_1156_pp0_iter4_reg or icmp_ln309_1_fu_918_p2);
    out_exp_fu_954_p2 <= std_logic_vector(unsigned(trunc_ln336_fu_950_p1) + unsigned(ap_const_lv11_3FF));
    r_exp_1_fu_896_p2 <= std_logic_vector(signed(r_exp_reg_1166_pp0_iter4_reg) + signed(ap_const_lv13_1FFF));
    r_exp_2_fu_901_p3 <= 
        r_exp_reg_1166_pp0_iter4_reg when (tmp_9_fu_888_p3(0) = '1') else 
        r_exp_1_fu_896_p2;
    r_exp_fu_540_p3 <= 
        select_ln243_fu_532_p3 when (tmp_8_fu_510_p3(0) = '1') else 
        tmp_7_cast_fu_501_p4;
    select_ln185_fu_803_p3 <= 
        select_ln18_fu_789_p3 when (or_ln185_fu_797_p2(0) = '1') else 
        ap_const_lv64_0;
    select_ln18_1_fu_1002_p3 <= 
        select_ln185_fu_803_p3 when (icmp_ln18_reg_1114_pp0_iter4_reg(0) = '1') else 
        bitcast_ln497_fu_998_p1;
    select_ln18_fu_789_p3 <= 
        ap_const_lv64_7FFFFFFFFFFFFFFF when (and_ln18_fu_784_p2(0) = '1') else 
        ap_const_lv64_7FF0000000000000;
    select_ln224_fu_336_p3 <= 
        e_frac_1_fu_330_p2 when (es_sign_fu_274_p3(0) = '1') else 
        zext_ln221_fu_326_p1;
    select_ln229_fu_374_p3 <= 
        sext_ln229_fu_370_p1 when (tmp_fu_356_p3(0) = '1') else 
        m_exp_fu_312_p2;
    select_ln230_fu_468_p3 <= 
        shl_ln230_fu_424_p2 when (tmp_fu_356_p3(0) = '1') else 
        ashr_ln230_fu_430_p2;
    select_ln243_fu_532_p3 <= 
        tmp_7_cast_fu_501_p4 when (icmp_ln243_fu_520_p2(0) = '1') else 
        add_ln243_1_fu_526_p2;
    select_ln303_fu_980_p3 <= 
        tmp_4_fu_960_p4 when (tmp_9_fu_888_p3(0) = '1') else 
        tmp_5_fu_970_p4;
    select_ln309_fu_1042_p3 <= 
        select_ln310_fu_936_p3 when (and_ln309_2_fu_1036_p2(0) = '1') else 
        select_ln18_1_fu_1002_p3;
    select_ln310_fu_936_p3 <= 
        ap_const_lv64_0 when (tmp_11_fu_929_p3(0) = '1') else 
        ap_const_lv64_7FF0000000000000;
        sext_ln227_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(m_frac_l_fu_344_p3),71));

        sext_ln229_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln229_fu_374_p3),32));

        sext_ln229_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln229_fu_364_p2),12));

    shl_ln1_fu_870_p3 <= (add_ln297_fu_854_p2 & ap_const_lv49_0);
    shl_ln229_fu_396_p2 <= std_logic_vector(shift_left(unsigned(sext_ln227_fu_352_p1),to_integer(unsigned('0' & zext_ln229_fu_386_p1(31-1 downto 0)))));
    shl_ln230_fu_424_p2 <= std_logic_vector(shift_left(unsigned(m_fix_l_fu_410_p4),to_integer(unsigned('0' & zext_ln230_fu_420_p1(31-1 downto 0)))));
    shl_ln2_fu_476_p3 <= (select_ln230_fu_468_p3 & ap_const_lv7_0);
    shl_ln_fu_490_p3 <= (tmp_6_reg_1133_pp0_iter1_reg & ap_const_lv18_20000);
    sub_ln229_fu_364_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(es_exp_fu_282_p4));
    t_fu_988_p4 <= ((ap_const_lv1_0 & out_exp_fu_954_p2) & select_ln303_fu_980_p3);
    table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_address0 <= zext_ln292_fu_635_p1(8 - 1 downto 0);

    table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_ce0 <= ap_const_logic_1;
        else 
            table_exp_Z1_ap_ufixed_58_1_ap_q_mode_5_ap_o_mode_3_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address0 <= zext_ln138_fu_630_p1(8 - 1 downto 0);

    table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0 <= ap_const_logic_1;
        else 
            table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address0 <= zext_ln119_fu_625_p1(8 - 1 downto 0);
    table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_address1 <= zext_ln114_fu_620_p1(8 - 1 downto 0);

    table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0 <= ap_const_logic_1;
        else 
            table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_ce, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce))) then 
            table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce1 <= ap_const_logic_1;
        else 
            table_f_Z3_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_fu_908_p4 <= r_exp_2_fu_901_p3(12 downto 10);
    tmp_11_fu_929_p3 <= select_ln224_reg_1128_pp0_iter4_reg(53 downto 53);
    tmp_1_fu_553_p4 <= mul_ln249_fu_253_p2(70 downto 13);
    tmp_2_fu_685_p4 <= mul_ln123_fu_258_p2(78 downto 59);
    tmp_3_fu_715_p4 <= table_f_Z2_ap_ufixed_59_0_ap_q_mode_5_ap_o_mode_3_0_array_q0(41 downto 2);
    tmp_4_fu_960_p4 <= add_ln297_1_fu_882_p2(105 downto 54);
    tmp_5_fu_970_p4 <= add_ln297_1_fu_882_p2(104 downto 53);
    tmp_7_cast_fu_501_p4 <= grp_fu_1098_p3(30 downto 18);
    tmp_7_fu_744_p4 <= mul_ln142_fu_262_p2(92 downto 57);
    tmp_8_fu_510_p3 <= grp_fu_1098_p3(30 downto 30);
    tmp_9_fu_888_p3 <= add_ln297_1_fu_882_p2(106 downto 106);
    tmp_fu_356_p3 <= m_exp_fu_312_p2(11 downto 11);
    trunc_ln243_fu_517_p1 <= grp_fu_1098_p3(18 - 1 downto 0);
    trunc_ln255_fu_458_p1 <= m_fix_fu_402_p3(59 - 1 downto 0);
    trunc_ln336_fu_950_p1 <= r_exp_2_fu_901_p3(11 - 1 downto 0);
    xor_ln182_fu_764_p2 <= (es_sign_reg_1109_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln18_1_fu_1031_p2 <= (icmp_ln18_reg_1114_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln18_fu_779_p2 <= (icmp_ln18_1_reg_1122_pp0_iter4_reg xor ap_const_lv1_1);
    xor_ln309_1_fu_1050_p2 <= (or_ln309_fu_924_p2 xor ap_const_lv1_1);
    xor_ln309_2_fu_1066_p2 <= (or_ln309_2_fu_1061_p2 xor ap_const_lv1_1);
    xor_ln309_fu_1014_p2 <= (icmp_ln309_reg_1148_pp0_iter4_reg xor ap_const_lv1_1);
    zext_ln114_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Z4_ind_fu_610_p4),64));
    zext_ln115_1_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_Z4_fu_639_p4),36));
    zext_ln115_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Z4_reg_1188),36));
    zext_ln119_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Z3_fu_596_p4),64));
    zext_ln120_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_Z3_m_1_fu_662_p4),44));
    zext_ln130_1_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_685_p4),36));
    zext_ln130_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln130_fu_699_p2),44));
    zext_ln138_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Z2_fu_586_p4),64));
    zext_ln145_1_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln145_reg_1218),52));
    zext_ln145_2_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_744_p4),44));
    zext_ln145_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(and_ln1_fu_811_p5),52));
    zext_ln221_fu_326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_frac_fu_318_p3),54));
    zext_ln229_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln229_1_fu_382_p1),71));
    zext_ln230_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln229_1_fu_382_p1),64));
    zext_ln292_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_diff_hi_reg_1172),64));
    zext_ln297_2_fu_878_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln297_fu_266_p2),107));
    zext_ln486_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(es_exp_fu_282_p4),12));
end behav;
