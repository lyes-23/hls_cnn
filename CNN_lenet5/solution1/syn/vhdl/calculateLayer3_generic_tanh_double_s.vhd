-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateLayer3_generic_tanh_double_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    t_in : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1279_p_din0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1279_p_din1 : OUT STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1279_p_dout0 : IN STD_LOGIC_VECTOR (63 downto 0);
    grp_fu_1279_p_ce : OUT STD_LOGIC );
end;


architecture behav of calculateLayer3_generic_tanh_double_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_BFF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_4036000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000000110110000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv11_3C8 : STD_LOGIC_VECTOR (10 downto 0) := "01111001000";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv11_3E4 : STD_LOGIC_VECTOR (10 downto 0) := "01111100100";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_3E5 : STD_LOGIC_VECTOR (10 downto 0) := "01111100101";
    constant ap_const_lv64_7FFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "0111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_113_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_123 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln36_reg_365 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_predicate_pred122_state113 : BOOLEAN;
    signal ap_predicate_pred136_state113 : BOOLEAN;
    signal din_sign_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal din_sign_reg_342_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_sign_reg_342_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal din_exp_fu_141_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal din_exp_reg_347 : STD_LOGIC_VECTOR (10 downto 0);
    signal t_fu_159_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal t_reg_352 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_fu_167_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal abst_in_reg_357 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln36_fu_173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_365_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_369_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln46_reg_373_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_377_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_382_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_386_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln55_fu_219_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_reg_396 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal x_reg_401 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal x_1_reg_406 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal x_3_fu_224_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal x_3_reg_411 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal and_ln9_1_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_418 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_418_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_418_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_1_reg_418_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_422_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_422_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_reg_422_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal resultf_reg_426 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_exp_generic_double_s_fu_89_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_reg_431 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_i_reg_436 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal add2_reg_441 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln66_1_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal resultf_2_reg_451 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln38_fu_314_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_exp_generic_double_s_fu_89_ap_start : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_done : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_idle : STD_LOGIC;
    signal grp_exp_generic_double_s_fu_89_ap_ready : STD_LOGIC;
    signal ap_phi_reg_pp0_iter0_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_expx_reg_60 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred396_state47 : BOOLEAN;
    signal ap_phi_mux_resultf_3_phi_fu_76_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter0_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter1_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter2_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter3_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter4_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter5_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter6_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter7_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter8_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter9_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter10_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter11_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_reg_pp0_iter12_resultf_3_reg_72 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_exp_generic_double_s_fu_89_ap_start_reg : STD_LOGIC := '0';
    signal ap_predicate_op184_call_state11_state10 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_100_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_113_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_predicate_pred636_state55 : BOOLEAN;
    signal ap_predicate_pred641_state55 : BOOLEAN;
    signal grp_fu_118_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_fu_129_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln479_fu_155_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal din_sig_fu_151_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal icmp_ln46_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_fu_191_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_fu_214_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_1_fu_229_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xs_exp_1_fu_241_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln9_fu_251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_1_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln9_fu_263_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xs_sign_fu_233_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln66_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln66_fu_303_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_fu_321_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln83_fu_325_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln83_1_fu_331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_100_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage9_00001 : BOOLEAN;
    signal ap_predicate_pred786_state40 : BOOLEAN;
    signal ap_block_pp0_stage7_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage3_00001 : BOOLEAN;
    signal ap_predicate_pred466_state114 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0_0to11 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to12 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_350 : BOOLEAN;
    signal ap_condition_627 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component calculateLayer3_exp_generic_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dadddsub_64ns_64ns_64_7_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dmul_64ns_64ns_64_7_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_ddiv_64ns_64ns_64_59_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer3_dcmp_64ns_64ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_exp_generic_double_s_fu_89 : component calculateLayer3_exp_generic_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_generic_double_s_fu_89_ap_start,
        ap_done => grp_exp_generic_double_s_fu_89_ap_done,
        ap_idle => grp_exp_generic_double_s_fu_89_ap_idle,
        ap_ready => grp_exp_generic_double_s_fu_89_ap_ready,
        x => x_3_reg_411,
        ap_return => grp_exp_generic_double_s_fu_89_ap_return);

    dadddsub_64ns_64ns_64_7_full_dsp_1_U15 : component calculateLayer3_dadddsub_64ns_64ns_64_7_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_100_p0,
        din1 => grp_fu_100_p1,
        opcode => grp_fu_100_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_100_p2);

    ddiv_64ns_64ns_64_59_no_dsp_1_U17 : component calculateLayer3_ddiv_64ns_64ns_64_59_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 59,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_113_p0,
        din1 => add2_reg_441,
        ce => ap_const_logic_1,
        dout => grp_fu_113_p2);

    dcmp_64ns_64ns_1_2_no_dsp_1_U18 : component calculateLayer3_dcmp_64ns_64ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_118_p0,
        din1 => ap_const_lv64_4036000000000000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_118_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_generic_double_s_fu_89_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_predicate_op184_call_state11_state10 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                    grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_generic_double_s_fu_89_ap_ready = ap_const_logic_1)) then 
                    grp_exp_generic_double_s_fu_89_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter11_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_predicate_pred136_state113 = ap_const_boolean_1))) then 
                ap_phi_reg_pp0_iter11_resultf_3_reg_72 <= grp_fu_113_p2;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                ap_phi_reg_pp0_iter11_resultf_3_reg_72 <= ap_phi_reg_pp0_iter10_resultf_3_reg_72;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter12_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_350)) then
                if ((icmp_ln36_reg_365_pp0_iter11_reg = ap_const_lv1_1)) then 
                    ap_phi_reg_pp0_iter12_resultf_3_reg_72 <= select_ln38_fu_314_p3;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter12_resultf_3_reg_72 <= ap_phi_reg_pp0_iter11_resultf_3_reg_72;
                end if;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_expx_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_lv1_1 = and_ln10_1_fu_293_p2) and (tmp_2_reg_382 = ap_const_lv1_1) and (icmp_ln45_reg_369 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln9_1_fu_269_p2) and (ap_const_lv1_0 = and_ln46_reg_373) and (icmp_ln36_reg_365 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_lv1_1 = and_ln9_1_fu_269_p2) and (tmp_2_reg_382 = ap_const_lv1_1) and (icmp_ln45_reg_369 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373) and (icmp_ln36_reg_365 = ap_const_lv1_0)))) then 
                ap_phi_reg_pp0_iter1_expx_reg_60 <= x_3_fu_224_p3;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                ap_phi_reg_pp0_iter1_expx_reg_60 <= ap_phi_reg_pp0_iter0_expx_reg_60;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter1_resultf_3_reg_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (((icmp_ln45_reg_369_pp0_iter1_reg = ap_const_lv1_1) and (icmp_ln36_reg_365_pp0_iter1_reg = ap_const_lv1_0)) or ((icmp_ln36_reg_365_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln46_reg_373_pp0_iter1_reg))))) then 
                ap_phi_reg_pp0_iter1_resultf_3_reg_72 <= resultf_reg_426;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                ap_phi_reg_pp0_iter1_resultf_3_reg_72 <= ap_phi_reg_pp0_iter0_resultf_3_reg_72;
            end if; 
        end if;
    end process;

    ap_phi_reg_pp0_iter4_expx_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_predicate_pred396_state47 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                ap_phi_reg_pp0_iter4_expx_reg_60 <= sub_i_reg_436;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                ap_phi_reg_pp0_iter4_expx_reg_60 <= ap_phi_reg_pp0_iter3_expx_reg_60;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    abst_in_reg_357(62 downto 0) <= abst_in_fu_167_p1(62 downto 0);
                and_ln46_reg_373 <= and_ln46_fu_197_p2;
                and_ln46_reg_373_pp0_iter10_reg <= and_ln46_reg_373_pp0_iter9_reg;
                and_ln46_reg_373_pp0_iter11_reg <= and_ln46_reg_373_pp0_iter10_reg;
                and_ln46_reg_373_pp0_iter1_reg <= and_ln46_reg_373;
                and_ln46_reg_373_pp0_iter2_reg <= and_ln46_reg_373_pp0_iter1_reg;
                and_ln46_reg_373_pp0_iter3_reg <= and_ln46_reg_373_pp0_iter2_reg;
                and_ln46_reg_373_pp0_iter4_reg <= and_ln46_reg_373_pp0_iter3_reg;
                and_ln46_reg_373_pp0_iter5_reg <= and_ln46_reg_373_pp0_iter4_reg;
                and_ln46_reg_373_pp0_iter6_reg <= and_ln46_reg_373_pp0_iter5_reg;
                and_ln46_reg_373_pp0_iter7_reg <= and_ln46_reg_373_pp0_iter6_reg;
                and_ln46_reg_373_pp0_iter8_reg <= and_ln46_reg_373_pp0_iter7_reg;
                and_ln46_reg_373_pp0_iter9_reg <= and_ln46_reg_373_pp0_iter8_reg;
                din_exp_reg_347 <= data_fu_129_p1(62 downto 52);
                din_sign_reg_342 <= data_fu_129_p1(63 downto 63);
                din_sign_reg_342_pp0_iter10_reg <= din_sign_reg_342_pp0_iter9_reg;
                din_sign_reg_342_pp0_iter11_reg <= din_sign_reg_342_pp0_iter10_reg;
                din_sign_reg_342_pp0_iter1_reg <= din_sign_reg_342;
                din_sign_reg_342_pp0_iter2_reg <= din_sign_reg_342_pp0_iter1_reg;
                din_sign_reg_342_pp0_iter3_reg <= din_sign_reg_342_pp0_iter2_reg;
                din_sign_reg_342_pp0_iter4_reg <= din_sign_reg_342_pp0_iter3_reg;
                din_sign_reg_342_pp0_iter5_reg <= din_sign_reg_342_pp0_iter4_reg;
                din_sign_reg_342_pp0_iter6_reg <= din_sign_reg_342_pp0_iter5_reg;
                din_sign_reg_342_pp0_iter7_reg <= din_sign_reg_342_pp0_iter6_reg;
                din_sign_reg_342_pp0_iter8_reg <= din_sign_reg_342_pp0_iter7_reg;
                din_sign_reg_342_pp0_iter9_reg <= din_sign_reg_342_pp0_iter8_reg;
                icmp_ln36_reg_365 <= icmp_ln36_fu_173_p2;
                icmp_ln36_reg_365_pp0_iter10_reg <= icmp_ln36_reg_365_pp0_iter9_reg;
                icmp_ln36_reg_365_pp0_iter11_reg <= icmp_ln36_reg_365_pp0_iter10_reg;
                icmp_ln36_reg_365_pp0_iter1_reg <= icmp_ln36_reg_365;
                icmp_ln36_reg_365_pp0_iter2_reg <= icmp_ln36_reg_365_pp0_iter1_reg;
                icmp_ln36_reg_365_pp0_iter3_reg <= icmp_ln36_reg_365_pp0_iter2_reg;
                icmp_ln36_reg_365_pp0_iter4_reg <= icmp_ln36_reg_365_pp0_iter3_reg;
                icmp_ln36_reg_365_pp0_iter5_reg <= icmp_ln36_reg_365_pp0_iter4_reg;
                icmp_ln36_reg_365_pp0_iter6_reg <= icmp_ln36_reg_365_pp0_iter5_reg;
                icmp_ln36_reg_365_pp0_iter7_reg <= icmp_ln36_reg_365_pp0_iter6_reg;
                icmp_ln36_reg_365_pp0_iter8_reg <= icmp_ln36_reg_365_pp0_iter7_reg;
                icmp_ln36_reg_365_pp0_iter9_reg <= icmp_ln36_reg_365_pp0_iter8_reg;
                icmp_ln38_reg_377 <= icmp_ln38_fu_203_p2;
                icmp_ln38_reg_377_pp0_iter10_reg <= icmp_ln38_reg_377_pp0_iter9_reg;
                icmp_ln38_reg_377_pp0_iter11_reg <= icmp_ln38_reg_377_pp0_iter10_reg;
                icmp_ln38_reg_377_pp0_iter1_reg <= icmp_ln38_reg_377;
                icmp_ln38_reg_377_pp0_iter2_reg <= icmp_ln38_reg_377_pp0_iter1_reg;
                icmp_ln38_reg_377_pp0_iter3_reg <= icmp_ln38_reg_377_pp0_iter2_reg;
                icmp_ln38_reg_377_pp0_iter4_reg <= icmp_ln38_reg_377_pp0_iter3_reg;
                icmp_ln38_reg_377_pp0_iter5_reg <= icmp_ln38_reg_377_pp0_iter4_reg;
                icmp_ln38_reg_377_pp0_iter6_reg <= icmp_ln38_reg_377_pp0_iter5_reg;
                icmp_ln38_reg_377_pp0_iter7_reg <= icmp_ln38_reg_377_pp0_iter6_reg;
                icmp_ln38_reg_377_pp0_iter8_reg <= icmp_ln38_reg_377_pp0_iter7_reg;
                icmp_ln38_reg_377_pp0_iter9_reg <= icmp_ln38_reg_377_pp0_iter8_reg;
                icmp_ln45_reg_369 <= icmp_ln45_fu_179_p2;
                icmp_ln45_reg_369_pp0_iter10_reg <= icmp_ln45_reg_369_pp0_iter9_reg;
                icmp_ln45_reg_369_pp0_iter11_reg <= icmp_ln45_reg_369_pp0_iter10_reg;
                icmp_ln45_reg_369_pp0_iter1_reg <= icmp_ln45_reg_369;
                icmp_ln45_reg_369_pp0_iter2_reg <= icmp_ln45_reg_369_pp0_iter1_reg;
                icmp_ln45_reg_369_pp0_iter3_reg <= icmp_ln45_reg_369_pp0_iter2_reg;
                icmp_ln45_reg_369_pp0_iter4_reg <= icmp_ln45_reg_369_pp0_iter3_reg;
                icmp_ln45_reg_369_pp0_iter5_reg <= icmp_ln45_reg_369_pp0_iter4_reg;
                icmp_ln45_reg_369_pp0_iter6_reg <= icmp_ln45_reg_369_pp0_iter5_reg;
                icmp_ln45_reg_369_pp0_iter7_reg <= icmp_ln45_reg_369_pp0_iter6_reg;
                icmp_ln45_reg_369_pp0_iter8_reg <= icmp_ln45_reg_369_pp0_iter7_reg;
                icmp_ln45_reg_369_pp0_iter9_reg <= icmp_ln45_reg_369_pp0_iter8_reg;
                    t_reg_352(62 downto 0) <= t_fu_159_p3(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                add2_reg_441 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                add_reg_396 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                and_ln10_1_reg_422 <= and_ln10_1_fu_293_p2;
                and_ln10_1_reg_422_pp0_iter1_reg <= and_ln10_1_reg_422;
                and_ln10_1_reg_422_pp0_iter2_reg <= and_ln10_1_reg_422_pp0_iter1_reg;
                and_ln10_1_reg_422_pp0_iter3_reg <= and_ln10_1_reg_422_pp0_iter2_reg;
                and_ln9_1_reg_418 <= and_ln9_1_fu_269_p2;
                and_ln9_1_reg_418_pp0_iter1_reg <= and_ln9_1_reg_418;
                and_ln9_1_reg_418_pp0_iter2_reg <= and_ln9_1_reg_418_pp0_iter1_reg;
                and_ln9_1_reg_418_pp0_iter3_reg <= and_ln9_1_reg_418_pp0_iter2_reg;
                x_3_reg_411 <= x_3_fu_224_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter10_resultf_3_reg_72 <= ap_phi_reg_pp0_iter9_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter2_expx_reg_60 <= ap_phi_reg_pp0_iter1_expx_reg_60;
                ap_phi_reg_pp0_iter2_resultf_3_reg_72 <= ap_phi_reg_pp0_iter1_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter3_expx_reg_60 <= ap_phi_reg_pp0_iter2_expx_reg_60;
                ap_phi_reg_pp0_iter3_resultf_3_reg_72 <= ap_phi_reg_pp0_iter2_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter4_resultf_3_reg_72 <= ap_phi_reg_pp0_iter3_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter5_resultf_3_reg_72 <= ap_phi_reg_pp0_iter4_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter6_resultf_3_reg_72 <= ap_phi_reg_pp0_iter5_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter7_resultf_3_reg_72 <= ap_phi_reg_pp0_iter6_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter8_resultf_3_reg_72 <= ap_phi_reg_pp0_iter7_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                ap_phi_reg_pp0_iter9_resultf_3_reg_72 <= ap_phi_reg_pp0_iter8_resultf_3_reg_72;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_predicate_pred122_state113 <= ((icmp_ln54_reg_386_pp0_iter10_reg = ap_const_lv1_0) and (tmp_2_reg_382_pp0_iter10_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter11_reg) and (icmp_ln36_reg_365_pp0_iter11_reg = ap_const_lv1_0));
                    ap_predicate_pred136_state113 <= ((icmp_ln54_reg_386_pp0_iter10_reg = ap_const_lv1_1) and (tmp_2_reg_382_pp0_iter10_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter11_reg) and (icmp_ln36_reg_365_pp0_iter11_reg = ap_const_lv1_0));
                icmp_ln54_reg_386 <= icmp_ln54_fu_209_p2;
                icmp_ln54_reg_386_pp0_iter10_reg <= icmp_ln54_reg_386_pp0_iter9_reg;
                icmp_ln54_reg_386_pp0_iter11_reg <= icmp_ln54_reg_386_pp0_iter10_reg;
                icmp_ln54_reg_386_pp0_iter1_reg <= icmp_ln54_reg_386;
                icmp_ln54_reg_386_pp0_iter2_reg <= icmp_ln54_reg_386_pp0_iter1_reg;
                icmp_ln54_reg_386_pp0_iter3_reg <= icmp_ln54_reg_386_pp0_iter2_reg;
                icmp_ln54_reg_386_pp0_iter4_reg <= icmp_ln54_reg_386_pp0_iter3_reg;
                icmp_ln54_reg_386_pp0_iter5_reg <= icmp_ln54_reg_386_pp0_iter4_reg;
                icmp_ln54_reg_386_pp0_iter6_reg <= icmp_ln54_reg_386_pp0_iter5_reg;
                icmp_ln54_reg_386_pp0_iter7_reg <= icmp_ln54_reg_386_pp0_iter6_reg;
                icmp_ln54_reg_386_pp0_iter8_reg <= icmp_ln54_reg_386_pp0_iter7_reg;
                icmp_ln54_reg_386_pp0_iter9_reg <= icmp_ln54_reg_386_pp0_iter8_reg;
                tmp_2_reg_382 <= grp_fu_118_p2;
                tmp_2_reg_382_pp0_iter10_reg <= tmp_2_reg_382_pp0_iter9_reg;
                tmp_2_reg_382_pp0_iter11_reg <= tmp_2_reg_382_pp0_iter10_reg;
                tmp_2_reg_382_pp0_iter1_reg <= tmp_2_reg_382;
                tmp_2_reg_382_pp0_iter2_reg <= tmp_2_reg_382_pp0_iter1_reg;
                tmp_2_reg_382_pp0_iter3_reg <= tmp_2_reg_382_pp0_iter2_reg;
                tmp_2_reg_382_pp0_iter4_reg <= tmp_2_reg_382_pp0_iter3_reg;
                tmp_2_reg_382_pp0_iter5_reg <= tmp_2_reg_382_pp0_iter4_reg;
                tmp_2_reg_382_pp0_iter6_reg <= tmp_2_reg_382_pp0_iter5_reg;
                tmp_2_reg_382_pp0_iter7_reg <= tmp_2_reg_382_pp0_iter6_reg;
                tmp_2_reg_382_pp0_iter8_reg <= tmp_2_reg_382_pp0_iter7_reg;
                tmp_2_reg_382_pp0_iter9_reg <= tmp_2_reg_382_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                    ap_predicate_pred396_state47 <= ((tmp_2_reg_382_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln36_reg_365_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_reg_422_pp0_iter3_reg) and (ap_const_lv1_0 = and_ln9_1_reg_418_pp0_iter3_reg) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter4_reg));
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_predicate_pred466_state114 <= ((icmp_ln54_reg_386_pp0_iter11_reg = ap_const_lv1_0) and (tmp_2_reg_382_pp0_iter11_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter11_reg) and (icmp_ln36_reg_365_pp0_iter11_reg = ap_const_lv1_0));
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_predicate_pred636_state55 <= ((icmp_ln54_reg_386_pp0_iter5_reg = ap_const_lv1_0) and (tmp_2_reg_382_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln36_reg_365_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter5_reg));
                    ap_predicate_pred641_state55 <= ((icmp_ln54_reg_386_pp0_iter5_reg = ap_const_lv1_1) and (tmp_2_reg_382_pp0_iter5_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter5_reg = ap_const_lv1_0) and (icmp_ln36_reg_365_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter5_reg));
                resultf_reg_426 <= grp_fu_1279_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                    ap_predicate_pred786_state40 <= ((tmp_2_reg_382_pp0_iter3_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter3_reg = ap_const_lv1_0) and (icmp_ln36_reg_365_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_reg_422_pp0_iter2_reg) and (ap_const_lv1_0 = and_ln9_1_reg_418_pp0_iter2_reg) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter3_reg));
                tmp_4_reg_431 <= grp_exp_generic_double_s_fu_89_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                expx_reg_60 <= ap_phi_reg_pp0_iter4_expx_reg_60;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_predicate_pred136_state113 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_predicate_pred122_state113 = ap_const_boolean_1)))) then
                reg_123 <= grp_fu_113_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                resultf_2_reg_451 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                sub_i_reg_436 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                x_1_reg_406 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                x_reg_401 <= grp_fu_100_p2;
            end if;
        end if;
    end process;
    t_reg_352(63) <= '0';
    abst_in_reg_357(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage9_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to12, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to12 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) and (ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    abst_in_fu_167_p1 <= t_fu_159_p3;
    and_ln10_1_fu_293_p2 <= (icmp_ln10_fu_281_p2 and and_ln10_fu_287_p2);
    and_ln10_fu_287_p2 <= (xor_ln10_fu_275_p2 and icmp_ln9_1_fu_257_p2);
    and_ln46_fu_197_p2 <= (icmp_ln46_fu_185_p2 and icmp_ln46_1_fu_191_p2);
    and_ln9_1_fu_269_p2 <= (xs_sign_fu_233_p3 and and_ln9_fu_263_p2);
    and_ln9_fu_263_p2 <= (icmp_ln9_fu_251_p2 and icmp_ln9_1_fu_257_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_350_assign_proc : process(ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001)
    begin
                ap_condition_350 <= ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9));
    end process;


    ap_condition_627_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4)
    begin
                ap_condition_627 <= ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to11_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to11 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to12_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to12 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_resultf_3_phi_fu_76_p10_assign_proc : process(icmp_ln36_reg_365_pp0_iter11_reg, icmp_ln45_reg_369_pp0_iter11_reg, and_ln46_reg_373_pp0_iter11_reg, tmp_2_reg_382_pp0_iter11_reg, icmp_ln54_reg_386_pp0_iter11_reg, resultf_2_reg_451, ap_phi_reg_pp0_iter12_resultf_3_reg_72)
    begin
        if (((icmp_ln54_reg_386_pp0_iter11_reg = ap_const_lv1_0) and (tmp_2_reg_382_pp0_iter11_reg = ap_const_lv1_1) and (icmp_ln45_reg_369_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter11_reg) and (icmp_ln36_reg_365_pp0_iter11_reg = ap_const_lv1_0))) then 
            ap_phi_mux_resultf_3_phi_fu_76_p10 <= resultf_2_reg_451;
        else 
            ap_phi_mux_resultf_3_phi_fu_76_p10 <= ap_phi_reg_pp0_iter12_resultf_3_reg_72;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_expx_reg_60 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    ap_phi_reg_pp0_iter0_resultf_3_reg_72 <= ap_const_lv64_3FF0000000000000;

    ap_predicate_op184_call_state11_state10_assign_proc : process(icmp_ln36_reg_365, icmp_ln45_reg_369, and_ln46_reg_373, tmp_2_reg_382, and_ln9_1_fu_269_p2, and_ln10_1_fu_293_p2)
    begin
                ap_predicate_op184_call_state11_state10 <= ((tmp_2_reg_382 = ap_const_lv1_1) and (icmp_ln45_reg_369 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_1_fu_293_p2) and (ap_const_lv1_0 = and_ln9_1_fu_269_p2) and (ap_const_lv1_0 = and_ln46_reg_373) and (icmp_ln36_reg_365 = ap_const_lv1_0));
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to11)
    begin
        if (((ap_idle_pp0_0to11 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        bitcast_ln83_1_fu_331_p1 when (din_sign_reg_342_pp0_iter11_reg(0) = '1') else 
        ap_phi_mux_resultf_3_phi_fu_76_p10;
    bitcast_ln55_fu_219_p1 <= or_ln55_fu_214_p2;
    bitcast_ln66_1_fu_309_p1 <= xor_ln66_fu_303_p2;
    bitcast_ln66_fu_299_p1 <= expx_reg_60;
    bitcast_ln83_1_fu_331_p1 <= xor_ln83_fu_325_p2;
    bitcast_ln83_fu_321_p1 <= ap_phi_mux_resultf_3_phi_fu_76_p10;
    data_1_fu_229_p1 <= x_3_fu_224_p3;
    data_fu_129_p1 <= t_in;
    din_exp_fu_141_p4 <= data_fu_129_p1(62 downto 52);
    din_sig_fu_151_p1 <= data_fu_129_p1(52 - 1 downto 0);
    grp_exp_generic_double_s_fu_89_ap_start <= grp_exp_generic_double_s_fu_89_ap_start_reg;

    grp_fu_100_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage2, icmp_ln36_reg_365, icmp_ln45_reg_369, and_ln46_reg_373, tmp_2_reg_382, icmp_ln54_reg_386, ap_CS_fsm_pp0_stage1, icmp_ln36_fu_173_p2, icmp_ln36_reg_365_pp0_iter4_reg, icmp_ln45_fu_179_p2, icmp_ln45_reg_369_pp0_iter4_reg, and_ln46_fu_197_p2, and_ln46_reg_373_pp0_iter4_reg, grp_fu_118_p2, tmp_2_reg_382_pp0_iter4_reg, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_00001, ap_block_pp0_stage2_00001, ap_block_pp0_stage9_00001, ap_predicate_pred786_state40, ap_block_pp0_stage7_00001, ap_block_pp0_stage1_00001, ap_block_pp0_stage3_00001, ap_predicate_pred466_state114)
    begin
        if ((((ap_predicate_pred466_state114 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_00001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (grp_fu_118_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln45_reg_369 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373) and (icmp_ln36_reg_365 = ap_const_lv1_0)))) then 
            grp_fu_100_opcode <= ap_const_lv2_1;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage7_00001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (tmp_2_reg_382_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (icmp_ln45_reg_369_pp0_iter4_reg = ap_const_lv1_0) and (icmp_ln36_reg_365_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373_pp0_iter4_reg)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_00001) and (ap_predicate_pred786_state40 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln54_reg_386 = ap_const_lv1_0) and (tmp_2_reg_382 = ap_const_lv1_1) and (icmp_ln45_reg_369 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln46_reg_373) and (icmp_ln36_reg_365 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage0) and (((icmp_ln45_fu_179_p2 = ap_const_lv1_1) and (icmp_ln36_fu_173_p2 = ap_const_lv1_0)) or ((icmp_ln36_fu_173_p2 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln46_fu_197_p2)))))) then 
            grp_fu_100_opcode <= ap_const_lv2_0;
        else 
            grp_fu_100_opcode <= "XX";
        end if; 
    end process;


    grp_fu_100_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, abst_in_fu_167_p1, abst_in_reg_357, bitcast_ln55_fu_219_p1, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage3, tmp_4_reg_431, ap_phi_reg_pp0_iter4_expx_reg_60, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage9, ap_block_pp0_stage7, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_100_p0 <= ap_const_lv64_3FF0000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_100_p0 <= ap_phi_reg_pp0_iter4_expx_reg_60;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_100_p0 <= tmp_4_reg_431;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_100_p0 <= abst_in_reg_357;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_100_p0 <= bitcast_ln55_fu_219_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_100_p0 <= abst_in_fu_167_p1;
        else 
            grp_fu_100_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_100_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter11, ap_CS_fsm_pp0_stage9, reg_123, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, abst_in_reg_357, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage9, ap_block_pp0_stage7, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_100_p1 <= reg_123;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_100_p1 <= ap_const_lv64_4000000000000000;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_100_p1 <= ap_const_lv64_BFF0000000000000;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_100_p1 <= abst_in_reg_357;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_100_p1 <= ap_const_lv64_3FF0000000000000;
        else 
            grp_fu_100_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_113_p0_assign_proc : process(bitcast_ln66_1_fu_309_p1, ap_predicate_pred636_state55, ap_predicate_pred641_state55, ap_condition_627)
    begin
        if ((ap_const_boolean_1 = ap_condition_627)) then
            if ((ap_predicate_pred641_state55 = ap_const_boolean_1)) then 
                grp_fu_113_p0 <= bitcast_ln66_1_fu_309_p1;
            elsif ((ap_predicate_pred636_state55 = ap_const_boolean_1)) then 
                grp_fu_113_p0 <= ap_const_lv64_4000000000000000;
            else 
                grp_fu_113_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_113_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_118_p0 <= t_fu_159_p3;
    grp_fu_1279_p_ce <= ap_const_logic_1;
    grp_fu_1279_p_din0 <= abst_in_reg_357;
    grp_fu_1279_p_din1 <= add_reg_396;
    icmp_ln10_fu_281_p2 <= "1" when (unsigned(xs_exp_1_fu_241_p4) < unsigned(ap_const_lv11_3E5)) else "0";
    icmp_ln36_fu_173_p2 <= "1" when (din_exp_fu_141_p4 = ap_const_lv11_7FF) else "0";
    icmp_ln38_fu_203_p2 <= "0" when (din_sig_fu_151_p1 = ap_const_lv52_0) else "1";
    icmp_ln45_fu_179_p2 <= "1" when (unsigned(din_exp_fu_141_p4) < unsigned(ap_const_lv11_3C8)) else "0";
    icmp_ln46_1_fu_191_p2 <= "1" when (din_sig_fu_151_p1 = ap_const_lv52_0) else "0";
    icmp_ln46_fu_185_p2 <= "1" when (din_exp_fu_141_p4 = ap_const_lv11_3C8) else "0";
    icmp_ln54_fu_209_p2 <= "1" when (unsigned(din_exp_reg_347) < unsigned(ap_const_lv11_3FF)) else "0";
    icmp_ln9_1_fu_257_p2 <= "0" when (xs_exp_1_fu_241_p4 = ap_const_lv11_0) else "1";
    icmp_ln9_fu_251_p2 <= "1" when (unsigned(xs_exp_1_fu_241_p4) < unsigned(ap_const_lv11_3E4)) else "0";
    or_ln55_fu_214_p2 <= (t_reg_352 or ap_const_lv64_8000000000000000);
    select_ln38_fu_314_p3 <= 
        ap_const_lv64_7FFFFFFFFFFFFFFF when (icmp_ln38_reg_377_pp0_iter11_reg(0) = '1') else 
        ap_const_lv64_3FF0000000000000;
    t_fu_159_p3 <= (ap_const_lv1_0 & trunc_ln479_fu_155_p1);
    trunc_ln479_fu_155_p1 <= data_fu_129_p1(63 - 1 downto 0);
    x_3_fu_224_p3 <= 
        x_reg_401 when (icmp_ln54_reg_386(0) = '1') else 
        x_1_reg_406;
    xor_ln10_fu_275_p2 <= (xs_sign_fu_233_p3 xor ap_const_lv1_1);
    xor_ln66_fu_303_p2 <= (bitcast_ln66_fu_299_p1 xor ap_const_lv64_8000000000000000);
    xor_ln83_fu_325_p2 <= (bitcast_ln83_fu_321_p1 xor ap_const_lv64_8000000000000000);
    xs_exp_1_fu_241_p4 <= data_1_fu_229_p1(62 downto 52);
    xs_sign_fu_233_p3 <= data_1_fu_229_p1(63 downto 63);
end behav;
