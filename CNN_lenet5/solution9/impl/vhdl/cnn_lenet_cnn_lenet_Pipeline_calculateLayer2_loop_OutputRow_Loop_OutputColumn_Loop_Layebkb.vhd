-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity cnn_lenet_cnn_lenet_Pipeline_calculateLayer2_loop_OutputRow_Loop_OutputColumn_Loop_Layebkb is 
    generic(
             DataWidth     : integer := 32; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 156
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of cnn_lenet_cnn_lenet_Pipeline_calculateLayer2_loop_OutputRow_Loop_OutputColumn_Loop_Layebkb is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "10111110000000111100100110101100", 1 => "10111110100101101010010111010111", 2 => "10111111000100101001110111000111", 3 => "10111110111101001001011101010011", 
    4 => "10111110101010010000010100011000", 5 => "10111110101000000100101011011000", 6 => "00111101011100101110011010100111", 7 => "10111100000111111110000000000101", 
    8 => "00111101100101110010001111101110", 9 => "00111101110101110001000110010100", 10 => "00111101010011001101011101001001", 11 => "10111110111100101010001000011010", 
    12 => "10111110111011100010101110101110", 13 => "10111110100011101101000001001110", 14 => "10111101111110011000011111000110", 15 => "10111110110010010101110111010101", 
    16 => "00111101111101111000001101011010", 17 => "00111110001000000010000111010001", 18 => "00111110001001100010111101011010", 19 => "00111110011001101100001000100111", 
    20 => "10111101000011110111011001100000", 21 => "00111111010010111001100111110110", 22 => "00111111001010110000000011001110", 23 => "00111110110101011100100111100110", 
    24 => "00111111001110101101001011001100", 25 => "00111111000000001111000110110010", 26 => "00111101011011100110011001000101", 27 => "10111110111101101011011110001001", 
    28 => "10111110100100111101100011100000", 29 => "10111110100110101101011111011000", 30 => "10111101001000100101101001101000", 31 => "00111101111110100111011001010011", 
    32 => "10111101010011010000111111101001", 33 => "00111110001000100011101100110110", 34 => "00111101100100000101010110111001", 35 => "00111110110001000110000101010010", 
    36 => "00111111001010001010101101100000", 37 => "00111101111111100011001100100111", 38 => "00111101001011001010010001101110", 39 => "10111110011100111000101111001110", 
    40 => "00111110001100001010010100100111", 41 => "00111111001101111001010010010110", 42 => "00111110010011000010110010100001", 43 => "00111101001110010110000001110100", 
    44 => "10111110101000110001001000001010", 45 => "10111110011110100010100110000100", 46 => "00111110110000000011101101100000", 47 => "10111110101011100010011111100001", 
    48 => "10111110101100101110011111110111", 49 => "10111110000011111000111000111011", 50 => "10111110111011111011001011101110", 51 => "00111101001100110111110110100110", 
    52 => "11000000101001011110011110000010", 53 => "10111100111001110101011110010011", 54 => "10111110101110101000110000110111", 55 => "10111101101110000000011001101100", 
    56 => "00111110110110011001011111000100", 57 => "00111111011010011011010111011001", 58 => "10111110011111100111011110010010", 59 => "00111101001011100111010111111111", 
    60 => "10111100000011111001101100010011", 61 => "00111111000100110100110000101011", 62 => "00111111000101010100101000111100", 63 => "10111110000011100000011101011111", 
    64 => "10111110100110001011110111001011", 65 => "10111011011011000111010000110010", 66 => "00111111101010111101011011010000", 67 => "00111101110010100000000100100110", 
    68 => "10111100011010001000000101011110", 69 => "10111101100011010001011000110011", 70 => "00111111001010011001001101110001", 71 => "00111111011001010011100010001011", 
    72 => "00111110000011110001110000110010", 73 => "10111101010001010010001111110110", 74 => "00111111001001010001011001000100", 75 => "00111111010010010110111100110011", 
    76 => "00111110100011011101000000110001", 77 => "10111110100010100110110001111111", 78 => "01000000101001100101111100011010", 79 => "10111111100111111100010100100110", 
    80 => "10111111000111111011111011001011", 81 => "00111011001011101011100000001111", 82 => "00111110111010101110000001111110", 83 => "00111110110000111101100111101100", 
    84 => "10111110001110111110000100100010", 85 => "10111111011000010110111001111010", 86 => "10111111111000101010111001101101", 87 => "10111111100001000011000001001101", 
    88 => "00111001101101000101101011100110", 89 => "00111110100100010010001110100011", 90 => "00111110010100000101001100011010", 91 => "10111101101000111000011001001101", 
    92 => "10111111100000010100001000111110", 93 => "10111111100110011001101010110111", 94 => "00111100101111001010111110110100", 95 => "00111101110010011100010001010100", 
    96 => "00111110101111010110010010110110", 97 => "00111110011000011100100101110001", 98 => "10111110111100110101101110110100", 99 => "00111110001101101100110010100011", 
    100 => "00111011011100011011001001011111", 101 => "00111101100100010110011001011010", 102 => "00111101010110110010101000101000", 103 => "00111110101011111001101110011001", 
    104 => "10111111000011101001001110001110", 105 => "00111111001111011100010011001010", 106 => "00111110000110110001100001010101", 107 => "10111110010001010110011100010010", 
    108 => "10111110011110011110101110100111", 109 => "00111110100001000111000010000110", 110 => "00111110101100000000110110000000", 111 => "10111101111010101101110001001101", 
    112 => "10111111001100100001011001000000", 113 => "10111101010000111101111111110100", 114 => "00111111000101110011011010001011", 115 => "00111110101001100010110111101000", 
    116 => "00111101110001101101111001110110", 117 => "00111101001111110010101100100100", 118 => "00111111000001011010101011100111", 119 => "00111110101010101110000111001110", 
    120 => "00111101001100101010111000001000", 121 => "00111110111011101100001010001011", 122 => "00111111000111111111100010011000", 123 => "00111110110101010011011101111110", 
    124 => "10111110110000111000011100010110", 125 => "10111110011000010101011110101100", 126 => "10111110010000011001111110000000", 127 => "10111101101010010000000111010010", 
    128 => "10111110100010010101000010111001", 129 => "10111110100001111110001100001000", 130 => "11000000011111011100101110110100", 131 => "10111110110010110101110011100010", 
    132 => "10111101010101011001101000110001", 133 => "10111101101110000101010110010111", 134 => "10111100110010100110000000001011", 135 => "00111110001000110010010111010101", 
    136 => "10111110110001100011111110111100", 137 => "10111111000010111111010001000101", 138 => "10111110111000001010001011001011", 139 => "10111111000111101010000001110111", 
    140 => "10111110101010100100111111101100", 141 => "10111110100101000010011011111110", 142 => "10111110100011011010000010011101", 143 => "10111110000101100101111101010010", 
    144 => "00111110110011110001011010010000", 145 => "00111111011000110000101000101101", 146 => "00111111010110100011100010101000", 147 => "00111111100011010100110010100001", 
    148 => "00111111110001010110000010101111", 149 => "00111111100101100010001010001010", 150 => "00111110101011011111001010101010", 151 => "00111111011010001001011110010110", 
    152 => "00111111000111101000110011011111", 153 => "10111100110010110010100101011111", 154 => "10111110111101111101101100001010", 155 => "10111110110010010010100100000010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

