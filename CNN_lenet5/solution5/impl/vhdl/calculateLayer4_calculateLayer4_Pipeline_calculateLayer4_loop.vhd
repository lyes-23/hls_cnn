-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateLayer4_calculateLayer4_Pipeline_calculateLayer4_loop is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    Layer3_Weights_CPU_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
    Layer3_Weights_CPU_ce0 : OUT STD_LOGIC;
    Layer3_Weights_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_36 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_37 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_38 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_39 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_40 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_41 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_42 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_43 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_44 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_45 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_46 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_47 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_48 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_49 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_50 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_51 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_52 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_53 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_54 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_55 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_56 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_57 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_58 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty_59 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (31 downto 0);
    Layer4_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    Layer4_Neurons_CPU_ce0 : OUT STD_LOGIC;
    Layer4_Neurons_CPU_we0 : OUT STD_LOGIC;
    Layer4_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calculateLayer4_calculateLayer4_Pipeline_calculateLayer4_loop is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_3FE55555571F7693 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111100101010101010101010101010111000111110111011010010011";
    constant ap_const_lv64_3FFB74538EF34D6A : STD_LOGIC_VECTOR (63 downto 0) := "0011111111111011011101000101001110001110111100110100110101101010";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv17_4E3 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100011";
    constant ap_const_lv17_4CA : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001010";
    constant ap_const_lv17_4CB : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001011";
    constant ap_const_lv17_4CC : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001100";
    constant ap_const_lv17_4CD : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001101";
    constant ap_const_lv17_4CE : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001110";
    constant ap_const_lv17_4CF : STD_LOGIC_VECTOR (16 downto 0) := "00000010011001111";
    constant ap_const_lv17_4D0 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010000";
    constant ap_const_lv17_4D1 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010001";
    constant ap_const_lv17_4D2 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010010";
    constant ap_const_lv17_4D3 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010011";
    constant ap_const_lv17_4D4 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010100";
    constant ap_const_lv17_4D5 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010101";
    constant ap_const_lv17_4D6 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010110";
    constant ap_const_lv17_4D7 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011010111";
    constant ap_const_lv17_4D8 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011000";
    constant ap_const_lv17_4D9 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011001";
    constant ap_const_lv17_4DA : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011010";
    constant ap_const_lv17_4DB : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011011";
    constant ap_const_lv17_4DC : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011100";
    constant ap_const_lv17_4DD : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011101";
    constant ap_const_lv17_4DE : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011110";
    constant ap_const_lv17_4DF : STD_LOGIC_VECTOR (16 downto 0) := "00000010011011111";
    constant ap_const_lv17_4E0 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100000";
    constant ap_const_lv17_4E1 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100001";
    constant ap_const_lv17_4E2 : STD_LOGIC_VECTOR (16 downto 0) := "00000010011100010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage25 : signal is "none";
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal icmp_ln21_reg_1192 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage25 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal reg_575 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage20 : signal is "none";
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage21 : signal is "none";
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage24 : signal is "none";
    signal ap_block_pp0_stage24_11001 : BOOLEAN;
    signal ap_block_pp0_stage25_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_559_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_555_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_584 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_594 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal reg_605 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_reg_1187 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1187_pp0_iter1_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1187_pp0_iter2_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1187_pp0_iter3_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1187_pp0_iter4_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1187_pp0_iter5_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal i_1_reg_1187_pp0_iter6_reg : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1192_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1192_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1192_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1192_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_1192_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul_load_reg_1196 : STD_LOGIC_VECTOR (16 downto 0);
    signal bitcast_ln30_fu_670_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_load_2_reg_1245 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_60_fu_695_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_1_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_113_le_reg_1270 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_2_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_222_le_reg_1285 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_3_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_4_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_440_le_reg_1310 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_5_fu_759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_1_le_reg_1325 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_6_fu_774_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_1_1_le_reg_1340 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_7_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_1_2_le_reg_1355 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_8_fu_804_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_1_3_le_reg_1370 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_9_fu_819_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_1_4_le_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_1_4_le_reg_1385_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_10_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_le_reg_1400 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_le_reg_1400_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_11_fu_849_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_1_le_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_1_le_reg_1415_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_12_fu_864_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_2_le_reg_1430 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_2_le_reg_1430_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_13_fu_879_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_3_le_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_3_le_reg_1445_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_14_fu_894_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_4_le_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_2_4_le_reg_1460_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_15_fu_909_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_le_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_le_reg_1475_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_16_fu_924_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_1_le_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_1_le_reg_1490_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_17_fu_939_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_2_le_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_2_le_reg_1505_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_18_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_3_le_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_3_le_reg_1520_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_3_le_reg_1520_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_19_fu_969_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_4_le_reg_1535 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_4_le_reg_1535_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_3_4_le_reg_1535_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_20_fu_984_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_le_reg_1550 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_le_reg_1550_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_le_reg_1550_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_21_fu_999_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_1_le_reg_1565 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_1_le_reg_1565_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_1_le_reg_1565_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_22_fu_1014_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_2_le_reg_1580 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_2_le_reg_1580_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_2_le_reg_1580_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_23_fu_1029_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_3_le_reg_1590 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_3_le_reg_1590_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_3_le_reg_1590_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln30_24_fu_1034_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_4_le_reg_1600 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_4_le_reg_1600_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul24_4_4_le_reg_1600_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal conv_le_reg_1605 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_generic_tanh_double_s_fu_544_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_1610 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal grp_generic_tanh_double_s_fu_544_ap_start : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_544_ap_done : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_544_ap_idle : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_544_ap_ready : STD_LOGIC;
    signal grp_generic_tanh_double_s_fu_544_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage22 : BOOLEAN;
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_block_pp0_stage18 : BOOLEAN;
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_block_pp0_stage20 : BOOLEAN;
    signal ap_block_pp0_stage21 : BOOLEAN;
    signal zext_ln30_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal p_cast2_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln30_1_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln30_2_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln30_3_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln30_4_fu_724_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln30_5_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln30_6_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_7_fu_769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln30_8_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln30_9_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal zext_ln30_10_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal zext_ln30_11_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal zext_ln30_12_fu_844_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal zext_ln30_13_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal zext_ln30_14_fu_874_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal zext_ln30_15_fu_889_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal zext_ln30_16_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal zext_ln30_17_fu_919_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_18_fu_934_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_19_fu_949_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_20_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_21_fu_979_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_22_fu_994_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_23_fu_1009_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage24 : BOOLEAN;
    signal zext_ln30_24_fu_1024_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage25 : BOOLEAN;
    signal zext_ln21_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal phi_mul_fu_160 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    signal next_mul_fu_639_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_phi_mul_load : STD_LOGIC_VECTOR (16 downto 0);
    signal i_fu_164 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal add_ln21_fu_630_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_555_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_555_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_559_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_569_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_569_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln30_fu_645_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_1_fu_675_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_2_fu_685_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_3_fu_704_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_4_fu_719_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_5_fu_734_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_6_fu_749_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_7_fu_764_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_8_fu_779_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_9_fu_794_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_10_fu_809_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_11_fu_824_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_12_fu_839_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_13_fu_854_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_14_fu_869_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_15_fu_884_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_16_fu_899_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_17_fu_914_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_18_fu_929_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_19_fu_944_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_20_fu_959_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_21_fu_974_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_22_fu_989_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_23_fu_1004_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_24_fu_1019_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_563_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage15 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to6 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component calculateLayer4_generic_tanh_double_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer4_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateLayer4_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateLayer4_fptrunc_64ns_32_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateLayer4_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer4_dmul_64ns_64ns_64_4_max_dsp_1_x IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component calculateLayer4_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    grp_generic_tanh_double_s_fu_544 : component calculateLayer4_generic_tanh_double_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_tanh_double_s_fu_544_ap_start,
        ap_done => grp_generic_tanh_double_s_fu_544_ap_done,
        ap_idle => grp_generic_tanh_double_s_fu_544_ap_idle,
        ap_ready => grp_generic_tanh_double_s_fu_544_ap_ready,
        t_in => reg_605,
        ap_return => grp_generic_tanh_double_s_fu_544_ap_return);

    fadd_32ns_32ns_32_4_full_dsp_1_U30 : component calculateLayer4_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_555_p0,
        din1 => grp_fu_555_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_555_p2);

    fmul_32ns_32ns_32_2_max_dsp_1_U31 : component calculateLayer4_fmul_32ns_32ns_32_2_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_559_p0,
        din1 => grp_fu_559_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_559_p2);

    fptrunc_64ns_32_2_no_dsp_1_U32 : component calculateLayer4_fptrunc_64ns_32_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_605,
        ce => ap_const_logic_1,
        dout => grp_fu_563_p1);

    fpext_32ns_64_2_no_dsp_1_U33 : component calculateLayer4_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_599,
        ce => ap_const_logic_1,
        dout => grp_fu_566_p1);

    dmul_64ns_64ns_64_4_max_dsp_1_x_U34 : component calculateLayer4_dmul_64ns_64ns_64_4_max_dsp_1_x
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_569_p0,
        din1 => grp_fu_569_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_569_p2);

    flow_control_loop_pipe_sequential_init_U : component calculateLayer4_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage25,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage25)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_tanh_double_s_fu_544_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_tanh_double_s_fu_544_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                    grp_generic_tanh_double_s_fu_544_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_tanh_double_s_fu_544_ap_ready = ap_const_logic_1)) then 
                    grp_generic_tanh_double_s_fu_544_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage15) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage15) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage15) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage15) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage15) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    i_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_624_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    i_fu_164 <= add_ln21_fu_630_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_164 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    phi_mul_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln21_fu_624_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    phi_mul_fu_160 <= next_mul_fu_639_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    phi_mul_fu_160 <= ap_const_lv17_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                Layer3_Weights_CPU_load_2_reg_1245 <= Layer3_Weights_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                conv_le_reg_1605 <= grp_fu_566_p1;
                mul24_4_4_le_reg_1600_pp0_iter2_reg <= mul24_4_4_le_reg_1600;
                mul24_4_4_le_reg_1600_pp0_iter3_reg <= mul24_4_4_le_reg_1600_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_1_reg_1187 <= ap_sig_allocacmp_i_1;
                i_1_reg_1187_pp0_iter1_reg <= i_1_reg_1187;
                i_1_reg_1187_pp0_iter2_reg <= i_1_reg_1187_pp0_iter1_reg;
                i_1_reg_1187_pp0_iter3_reg <= i_1_reg_1187_pp0_iter2_reg;
                i_1_reg_1187_pp0_iter4_reg <= i_1_reg_1187_pp0_iter3_reg;
                i_1_reg_1187_pp0_iter5_reg <= i_1_reg_1187_pp0_iter4_reg;
                i_1_reg_1187_pp0_iter6_reg <= i_1_reg_1187_pp0_iter5_reg;
                icmp_ln21_reg_1192 <= icmp_ln21_fu_624_p2;
                icmp_ln21_reg_1192_pp0_iter1_reg <= icmp_ln21_reg_1192;
                icmp_ln21_reg_1192_pp0_iter2_reg <= icmp_ln21_reg_1192_pp0_iter1_reg;
                icmp_ln21_reg_1192_pp0_iter3_reg <= icmp_ln21_reg_1192_pp0_iter2_reg;
                icmp_ln21_reg_1192_pp0_iter4_reg <= icmp_ln21_reg_1192_pp0_iter3_reg;
                icmp_ln21_reg_1192_pp0_iter5_reg <= icmp_ln21_reg_1192_pp0_iter4_reg;
                mul24_4_2_le_reg_1580_pp0_iter2_reg <= mul24_4_2_le_reg_1580;
                mul24_4_2_le_reg_1580_pp0_iter3_reg <= mul24_4_2_le_reg_1580_pp0_iter2_reg;
                phi_mul_load_reg_1196 <= ap_sig_allocacmp_phi_mul_load;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul24_113_le_reg_1270 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                mul24_1_1_le_reg_1340 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                mul24_1_2_le_reg_1355 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                mul24_1_3_le_reg_1370 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                mul24_1_4_le_reg_1385 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                mul24_1_4_le_reg_1385_pp0_iter1_reg <= mul24_1_4_le_reg_1385;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                mul24_1_le_reg_1325 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul24_222_le_reg_1285 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                mul24_2_1_le_reg_1415 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                mul24_2_1_le_reg_1415_pp0_iter1_reg <= mul24_2_1_le_reg_1415;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then
                mul24_2_2_le_reg_1430 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then
                mul24_2_2_le_reg_1430_pp0_iter1_reg <= mul24_2_2_le_reg_1430;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then
                mul24_2_3_le_reg_1445 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then
                mul24_2_3_le_reg_1445_pp0_iter1_reg <= mul24_2_3_le_reg_1445;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then
                mul24_2_4_le_reg_1460 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then
                mul24_2_4_le_reg_1460_pp0_iter1_reg <= mul24_2_4_le_reg_1460;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                mul24_2_le_reg_1400 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                mul24_2_le_reg_1400_pp0_iter1_reg <= mul24_2_le_reg_1400;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then
                mul24_3_1_le_reg_1490 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then
                mul24_3_1_le_reg_1490_pp0_iter1_reg <= mul24_3_1_le_reg_1490;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then
                mul24_3_2_le_reg_1505 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then
                mul24_3_2_le_reg_1505_pp0_iter1_reg <= mul24_3_2_le_reg_1505;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then
                mul24_3_3_le_reg_1520 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then
                mul24_3_3_le_reg_1520_pp0_iter1_reg <= mul24_3_3_le_reg_1520;
                mul24_3_3_le_reg_1520_pp0_iter2_reg <= mul24_3_3_le_reg_1520_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then
                mul24_3_4_le_reg_1535 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then
                mul24_3_4_le_reg_1535_pp0_iter1_reg <= mul24_3_4_le_reg_1535;
                mul24_3_4_le_reg_1535_pp0_iter2_reg <= mul24_3_4_le_reg_1535_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then
                mul24_3_le_reg_1475 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then
                mul24_3_le_reg_1475_pp0_iter1_reg <= mul24_3_le_reg_1475;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul24_440_le_reg_1310 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then
                mul24_4_1_le_reg_1565 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then
                mul24_4_1_le_reg_1565_pp0_iter1_reg <= mul24_4_1_le_reg_1565;
                mul24_4_1_le_reg_1565_pp0_iter2_reg <= mul24_4_1_le_reg_1565_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul24_4_2_le_reg_1580 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul24_4_3_le_reg_1590 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul24_4_3_le_reg_1590_pp0_iter2_reg <= mul24_4_3_le_reg_1590;
                mul24_4_3_le_reg_1590_pp0_iter3_reg <= mul24_4_3_le_reg_1590_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul24_4_4_le_reg_1600 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then
                mul24_4_le_reg_1550 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then
                mul24_4_le_reg_1550_pp0_iter1_reg <= mul24_4_le_reg_1550;
                mul24_4_le_reg_1550_pp0_iter2_reg <= mul24_4_le_reg_1550_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 
    = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_575 <= Layer3_Weights_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then
                reg_579 <= grp_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_584 <= grp_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then
                reg_589 <= grp_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)))) then
                reg_594 <= grp_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = 
    ap_CS_fsm_pp0_stage2)))) then
                reg_599 <= grp_fu_555_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then
                reg_605 <= grp_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                tmp_reg_1610 <= grp_generic_tanh_double_s_fu_544_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage25_subdone, ap_block_pp0_stage15_subdone, ap_condition_exit_pp0_iter5_stage15, ap_idle_pp0_0to4, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to6, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to6 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage15) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Layer3_Weights_CPU_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage22, ap_block_pp0_stage23, ap_block_pp0_stage18, ap_block_pp0_stage19, ap_block_pp0_stage20, ap_block_pp0_stage21, zext_ln30_fu_651_p1, ap_block_pp0_stage0, p_cast2_fu_666_p1, ap_block_pp0_stage1, zext_ln30_1_fu_680_p1, ap_block_pp0_stage2, zext_ln30_2_fu_690_p1, ap_block_pp0_stage3, zext_ln30_3_fu_709_p1, ap_block_pp0_stage4, zext_ln30_4_fu_724_p1, ap_block_pp0_stage5, zext_ln30_5_fu_739_p1, ap_block_pp0_stage6, zext_ln30_6_fu_754_p1, zext_ln30_7_fu_769_p1, ap_block_pp0_stage8, zext_ln30_8_fu_784_p1, ap_block_pp0_stage9, zext_ln30_9_fu_799_p1, ap_block_pp0_stage10, zext_ln30_10_fu_814_p1, ap_block_pp0_stage11, zext_ln30_11_fu_829_p1, ap_block_pp0_stage12, zext_ln30_12_fu_844_p1, ap_block_pp0_stage13, zext_ln30_13_fu_859_p1, ap_block_pp0_stage14, zext_ln30_14_fu_874_p1, ap_block_pp0_stage15, zext_ln30_15_fu_889_p1, ap_block_pp0_stage16, zext_ln30_16_fu_904_p1, ap_block_pp0_stage17, zext_ln30_17_fu_919_p1, zext_ln30_18_fu_934_p1, zext_ln30_19_fu_949_p1, zext_ln30_20_fu_964_p1, zext_ln30_21_fu_979_p1, zext_ln30_22_fu_994_p1, zext_ln30_23_fu_1009_p1, ap_block_pp0_stage24, zext_ln30_24_fu_1024_p1, ap_block_pp0_stage25)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_24_fu_1024_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_23_fu_1009_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_22_fu_994_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_21_fu_979_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_20_fu_964_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_19_fu_949_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_18_fu_934_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_17_fu_919_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_16_fu_904_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_15_fu_889_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_14_fu_874_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_13_fu_859_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_12_fu_844_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_11_fu_829_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_10_fu_814_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_9_fu_799_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_8_fu_784_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_7_fu_769_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_6_fu_754_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_5_fu_739_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_4_fu_724_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_3_fu_709_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_2_fu_690_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_1_fu_680_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                Layer3_Weights_CPU_address0 <= p_cast2_fu_666_p1(17 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Layer3_Weights_CPU_address0 <= zext_ln30_fu_651_p1(17 - 1 downto 0);
            else 
                Layer3_Weights_CPU_address0 <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            Layer3_Weights_CPU_address0 <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Layer3_Weights_CPU_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10_11001, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11_11001, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12_11001, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13_11001, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14_11001, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16_11001, ap_CS_fsm_pp0_stage17, ap_block_pp0_stage17_11001, ap_CS_fsm_pp0_stage18, ap_block_pp0_stage18_11001, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19_11001, ap_CS_fsm_pp0_stage20, ap_block_pp0_stage20_11001, ap_CS_fsm_pp0_stage21, ap_block_pp0_stage21_11001, ap_CS_fsm_pp0_stage22, ap_block_pp0_stage22_11001, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23_11001, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage24_11001, ap_block_pp0_stage25_11001, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage25_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage24_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)) or ((ap_const_boolean_0 = ap_block_pp0_stage21_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage21)) or ((ap_const_boolean_0 = ap_block_pp0_stage20_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)) or ((ap_const_boolean_0 = ap_block_pp0_stage19_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage16_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 
    = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            Layer3_Weights_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer3_Weights_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer4_Neurons_CPU_address0 <= zext_ln21_fu_1039_p1(7 - 1 downto 0);

    Layer4_Neurons_CPU_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            Layer4_Neurons_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer4_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    Layer4_Neurons_CPU_d0 <= grp_fu_563_p1;

    Layer4_Neurons_CPU_we0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            Layer4_Neurons_CPU_we0 <= ap_const_logic_1;
        else 
            Layer4_Neurons_CPU_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln21_fu_630_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv7_1));
    add_ln30_10_fu_809_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D4));
    add_ln30_11_fu_824_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D5));
    add_ln30_12_fu_839_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D6));
    add_ln30_13_fu_854_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D7));
    add_ln30_14_fu_869_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D8));
    add_ln30_15_fu_884_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D9));
    add_ln30_16_fu_899_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4DA));
    add_ln30_17_fu_914_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4DB));
    add_ln30_18_fu_929_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4DC));
    add_ln30_19_fu_944_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4DD));
    add_ln30_1_fu_675_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4CB));
    add_ln30_20_fu_959_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4DE));
    add_ln30_21_fu_974_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4DF));
    add_ln30_22_fu_989_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4E0));
    add_ln30_23_fu_1004_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4E1));
    add_ln30_24_fu_1019_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4E2));
    add_ln30_2_fu_685_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4CC));
    add_ln30_3_fu_704_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4CD));
    add_ln30_4_fu_719_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4CE));
    add_ln30_5_fu_734_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4CF));
    add_ln30_6_fu_749_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D0));
    add_ln30_7_fu_764_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D1));
    add_ln30_8_fu_779_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D2));
    add_ln30_9_fu_794_p2 <= std_logic_vector(unsigned(phi_mul_load_reg_1196) + unsigned(ap_const_lv17_4D3));
    add_ln30_fu_645_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv17_4CA));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage20 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage21 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(22);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage24 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage25 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage25_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_subdone, icmp_ln21_reg_1192)
    begin
        if (((icmp_ln21_reg_1192 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            ap_condition_exit_pp0_iter0_stage25 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage25 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage15_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage15, icmp_ln21_reg_1192_pp0_iter5_reg, ap_block_pp0_stage15_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln21_reg_1192_pp0_iter5_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            ap_condition_exit_pp0_iter5_stage15 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to6_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to6 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage25;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage25, ap_block_pp0_stage25_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage25_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, i_fu_164)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_164;
        end if; 
    end process;


    ap_sig_allocacmp_phi_mul_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, phi_mul_fu_160, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_phi_mul_load <= ap_const_lv17_0;
        else 
            ap_sig_allocacmp_phi_mul_load <= phi_mul_fu_160;
        end if; 
    end process;

    bitcast_ln30_10_fu_834_p1 <= reg_575;
    bitcast_ln30_11_fu_849_p1 <= reg_575;
    bitcast_ln30_12_fu_864_p1 <= reg_575;
    bitcast_ln30_13_fu_879_p1 <= reg_575;
    bitcast_ln30_14_fu_894_p1 <= reg_575;
    bitcast_ln30_15_fu_909_p1 <= reg_575;
    bitcast_ln30_16_fu_924_p1 <= reg_575;
    bitcast_ln30_17_fu_939_p1 <= reg_575;
    bitcast_ln30_18_fu_954_p1 <= reg_575;
    bitcast_ln30_19_fu_969_p1 <= reg_575;
    bitcast_ln30_1_fu_700_p1 <= Layer3_Weights_CPU_load_2_reg_1245;
    bitcast_ln30_20_fu_984_p1 <= reg_575;
    bitcast_ln30_21_fu_999_p1 <= reg_575;
    bitcast_ln30_22_fu_1014_p1 <= reg_575;
    bitcast_ln30_23_fu_1029_p1 <= reg_575;
    bitcast_ln30_24_fu_1034_p1 <= reg_575;
    bitcast_ln30_2_fu_714_p1 <= reg_575;
    bitcast_ln30_3_fu_729_p1 <= reg_575;
    bitcast_ln30_4_fu_744_p1 <= reg_575;
    bitcast_ln30_5_fu_759_p1 <= reg_575;
    bitcast_ln30_6_fu_774_p1 <= reg_575;
    bitcast_ln30_7_fu_789_p1 <= reg_575;
    bitcast_ln30_8_fu_804_p1 <= reg_575;
    bitcast_ln30_9_fu_819_p1 <= reg_575;
    bitcast_ln30_fu_670_p1 <= reg_575;
    empty_60_fu_695_p1 <= reg_575;

    grp_fu_555_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_CS_fsm_pp0_stage3, reg_584, reg_589, reg_594, reg_599, empty_60_fu_695_p1, ap_block_pp0_stage7, ap_block_pp0_stage22, ap_block_pp0_stage23, ap_block_pp0_stage18, ap_block_pp0_stage19, ap_block_pp0_stage20, ap_block_pp0_stage21, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage13, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage17, ap_block_pp0_stage24, ap_block_pp0_stage25)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19)) or ((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)))) then 
            grp_fu_555_p0 <= reg_599;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25)) or ((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)) or ((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21)))) then 
            grp_fu_555_p0 <= reg_594;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18)) or ((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22)))) then 
            grp_fu_555_p0 <= reg_589;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24)) or ((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20)))) then 
            grp_fu_555_p0 <= reg_584;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_555_p0 <= empty_60_fu_695_p1;
        else 
            grp_fu_555_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_555_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, reg_579, ap_CS_fsm_pp0_stage3, mul24_113_le_reg_1270, mul24_222_le_reg_1285, mul24_440_le_reg_1310, mul24_1_le_reg_1325, mul24_1_1_le_reg_1340, mul24_1_2_le_reg_1355, mul24_1_3_le_reg_1370, mul24_1_4_le_reg_1385_pp0_iter1_reg, mul24_2_le_reg_1400_pp0_iter1_reg, mul24_2_1_le_reg_1415_pp0_iter1_reg, mul24_2_2_le_reg_1430_pp0_iter1_reg, mul24_2_3_le_reg_1445_pp0_iter1_reg, mul24_2_4_le_reg_1460_pp0_iter1_reg, mul24_3_le_reg_1475_pp0_iter1_reg, mul24_3_1_le_reg_1490_pp0_iter1_reg, mul24_3_2_le_reg_1505_pp0_iter1_reg, mul24_3_3_le_reg_1520_pp0_iter2_reg, mul24_3_4_le_reg_1535_pp0_iter2_reg, mul24_4_le_reg_1550_pp0_iter2_reg, mul24_4_1_le_reg_1565_pp0_iter2_reg, mul24_4_2_le_reg_1580_pp0_iter3_reg, mul24_4_3_le_reg_1590_pp0_iter3_reg, mul24_4_4_le_reg_1600_pp0_iter3_reg, ap_block_pp0_stage7, ap_block_pp0_stage22, ap_block_pp0_stage23, ap_block_pp0_stage18, ap_block_pp0_stage19, ap_block_pp0_stage20, ap_block_pp0_stage21, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage13, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage17, ap_block_pp0_stage24, ap_block_pp0_stage25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
            grp_fu_555_p1 <= mul24_4_4_le_reg_1600_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
            grp_fu_555_p1 <= mul24_4_3_le_reg_1590_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_555_p1 <= mul24_4_2_le_reg_1580_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_555_p1 <= mul24_4_1_le_reg_1565_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_555_p1 <= mul24_4_le_reg_1550_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_555_p1 <= mul24_3_4_le_reg_1535_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            grp_fu_555_p1 <= mul24_3_3_le_reg_1520_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_555_p1 <= mul24_3_2_le_reg_1505_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_555_p1 <= mul24_3_1_le_reg_1490_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_555_p1 <= mul24_3_le_reg_1475_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_555_p1 <= mul24_2_4_le_reg_1460_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_555_p1 <= mul24_2_3_le_reg_1445_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_555_p1 <= mul24_2_2_le_reg_1430_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_555_p1 <= mul24_2_1_le_reg_1415_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_555_p1 <= mul24_2_le_reg_1400_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_555_p1 <= mul24_1_4_le_reg_1385_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_555_p1 <= mul24_1_3_le_reg_1370;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_555_p1 <= mul24_1_2_le_reg_1355;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_555_p1 <= mul24_1_1_le_reg_1340;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
            grp_fu_555_p1 <= mul24_1_le_reg_1325;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then 
            grp_fu_555_p1 <= mul24_440_le_reg_1310;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_555_p1 <= mul24_222_le_reg_1285;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_555_p1 <= mul24_113_le_reg_1270;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_555_p1 <= reg_579;
        else 
            grp_fu_555_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_559_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage25, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, bitcast_ln30_fu_670_p1, bitcast_ln30_1_fu_700_p1, bitcast_ln30_2_fu_714_p1, bitcast_ln30_3_fu_729_p1, bitcast_ln30_4_fu_744_p1, bitcast_ln30_5_fu_759_p1, bitcast_ln30_6_fu_774_p1, bitcast_ln30_7_fu_789_p1, bitcast_ln30_8_fu_804_p1, bitcast_ln30_9_fu_819_p1, bitcast_ln30_10_fu_834_p1, bitcast_ln30_11_fu_849_p1, bitcast_ln30_12_fu_864_p1, bitcast_ln30_13_fu_879_p1, bitcast_ln30_14_fu_894_p1, bitcast_ln30_15_fu_909_p1, bitcast_ln30_16_fu_924_p1, bitcast_ln30_17_fu_939_p1, bitcast_ln30_18_fu_954_p1, bitcast_ln30_19_fu_969_p1, bitcast_ln30_20_fu_984_p1, bitcast_ln30_21_fu_999_p1, bitcast_ln30_22_fu_1014_p1, bitcast_ln30_23_fu_1029_p1, bitcast_ln30_24_fu_1034_p1, ap_block_pp0_stage7, ap_block_pp0_stage22, ap_block_pp0_stage23, ap_block_pp0_stage18, ap_block_pp0_stage19, ap_block_pp0_stage20, ap_block_pp0_stage21, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage13, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage17, ap_block_pp0_stage24, ap_block_pp0_stage25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_559_p0 <= bitcast_ln30_24_fu_1034_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_559_p0 <= bitcast_ln30_23_fu_1029_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            grp_fu_559_p0 <= bitcast_ln30_22_fu_1014_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
            grp_fu_559_p0 <= bitcast_ln30_21_fu_999_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
            grp_fu_559_p0 <= bitcast_ln30_20_fu_984_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_559_p0 <= bitcast_ln30_19_fu_969_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_559_p0 <= bitcast_ln30_18_fu_954_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then 
            grp_fu_559_p0 <= bitcast_ln30_17_fu_939_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
            grp_fu_559_p0 <= bitcast_ln30_16_fu_924_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_559_p0 <= bitcast_ln30_15_fu_909_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_559_p0 <= bitcast_ln30_14_fu_894_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_559_p0 <= bitcast_ln30_13_fu_879_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_559_p0 <= bitcast_ln30_12_fu_864_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_559_p0 <= bitcast_ln30_11_fu_849_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_559_p0 <= bitcast_ln30_10_fu_834_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_559_p0 <= bitcast_ln30_9_fu_819_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_559_p0 <= bitcast_ln30_8_fu_804_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_559_p0 <= bitcast_ln30_7_fu_789_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_559_p0 <= bitcast_ln30_6_fu_774_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_559_p0 <= bitcast_ln30_5_fu_759_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_559_p0 <= bitcast_ln30_4_fu_744_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_559_p0 <= bitcast_ln30_3_fu_729_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_559_p0 <= bitcast_ln30_2_fu_714_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_559_p0 <= bitcast_ln30_1_fu_700_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_559_p0 <= bitcast_ln30_fu_670_p1;
        else 
            grp_fu_559_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_559_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage25, empty_36, empty_37, empty_38, empty_39, empty_40, empty_41, empty_42, empty_43, empty_44, empty_45, empty_46, empty_47, empty_48, empty_49, empty_50, empty_51, empty_52, empty_53, empty_54, empty_55, empty_56, empty_57, empty_58, empty_59, empty, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage16, ap_CS_fsm_pp0_stage17, ap_CS_fsm_pp0_stage18, ap_CS_fsm_pp0_stage19, ap_CS_fsm_pp0_stage20, ap_CS_fsm_pp0_stage21, ap_CS_fsm_pp0_stage22, ap_CS_fsm_pp0_stage23, ap_CS_fsm_pp0_stage24, ap_block_pp0_stage7, ap_block_pp0_stage22, ap_block_pp0_stage23, ap_block_pp0_stage18, ap_block_pp0_stage19, ap_block_pp0_stage20, ap_block_pp0_stage21, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_block_pp0_stage11, ap_block_pp0_stage12, ap_block_pp0_stage13, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage16, ap_block_pp0_stage17, ap_block_pp0_stage24, ap_block_pp0_stage25)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_559_p1 <= empty;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_559_p1 <= empty_59;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage25) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage25))) then 
            grp_fu_559_p1 <= empty_58;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage24) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage24))) then 
            grp_fu_559_p1 <= empty_57;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23))) then 
            grp_fu_559_p1 <= empty_56;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22))) then 
            grp_fu_559_p1 <= empty_55;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage21) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage21))) then 
            grp_fu_559_p1 <= empty_54;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage20) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage20))) then 
            grp_fu_559_p1 <= empty_53;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19))) then 
            grp_fu_559_p1 <= empty_52;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18))) then 
            grp_fu_559_p1 <= empty_51;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17))) then 
            grp_fu_559_p1 <= empty_50;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16))) then 
            grp_fu_559_p1 <= empty_49;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_559_p1 <= empty_48;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_559_p1 <= empty_47;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_559_p1 <= empty_46;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_559_p1 <= empty_45;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_559_p1 <= empty_44;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_559_p1 <= empty_43;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_559_p1 <= empty_42;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_559_p1 <= empty_41;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_559_p1 <= empty_40;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_559_p1 <= empty_39;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_559_p1 <= empty_38;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_559_p1 <= empty_37;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_559_p1 <= empty_36;
        else 
            grp_fu_559_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_569_p0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, conv_le_reg_1605, tmp_reg_1610, ap_block_pp0_stage3, ap_block_pp0_stage10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_569_p0 <= tmp_reg_1610;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_569_p0 <= conv_le_reg_1605;
        else 
            grp_fu_569_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_569_p1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_569_p1 <= ap_const_lv64_3FFB74538EF34D6A;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_569_p1 <= ap_const_lv64_3FE55555571F7693;
        else 
            grp_fu_569_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_tanh_double_s_fu_544_ap_start <= grp_generic_tanh_double_s_fu_544_ap_start_reg;
    icmp_ln21_fu_624_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv7_64) else "0";
    next_mul_fu_639_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_phi_mul_load) + unsigned(ap_const_lv17_4E3));
    p_cast2_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_load_reg_1196),64));
    zext_ln21_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_1187_pp0_iter6_reg),64));
    zext_ln30_10_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_10_fu_809_p2),64));
    zext_ln30_11_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_11_fu_824_p2),64));
    zext_ln30_12_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_12_fu_839_p2),64));
    zext_ln30_13_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_13_fu_854_p2),64));
    zext_ln30_14_fu_874_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_14_fu_869_p2),64));
    zext_ln30_15_fu_889_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_15_fu_884_p2),64));
    zext_ln30_16_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_16_fu_899_p2),64));
    zext_ln30_17_fu_919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_17_fu_914_p2),64));
    zext_ln30_18_fu_934_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_18_fu_929_p2),64));
    zext_ln30_19_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_19_fu_944_p2),64));
    zext_ln30_1_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_675_p2),64));
    zext_ln30_20_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_20_fu_959_p2),64));
    zext_ln30_21_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_21_fu_974_p2),64));
    zext_ln30_22_fu_994_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_22_fu_989_p2),64));
    zext_ln30_23_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_23_fu_1004_p2),64));
    zext_ln30_24_fu_1024_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_24_fu_1019_p2),64));
    zext_ln30_2_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_fu_685_p2),64));
    zext_ln30_3_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_3_fu_704_p2),64));
    zext_ln30_4_fu_724_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_4_fu_719_p2),64));
    zext_ln30_5_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_5_fu_734_p2),64));
    zext_ln30_6_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_6_fu_749_p2),64));
    zext_ln30_7_fu_769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_7_fu_764_p2),64));
    zext_ln30_8_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_8_fu_779_p2),64));
    zext_ln30_9_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_9_fu_794_p2),64));
    zext_ln30_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_fu_645_p2),64));
end behav;
