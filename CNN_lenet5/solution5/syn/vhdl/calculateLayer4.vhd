-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateLayer4 is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 20;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    s_axi_CTRL_bus_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_bus_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_bus_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_bus_WVALID : IN STD_LOGIC;
    s_axi_CTRL_bus_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_bus_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_bus_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_bus_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_bus_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_bus_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_bus_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_bus_RREADY : IN STD_LOGIC;
    s_axi_CTRL_bus_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_bus_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_bus_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_bus_BREADY : IN STD_LOGIC;
    s_axi_CTRL_bus_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of calculateLayer4 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "calculateLayer4_calculateLayer4,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=13.980900,HLS_SYN_LAT=2773,HLS_SYN_TPT=none,HLS_SYN_MEM=267,HLS_SYN_DSP=0,HLS_SYN_FF=15432,HLS_SYN_LUT=14830,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (26 downto 0) := "000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (26 downto 0) := "000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (26 downto 0) := "000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (26 downto 0) := "000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (26 downto 0) := "000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (26 downto 0) := "000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (26 downto 0) := "000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (26 downto 0) := "000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (26 downto 0) := "000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (26 downto 0) := "001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (26 downto 0) := "010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (26 downto 0) := "100000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv64_4C9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001001";
    constant ap_const_lv64_4CA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001010";
    constant ap_const_lv64_4CB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001011";
    constant ap_const_lv64_4CC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001100";
    constant ap_const_lv64_4CD : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001101";
    constant ap_const_lv64_4CE : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001110";
    constant ap_const_lv64_4CF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011001111";
    constant ap_const_lv64_4D0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010000";
    constant ap_const_lv64_4D1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010001";
    constant ap_const_lv64_4D2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010010";
    constant ap_const_lv64_4D3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010011";
    constant ap_const_lv64_4D4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010100";
    constant ap_const_lv64_4D5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010101";
    constant ap_const_lv64_4D6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010110";
    constant ap_const_lv64_4D7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011010111";
    constant ap_const_lv64_4D8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011000";
    constant ap_const_lv64_4D9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011001";
    constant ap_const_lv64_4DA : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011010";
    constant ap_const_lv64_4DB : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011011";
    constant ap_const_lv64_4DC : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011100";
    constant ap_const_lv64_4DD : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011101";
    constant ap_const_lv64_4DE : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011110";
    constant ap_const_lv64_4DF : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011011111";
    constant ap_const_lv64_4E0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011100000";
    constant ap_const_lv64_4E1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000010011100001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal Layer3_Neurons_CPU_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal Layer3_Neurons_CPU_ce0 : STD_LOGIC;
    signal Layer3_Neurons_CPU_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Weights_CPU_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Layer3_Neurons_CPU_load_reg_479 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal Layer3_Neurons_CPU_load_1_reg_489 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal Layer3_Neurons_CPU_load_2_reg_499 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal Layer3_Neurons_CPU_load_3_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal Layer3_Neurons_CPU_load_4_reg_519 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal Layer3_Neurons_CPU_load_5_reg_529 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal Layer3_Neurons_CPU_load_6_reg_539 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Layer3_Neurons_CPU_load_7_reg_549 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal Layer3_Neurons_CPU_load_8_reg_559 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal Layer3_Neurons_CPU_load_9_reg_569 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal Layer3_Neurons_CPU_load_10_reg_579 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal Layer3_Neurons_CPU_load_11_reg_589 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal Layer3_Neurons_CPU_load_12_reg_599 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal Layer3_Neurons_CPU_load_13_reg_609 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal Layer3_Neurons_CPU_load_14_reg_619 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal Layer3_Neurons_CPU_load_15_reg_629 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal Layer3_Neurons_CPU_load_16_reg_639 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal Layer3_Neurons_CPU_load_17_reg_649 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal Layer3_Neurons_CPU_load_18_reg_659 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal Layer3_Neurons_CPU_load_19_reg_669 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal Layer3_Neurons_CPU_load_20_reg_679 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal Layer3_Neurons_CPU_load_21_reg_689 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal Layer3_Neurons_CPU_load_22_reg_699 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal Layer3_Neurons_CPU_load_23_reg_709 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal empty_fu_373_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_reg_719 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal empty_61_fu_377_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_61_reg_724 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_62_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_62_reg_729 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_fu_385_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_63_reg_734 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_64_reg_739 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_65_fu_393_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_65_reg_744 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_66_fu_397_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_66_reg_749 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_67_fu_401_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_67_reg_754 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_68_fu_405_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_68_reg_759 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_69_fu_409_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_69_reg_764 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_fu_413_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_70_reg_769 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_71_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_71_reg_774 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_72_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_72_reg_779 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_73_fu_425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_73_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_74_fu_429_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_74_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_75_fu_433_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_75_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_76_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_76_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_fu_441_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_77_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_78_fu_445_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_78_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_79_fu_449_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_79_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_80_fu_453_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_80_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_81_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_81_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_82_fu_461_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_82_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_83_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_83_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_84_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_84_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_idle : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_ready : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer3_Weights_CPU_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer3_Weights_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_ce0 : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_we0 : STD_LOGIC;
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (26 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component calculateLayer4_calculateLayer4_Pipeline_calculateLayer4_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        Layer3_Weights_CPU_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        Layer3_Weights_CPU_ce0 : OUT STD_LOGIC;
        Layer3_Weights_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_36 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_37 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_38 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_39 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_40 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_41 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_42 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_43 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_44 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_45 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_46 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_47 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_48 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_49 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_50 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_51 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_52 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_53 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_54 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_55 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_56 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_57 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_58 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty_59 : IN STD_LOGIC_VECTOR (31 downto 0);
        empty : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer4_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        Layer4_Neurons_CPU_ce0 : OUT STD_LOGIC;
        Layer4_Neurons_CPU_we0 : OUT STD_LOGIC;
        Layer4_Neurons_CPU_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateLayer4_CTRL_bus_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component calculateLayer4_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        Layer4_Neurons_CPU_address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        Layer4_Neurons_CPU_ce0 : IN STD_LOGIC;
        Layer4_Neurons_CPU_we0 : IN STD_LOGIC;
        Layer4_Neurons_CPU_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Layer3_Neurons_CPU_address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        Layer3_Neurons_CPU_ce0 : IN STD_LOGIC;
        Layer3_Neurons_CPU_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Layer3_Weights_CPU_address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        Layer3_Weights_CPU_ce0 : IN STD_LOGIC;
        Layer3_Weights_CPU_q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334 : component calculateLayer4_calculateLayer4_Pipeline_calculateLayer4_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start,
        ap_done => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done,
        ap_idle => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_idle,
        ap_ready => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_ready,
        Layer3_Weights_CPU_address0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer3_Weights_CPU_address0,
        Layer3_Weights_CPU_ce0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer3_Weights_CPU_ce0,
        Layer3_Weights_CPU_q0 => Layer3_Weights_CPU_q0,
        empty_36 => empty_reg_719,
        empty_37 => empty_61_reg_724,
        empty_38 => empty_62_reg_729,
        empty_39 => empty_63_reg_734,
        empty_40 => empty_64_reg_739,
        empty_41 => empty_65_reg_744,
        empty_42 => empty_66_reg_749,
        empty_43 => empty_67_reg_754,
        empty_44 => empty_68_reg_759,
        empty_45 => empty_69_reg_764,
        empty_46 => empty_70_reg_769,
        empty_47 => empty_71_reg_774,
        empty_48 => empty_72_reg_779,
        empty_49 => empty_73_reg_784,
        empty_50 => empty_74_reg_789,
        empty_51 => empty_75_reg_794,
        empty_52 => empty_76_reg_799,
        empty_53 => empty_77_reg_804,
        empty_54 => empty_78_reg_809,
        empty_55 => empty_79_reg_814,
        empty_56 => empty_80_reg_819,
        empty_57 => empty_81_reg_824,
        empty_58 => empty_82_reg_829,
        empty_59 => empty_83_reg_834,
        empty => empty_84_reg_839,
        Layer4_Neurons_CPU_address0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_address0,
        Layer4_Neurons_CPU_ce0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_ce0,
        Layer4_Neurons_CPU_we0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_we0,
        Layer4_Neurons_CPU_d0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_d0);

    CTRL_bus_s_axi_U : component calculateLayer4_CTRL_bus_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_bus_AWVALID,
        AWREADY => s_axi_CTRL_bus_AWREADY,
        AWADDR => s_axi_CTRL_bus_AWADDR,
        WVALID => s_axi_CTRL_bus_WVALID,
        WREADY => s_axi_CTRL_bus_WREADY,
        WDATA => s_axi_CTRL_bus_WDATA,
        WSTRB => s_axi_CTRL_bus_WSTRB,
        ARVALID => s_axi_CTRL_bus_ARVALID,
        ARREADY => s_axi_CTRL_bus_ARREADY,
        ARADDR => s_axi_CTRL_bus_ARADDR,
        RVALID => s_axi_CTRL_bus_RVALID,
        RREADY => s_axi_CTRL_bus_RREADY,
        RDATA => s_axi_CTRL_bus_RDATA,
        RRESP => s_axi_CTRL_bus_RRESP,
        BVALID => s_axi_CTRL_bus_BVALID,
        BREADY => s_axi_CTRL_bus_BREADY,
        BRESP => s_axi_CTRL_bus_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_s_axi_U : component calculateLayer4_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        Layer4_Neurons_CPU_address0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_address0,
        Layer4_Neurons_CPU_ce0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_ce0,
        Layer4_Neurons_CPU_we0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_we0,
        Layer4_Neurons_CPU_d0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer4_Neurons_CPU_d0,
        Layer3_Neurons_CPU_address0 => Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0 => Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_q0 => Layer3_Neurons_CPU_q0,
        Layer3_Weights_CPU_address0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer3_Weights_CPU_address0,
        Layer3_Weights_CPU_ce0 => grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_Layer3_Weights_CPU_ce0,
        Layer3_Weights_CPU_q0 => Layer3_Weights_CPU_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                    grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_ready = ap_const_logic_1)) then 
                    grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                Layer3_Neurons_CPU_load_10_reg_579 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Layer3_Neurons_CPU_load_11_reg_589 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                Layer3_Neurons_CPU_load_12_reg_599 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                Layer3_Neurons_CPU_load_13_reg_609 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                Layer3_Neurons_CPU_load_14_reg_619 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                Layer3_Neurons_CPU_load_15_reg_629 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                Layer3_Neurons_CPU_load_16_reg_639 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                Layer3_Neurons_CPU_load_17_reg_649 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                Layer3_Neurons_CPU_load_18_reg_659 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                Layer3_Neurons_CPU_load_19_reg_669 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                Layer3_Neurons_CPU_load_1_reg_489 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                Layer3_Neurons_CPU_load_20_reg_679 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then
                Layer3_Neurons_CPU_load_21_reg_689 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                Layer3_Neurons_CPU_load_22_reg_699 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                Layer3_Neurons_CPU_load_23_reg_709 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                Layer3_Neurons_CPU_load_2_reg_499 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Layer3_Neurons_CPU_load_3_reg_509 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                Layer3_Neurons_CPU_load_4_reg_519 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                Layer3_Neurons_CPU_load_5_reg_529 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                Layer3_Neurons_CPU_load_6_reg_539 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Layer3_Neurons_CPU_load_7_reg_549 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                Layer3_Neurons_CPU_load_8_reg_559 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                Layer3_Neurons_CPU_load_9_reg_569 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                Layer3_Neurons_CPU_load_reg_479 <= Layer3_Neurons_CPU_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                empty_61_reg_724 <= empty_61_fu_377_p1;
                empty_62_reg_729 <= empty_62_fu_381_p1;
                empty_63_reg_734 <= empty_63_fu_385_p1;
                empty_64_reg_739 <= empty_64_fu_389_p1;
                empty_65_reg_744 <= empty_65_fu_393_p1;
                empty_66_reg_749 <= empty_66_fu_397_p1;
                empty_67_reg_754 <= empty_67_fu_401_p1;
                empty_68_reg_759 <= empty_68_fu_405_p1;
                empty_69_reg_764 <= empty_69_fu_409_p1;
                empty_70_reg_769 <= empty_70_fu_413_p1;
                empty_71_reg_774 <= empty_71_fu_417_p1;
                empty_72_reg_779 <= empty_72_fu_421_p1;
                empty_73_reg_784 <= empty_73_fu_425_p1;
                empty_74_reg_789 <= empty_74_fu_429_p1;
                empty_75_reg_794 <= empty_75_fu_433_p1;
                empty_76_reg_799 <= empty_76_fu_437_p1;
                empty_77_reg_804 <= empty_77_fu_441_p1;
                empty_78_reg_809 <= empty_78_fu_445_p1;
                empty_79_reg_814 <= empty_79_fu_449_p1;
                empty_80_reg_819 <= empty_80_fu_453_p1;
                empty_81_reg_824 <= empty_81_fu_457_p1;
                empty_82_reg_829 <= empty_82_fu_461_p1;
                empty_83_reg_834 <= empty_83_fu_465_p1;
                empty_84_reg_839 <= empty_84_fu_469_p1;
                empty_reg_719 <= empty_fu_373_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done, ap_CS_fsm_state27)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Layer3_Neurons_CPU_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4E1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4E0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DF(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DE(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DD(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DC(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DB(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4DA(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D9(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D8(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D7(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D6(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D5(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D4(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D3(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D2(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4D0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CF(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CE(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CD(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CC(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CB(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4CA(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            Layer3_Neurons_CPU_address0 <= ap_const_lv64_4C9(11 - 1 downto 0);
        else 
            Layer3_Neurons_CPU_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    Layer3_Neurons_CPU_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_1) 
    and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;
    ap_ST_fsm_state12_blk <= ap_const_logic_0;
    ap_ST_fsm_state13_blk <= ap_const_logic_0;
    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;
    ap_ST_fsm_state17_blk <= ap_const_logic_0;
    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;
    ap_ST_fsm_state22_blk <= ap_const_logic_0;
    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done)
    begin
        if ((grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;
    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_done_assign_proc : process(grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done, ap_CS_fsm_state27)
    begin
        if (((grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done, ap_CS_fsm_state27)
    begin
        if (((grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    empty_61_fu_377_p1 <= Layer3_Neurons_CPU_load_1_reg_489;
    empty_62_fu_381_p1 <= Layer3_Neurons_CPU_load_2_reg_499;
    empty_63_fu_385_p1 <= Layer3_Neurons_CPU_load_3_reg_509;
    empty_64_fu_389_p1 <= Layer3_Neurons_CPU_load_4_reg_519;
    empty_65_fu_393_p1 <= Layer3_Neurons_CPU_load_5_reg_529;
    empty_66_fu_397_p1 <= Layer3_Neurons_CPU_load_6_reg_539;
    empty_67_fu_401_p1 <= Layer3_Neurons_CPU_load_7_reg_549;
    empty_68_fu_405_p1 <= Layer3_Neurons_CPU_load_8_reg_559;
    empty_69_fu_409_p1 <= Layer3_Neurons_CPU_load_9_reg_569;
    empty_70_fu_413_p1 <= Layer3_Neurons_CPU_load_10_reg_579;
    empty_71_fu_417_p1 <= Layer3_Neurons_CPU_load_11_reg_589;
    empty_72_fu_421_p1 <= Layer3_Neurons_CPU_load_12_reg_599;
    empty_73_fu_425_p1 <= Layer3_Neurons_CPU_load_13_reg_609;
    empty_74_fu_429_p1 <= Layer3_Neurons_CPU_load_14_reg_619;
    empty_75_fu_433_p1 <= Layer3_Neurons_CPU_load_15_reg_629;
    empty_76_fu_437_p1 <= Layer3_Neurons_CPU_load_16_reg_639;
    empty_77_fu_441_p1 <= Layer3_Neurons_CPU_load_17_reg_649;
    empty_78_fu_445_p1 <= Layer3_Neurons_CPU_load_18_reg_659;
    empty_79_fu_449_p1 <= Layer3_Neurons_CPU_load_19_reg_669;
    empty_80_fu_453_p1 <= Layer3_Neurons_CPU_load_20_reg_679;
    empty_81_fu_457_p1 <= Layer3_Neurons_CPU_load_21_reg_689;
    empty_82_fu_461_p1 <= Layer3_Neurons_CPU_load_22_reg_699;
    empty_83_fu_465_p1 <= Layer3_Neurons_CPU_load_23_reg_709;
    empty_84_fu_469_p1 <= Layer3_Neurons_CPU_q0;
    empty_fu_373_p1 <= Layer3_Neurons_CPU_load_reg_479;
    grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start <= grp_calculateLayer4_Pipeline_calculateLayer4_loop_fu_334_ap_start_reg;
end behav;
