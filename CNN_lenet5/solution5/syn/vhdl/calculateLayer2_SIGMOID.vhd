-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity calculateLayer2_SIGMOID is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of calculateLayer2_SIGMOID is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_437F0000 : STD_LOGIC_VECTOR (31 downto 0) := "01000011011111110000000000000000";
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal sigmoidLUT_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sigmoidLUT_1_ce0 : STD_LOGIC;
    signal sigmoidLUT_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_read_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln12_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_366 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln12_reg_366_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_366_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_366_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_366_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_366_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_366_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln12_fu_145_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln12_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_378 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_6_reg_378_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_378_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_378_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_378_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_378_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_378_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_fu_193_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln15_reg_383 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_82_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal div_reg_388 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_77_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal dc_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_sign_reg_398 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln342_fu_221_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal trunc_ln342_reg_403 : STD_LOGIC_VECTOR (22 downto 0);
    signal tmp_fu_235_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_408 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_253_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln18_reg_413 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln15_fu_270_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln15_reg_418 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_fu_277_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln18_reg_423 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_7_reg_428 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_fu_311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln19_fu_328_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_87_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_87_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal bitcast_ln12_fu_94_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_97_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_fu_107_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln12_1_fu_117_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_111_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_135_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_fu_129_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln12_1_fu_141_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln15_fu_152_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_155_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln15_fu_165_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln15_1_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln15_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln15_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal data_fu_200_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xs_exp_fu_211_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln317_fu_225_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln317_fu_229_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln18_fu_243_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln18_fu_249_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mantissa_fu_261_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln18_1_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln18_fu_281_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal shl_ln18_fu_297_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_8_fu_301_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_2_fu_317_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_fu_322_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln20_fu_337_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln20_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln19_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln20_1_fu_347_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_77_ce : STD_LOGIC;
    signal grp_fu_82_ce : STD_LOGIC;
    signal grp_fu_87_ce : STD_LOGIC;
    signal grp_fu_87_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_0to6 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0_1to7 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component calculateLayer2_fmul_32ns_32ns_32_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateLayer2_fdiv_32ns_32ns_32_16_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component calculateLayer2_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component calculateLayer2_SIGMOID_sigmoidLUT_1_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sigmoidLUT_1_U : component calculateLayer2_SIGMOID_sigmoidLUT_1_ROM_AUTO_1R
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sigmoidLUT_1_address0,
        ce0 => sigmoidLUT_1_ce0,
        q0 => sigmoidLUT_1_q0);

    fmul_32ns_32ns_32_4_max_dsp_1_U1 : component calculateLayer2_fmul_32ns_32ns_32_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => div_reg_388,
        din1 => ap_const_lv32_437F0000,
        ce => grp_fu_77_ce,
        dout => grp_fu_77_p2);

    fdiv_32ns_32ns_32_16_no_dsp_1_U2 : component calculateLayer2_fdiv_32ns_32ns_32_16_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln15_reg_383,
        din1 => ap_const_lv32_40C00000,
        ce => grp_fu_82_ce,
        dout => grp_fu_82_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U3 : component calculateLayer2_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_87_p0,
        din1 => grp_fu_87_p1,
        ce => grp_fu_87_ce,
        opcode => grp_fu_87_opcode,
        dout => grp_fu_87_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                dc_reg_393 <= grp_fu_77_p2;
                div_reg_388 <= grp_fu_82_p2;
                select_ln15_reg_383 <= select_ln15_fu_193_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_logic_1 = ap_ce))) then
                or_ln12_reg_366 <= or_ln12_fu_123_p2;
                or_ln12_reg_366_pp0_iter1_reg <= or_ln12_reg_366;
                or_ln12_reg_366_pp0_iter2_reg <= or_ln12_reg_366_pp0_iter1_reg;
                or_ln12_reg_366_pp0_iter3_reg <= or_ln12_reg_366_pp0_iter2_reg;
                or_ln12_reg_366_pp0_iter4_reg <= or_ln12_reg_366_pp0_iter3_reg;
                or_ln12_reg_366_pp0_iter5_reg <= or_ln12_reg_366_pp0_iter4_reg;
                or_ln12_reg_366_pp0_iter6_reg <= or_ln12_reg_366_pp0_iter5_reg;
                select_ln12_reg_371 <= select_ln12_fu_145_p3;
                tmp_7_reg_428 <= lshr_ln18_fu_281_p2(31 downto 24);
                    zext_ln15_reg_418(23 downto 1) <= zext_ln15_fu_270_p1(23 downto 1);
                    zext_ln18_reg_423(31 downto 0) <= zext_ln18_fu_277_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln18_reg_413 <= select_ln18_fu_253_p3;
                tmp_reg_408 <= add_ln317_fu_229_p2(8 downto 8);
                trunc_ln342_reg_403 <= trunc_ln342_fu_221_p1;
                x_read_reg_359 <= x;
                xs_sign_reg_398 <= data_fu_200_p1(31 downto 31);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_6_reg_378 <= grp_fu_87_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                tmp_6_reg_378_pp0_iter1_reg <= tmp_6_reg_378;
                tmp_6_reg_378_pp0_iter2_reg <= tmp_6_reg_378_pp0_iter1_reg;
                tmp_6_reg_378_pp0_iter3_reg <= tmp_6_reg_378_pp0_iter2_reg;
                tmp_6_reg_378_pp0_iter4_reg <= tmp_6_reg_378_pp0_iter3_reg;
                tmp_6_reg_378_pp0_iter5_reg <= tmp_6_reg_378_pp0_iter4_reg;
                tmp_6_reg_378_pp0_iter6_reg <= tmp_6_reg_378_pp0_iter5_reg;
                val_reg_433 <= val_fu_311_p3;
            end if;
        end if;
    end process;
    zext_ln15_reg_418(0) <= '0';
    zext_ln15_reg_418(78 downto 24) <= "0000000000000000000000000000000000000000000000000000001";
    zext_ln18_reg_423(78 downto 32) <= "00000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0, ap_idle_pp0_1to7, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start = ap_const_logic_0) and (ap_idle_pp0_1to7 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_reset_idle_pp0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln317_fu_229_p2 <= std_logic_vector(unsigned(zext_ln317_fu_225_p1) + unsigned(ap_const_lv9_181));
    and_ln12_fu_129_p2 <= (or_ln12_fu_123_p2 and grp_fu_87_p2);
    and_ln15_fu_187_p2 <= (or_ln15_fu_181_p2 and grp_fu_87_p2);
    and_ln19_fu_333_p2 <= (tmp_6_reg_378_pp0_iter6_reg and or_ln12_reg_366_pp0_iter6_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage1_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage2_subdone <= (ap_const_logic_0 = ap_ce);
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage3_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to6_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to6 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to7_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to7 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to6)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to6 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sigmoidLUT_1_q0 when (and_ln19_fu_333_p2(0) = '1') else 
        bitcast_ln20_1_fu_347_p1;
    bitcast_ln12_1_fu_141_p1 <= xor_ln12_fu_135_p2;
    bitcast_ln12_fu_94_p1 <= x_read_reg_359;
    bitcast_ln15_fu_152_p1 <= select_ln12_reg_371;
    bitcast_ln20_1_fu_347_p1 <= xor_ln20_fu_341_p2;
    bitcast_ln20_fu_337_p1 <= sigmoidLUT_1_q0;
    data_fu_200_p1 <= dc_reg_393;

    grp_fu_77_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
            grp_fu_77_ce <= ap_const_logic_1;
        else 
            grp_fu_77_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_82_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
            grp_fu_82_ce <= ap_const_logic_1;
        else 
            grp_fu_82_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_87_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage3, ap_ce, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_logic_1 = ap_ce) and (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))))) then 
            grp_fu_87_ce <= ap_const_logic_1;
        else 
            grp_fu_87_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_87_opcode_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_00001, ap_block_pp0_stage1_00001, ap_block_pp0_stage2_00001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_87_opcode <= ap_const_lv5_2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_87_opcode <= ap_const_lv5_4;
        else 
            grp_fu_87_opcode <= "XXXXX";
        end if; 
    end process;


    grp_fu_87_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, x, x_read_reg_359, ap_CS_fsm_pp0_stage1, select_ln12_reg_371, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_87_p0 <= select_ln12_reg_371;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_87_p0 <= x_read_reg_359;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_87_p0 <= x;
            else 
                grp_fu_87_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_87_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_87_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_87_p1 <= ap_const_lv32_40C00000;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_87_p1 <= ap_const_lv32_0;
        else 
            grp_fu_87_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_1_fu_117_p2 <= "1" when (trunc_ln12_fu_107_p1 = ap_const_lv23_0) else "0";
    icmp_ln12_fu_111_p2 <= "0" when (tmp_1_fu_97_p4 = ap_const_lv8_FF) else "1";
    icmp_ln15_1_fu_175_p2 <= "1" when (trunc_ln15_fu_165_p1 = ap_const_lv23_0) else "0";
    icmp_ln15_fu_169_p2 <= "0" when (tmp_3_fu_155_p4 = ap_const_lv8_FF) else "1";
    lshr_ln18_fu_281_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_270_p1),to_integer(unsigned('0' & zext_ln18_fu_277_p1(31-1 downto 0)))));
    mantissa_fu_261_p4 <= ((ap_const_lv1_1 & trunc_ln342_reg_403) & ap_const_lv1_0);
    or_ln12_fu_123_p2 <= (icmp_ln12_fu_111_p2 or icmp_ln12_1_fu_117_p2);
    or_ln15_fu_181_p2 <= (icmp_ln15_fu_169_p2 or icmp_ln15_1_fu_175_p2);
    result_2_fu_317_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_reg_433));
    result_fu_322_p3 <= 
        result_2_fu_317_p2 when (xs_sign_reg_398(0) = '1') else 
        val_reg_433;
    select_ln12_fu_145_p3 <= 
        bitcast_ln12_1_fu_141_p1 when (and_ln12_fu_129_p2(0) = '1') else 
        x_read_reg_359;
    select_ln15_fu_193_p3 <= 
        ap_const_lv32_40C00000 when (and_ln15_fu_187_p2(0) = '1') else 
        select_ln12_reg_371;
    select_ln18_fu_253_p3 <= 
        sext_ln18_fu_249_p1 when (tmp_fu_235_p3(0) = '1') else 
        add_ln317_fu_229_p2;
        sext_ln18_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_reg_413),32));

        sext_ln18_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_243_p2),9));

    shl_ln18_fu_297_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_reg_418),to_integer(unsigned('0' & zext_ln18_reg_423(31-1 downto 0)))));
    sigmoidLUT_1_address0 <= zext_ln19_fu_328_p1(8 - 1 downto 0);

    sigmoidLUT_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter6, ap_CS_fsm_pp0_stage3, ap_ce, ap_block_pp0_stage3_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            sigmoidLUT_1_ce0 <= ap_const_logic_1;
        else 
            sigmoidLUT_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln18_fu_243_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_fu_211_p4));
    tmp_1_fu_97_p4 <= bitcast_ln12_fu_94_p1(30 downto 23);
    tmp_3_fu_155_p4 <= bitcast_ln15_fu_152_p1(30 downto 23);
    tmp_8_fu_301_p4 <= shl_ln18_fu_297_p2(31 downto 24);
    tmp_fu_235_p3 <= add_ln317_fu_229_p2(8 downto 8);
    trunc_ln12_fu_107_p1 <= bitcast_ln12_fu_94_p1(23 - 1 downto 0);
    trunc_ln15_fu_165_p1 <= bitcast_ln15_fu_152_p1(23 - 1 downto 0);
    trunc_ln342_fu_221_p1 <= data_fu_200_p1(23 - 1 downto 0);
    val_fu_311_p3 <= 
        tmp_7_reg_428 when (tmp_reg_408(0) = '1') else 
        tmp_8_fu_301_p4;
    xor_ln12_fu_135_p2 <= (bitcast_ln12_fu_94_p1 xor ap_const_lv32_80000000);
    xor_ln20_fu_341_p2 <= (bitcast_ln20_fu_337_p1 xor ap_const_lv32_80000000);
    xs_exp_fu_211_p4 <= data_fu_200_p1(30 downto 23);
    zext_ln15_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_261_p4),79));
    zext_ln18_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_274_p1),79));
    zext_ln19_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_fu_322_p3),64));
    zext_ln317_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_211_p4),9));
end behav;
