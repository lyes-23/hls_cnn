// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module calculateLayer2_SIGMOID (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 4'd1;
parameter    ap_ST_fsm_pp0_stage1 = 4'd2;
parameter    ap_ST_fsm_pp0_stage2 = 4'd4;
parameter    ap_ST_fsm_pp0_stage3 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_block_pp0_stage3_subdone;
wire   [7:0] sigmoidLUT_1_address0;
reg    sigmoidLUT_1_ce0;
wire   [31:0] sigmoidLUT_1_q0;
reg   [31:0] x_read_reg_359;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln12_fu_123_p2;
reg   [0:0] or_ln12_reg_366;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] or_ln12_reg_366_pp0_iter1_reg;
reg   [0:0] or_ln12_reg_366_pp0_iter2_reg;
reg   [0:0] or_ln12_reg_366_pp0_iter3_reg;
reg   [0:0] or_ln12_reg_366_pp0_iter4_reg;
reg   [0:0] or_ln12_reg_366_pp0_iter5_reg;
reg   [0:0] or_ln12_reg_366_pp0_iter6_reg;
wire   [31:0] select_ln12_fu_145_p3;
reg   [31:0] select_ln12_reg_371;
wire   [0:0] grp_fu_87_p2;
reg   [0:0] tmp_6_reg_378;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] tmp_6_reg_378_pp0_iter1_reg;
reg   [0:0] tmp_6_reg_378_pp0_iter2_reg;
reg   [0:0] tmp_6_reg_378_pp0_iter3_reg;
reg   [0:0] tmp_6_reg_378_pp0_iter4_reg;
reg   [0:0] tmp_6_reg_378_pp0_iter5_reg;
reg   [0:0] tmp_6_reg_378_pp0_iter6_reg;
wire   [31:0] select_ln15_fu_193_p3;
reg   [31:0] select_ln15_reg_383;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_82_p2;
reg   [31:0] div_reg_388;
wire   [31:0] grp_fu_77_p2;
reg   [31:0] dc_reg_393;
reg   [0:0] xs_sign_reg_398;
wire   [22:0] trunc_ln342_fu_221_p1;
reg   [22:0] trunc_ln342_reg_403;
wire   [0:0] tmp_fu_235_p3;
reg   [0:0] tmp_reg_408;
wire   [8:0] select_ln18_fu_253_p3;
reg   [8:0] select_ln18_reg_413;
wire   [78:0] zext_ln15_fu_270_p1;
reg   [78:0] zext_ln15_reg_418;
wire   [78:0] zext_ln18_fu_277_p1;
reg   [78:0] zext_ln18_reg_423;
reg   [7:0] tmp_7_reg_428;
wire   [7:0] val_fu_311_p3;
reg   [7:0] val_reg_433;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] zext_ln19_fu_328_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage0;
reg   [31:0] grp_fu_87_p0;
reg   [31:0] grp_fu_87_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire   [31:0] bitcast_ln12_fu_94_p1;
wire   [7:0] tmp_1_fu_97_p4;
wire   [22:0] trunc_ln12_fu_107_p1;
wire   [0:0] icmp_ln12_1_fu_117_p2;
wire   [0:0] icmp_ln12_fu_111_p2;
wire   [31:0] xor_ln12_fu_135_p2;
wire   [0:0] and_ln12_fu_129_p2;
wire   [31:0] bitcast_ln12_1_fu_141_p1;
wire   [31:0] bitcast_ln15_fu_152_p1;
wire   [7:0] tmp_3_fu_155_p4;
wire   [22:0] trunc_ln15_fu_165_p1;
wire   [0:0] icmp_ln15_1_fu_175_p2;
wire   [0:0] icmp_ln15_fu_169_p2;
wire   [0:0] or_ln15_fu_181_p2;
wire   [0:0] and_ln15_fu_187_p2;
wire   [31:0] data_fu_200_p1;
wire   [7:0] xs_exp_fu_211_p4;
wire   [8:0] zext_ln317_fu_225_p1;
wire   [8:0] add_ln317_fu_229_p2;
wire   [7:0] sub_ln18_fu_243_p2;
wire  signed [8:0] sext_ln18_fu_249_p1;
wire   [24:0] mantissa_fu_261_p4;
wire  signed [31:0] sext_ln18_1_fu_274_p1;
wire   [78:0] lshr_ln18_fu_281_p2;
wire   [78:0] shl_ln18_fu_297_p2;
wire   [7:0] tmp_8_fu_301_p4;
wire   [7:0] result_2_fu_317_p2;
wire   [7:0] result_fu_322_p3;
wire   [31:0] bitcast_ln20_fu_337_p1;
wire   [31:0] xor_ln20_fu_341_p2;
wire   [0:0] and_ln19_fu_333_p2;
wire   [31:0] bitcast_ln20_1_fu_347_p1;
reg    grp_fu_77_ce;
reg    grp_fu_82_ce;
reg    grp_fu_87_ce;
reg   [4:0] grp_fu_87_opcode;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage2_00001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0_0to6;
reg    ap_reset_idle_pp0;
reg    ap_idle_pp0_1to7;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
end

calculateLayer2_SIGMOID_sigmoidLUT_1_ROM_AUTO_1R #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sigmoidLUT_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoidLUT_1_address0),
    .ce0(sigmoidLUT_1_ce0),
    .q0(sigmoidLUT_1_q0)
);

calculateLayer2_fmul_32ns_32ns_32_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_4_max_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(div_reg_388),
    .din1(32'd1132396544),
    .ce(grp_fu_77_ce),
    .dout(grp_fu_77_p2)
);

calculateLayer2_fdiv_32ns_32ns_32_16_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 16 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fdiv_32ns_32ns_32_16_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(select_ln15_reg_383),
    .din1(32'd1086324736),
    .ce(grp_fu_82_ce),
    .dout(grp_fu_82_p2)
);

calculateLayer2_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_87_p0),
    .din1(grp_fu_87_p1),
    .ce(grp_fu_87_ce),
    .opcode(grp_fu_87_opcode),
    .dout(grp_fu_87_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter7 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dc_reg_393 <= grp_fu_77_p2;
        div_reg_388 <= grp_fu_82_p2;
        select_ln15_reg_383 <= select_ln15_fu_193_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_ce))) begin
        or_ln12_reg_366 <= or_ln12_fu_123_p2;
        or_ln12_reg_366_pp0_iter1_reg <= or_ln12_reg_366;
        or_ln12_reg_366_pp0_iter2_reg <= or_ln12_reg_366_pp0_iter1_reg;
        or_ln12_reg_366_pp0_iter3_reg <= or_ln12_reg_366_pp0_iter2_reg;
        or_ln12_reg_366_pp0_iter4_reg <= or_ln12_reg_366_pp0_iter3_reg;
        or_ln12_reg_366_pp0_iter5_reg <= or_ln12_reg_366_pp0_iter4_reg;
        or_ln12_reg_366_pp0_iter6_reg <= or_ln12_reg_366_pp0_iter5_reg;
        select_ln12_reg_371 <= select_ln12_fu_145_p3;
        tmp_7_reg_428 <= {{lshr_ln18_fu_281_p2[31:24]}};
        zext_ln15_reg_418[23 : 1] <= zext_ln15_fu_270_p1[23 : 1];
        zext_ln18_reg_423[31 : 0] <= zext_ln18_fu_277_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln18_reg_413 <= select_ln18_fu_253_p3;
        tmp_reg_408 <= add_ln317_fu_229_p2[32'd8];
        trunc_ln342_reg_403 <= trunc_ln342_fu_221_p1;
        x_read_reg_359 <= x;
        xs_sign_reg_398 <= data_fu_200_p1[32'd31];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_6_reg_378 <= grp_fu_87_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_6_reg_378_pp0_iter1_reg <= tmp_6_reg_378;
        tmp_6_reg_378_pp0_iter2_reg <= tmp_6_reg_378_pp0_iter1_reg;
        tmp_6_reg_378_pp0_iter3_reg <= tmp_6_reg_378_pp0_iter2_reg;
        tmp_6_reg_378_pp0_iter4_reg <= tmp_6_reg_378_pp0_iter3_reg;
        tmp_6_reg_378_pp0_iter5_reg <= tmp_6_reg_378_pp0_iter4_reg;
        tmp_6_reg_378_pp0_iter6_reg <= tmp_6_reg_378_pp0_iter5_reg;
        val_reg_433 <= val_fu_311_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter7 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to6 = 1'b1;
    end else begin
        ap_idle_pp0_0to6 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to7 = 1'b1;
    end else begin
        ap_idle_pp0_1to7 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to6 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
        grp_fu_77_ce = 1'b1;
    end else begin
        grp_fu_77_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
        grp_fu_82_ce = 1'b1;
    end else begin
        grp_fu_82_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
        grp_fu_87_ce = 1'b1;
    end else begin
        grp_fu_87_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_87_opcode = 5'd2;
    end else if (((1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_87_opcode = 5'd4;
    end else begin
        grp_fu_87_opcode = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_87_p0 = select_ln12_reg_371;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_87_p0 = x_read_reg_359;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            grp_fu_87_p0 = x;
        end else begin
            grp_fu_87_p0 = 'bx;
        end
    end else begin
        grp_fu_87_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_87_p1 = 32'd1086324736;
    end else if ((((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_87_p1 = 32'd0;
    end else begin
        grp_fu_87_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter6 == 1'b1) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        sigmoidLUT_1_ce0 = 1'b1;
    end else begin
        sigmoidLUT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start == 1'b0) & (ap_idle_pp0_1to7 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_reset_idle_pp0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln317_fu_229_p2 = ($signed(zext_ln317_fu_225_p1) + $signed(9'd385));

assign and_ln12_fu_129_p2 = (or_ln12_fu_123_p2 & grp_fu_87_p2);

assign and_ln15_fu_187_p2 = (or_ln15_fu_181_p2 & grp_fu_87_p2);

assign and_ln19_fu_333_p2 = (tmp_6_reg_378_pp0_iter6_reg & or_ln12_reg_366_pp0_iter6_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_subdone = (1'b0 == ap_ce);
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_return = ((and_ln19_fu_333_p2[0:0] == 1'b1) ? sigmoidLUT_1_q0 : bitcast_ln20_1_fu_347_p1);

assign bitcast_ln12_1_fu_141_p1 = xor_ln12_fu_135_p2;

assign bitcast_ln12_fu_94_p1 = x_read_reg_359;

assign bitcast_ln15_fu_152_p1 = select_ln12_reg_371;

assign bitcast_ln20_1_fu_347_p1 = xor_ln20_fu_341_p2;

assign bitcast_ln20_fu_337_p1 = sigmoidLUT_1_q0;

assign data_fu_200_p1 = dc_reg_393;

assign icmp_ln12_1_fu_117_p2 = ((trunc_ln12_fu_107_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_111_p2 = ((tmp_1_fu_97_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln15_1_fu_175_p2 = ((trunc_ln15_fu_165_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_169_p2 = ((tmp_3_fu_155_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_281_p2 = zext_ln15_fu_270_p1 >> zext_ln18_fu_277_p1;

assign mantissa_fu_261_p4 = {{{{1'd1}, {trunc_ln342_reg_403}}}, {1'd0}};

assign or_ln12_fu_123_p2 = (icmp_ln12_fu_111_p2 | icmp_ln12_1_fu_117_p2);

assign or_ln15_fu_181_p2 = (icmp_ln15_fu_169_p2 | icmp_ln15_1_fu_175_p2);

assign result_2_fu_317_p2 = (8'd0 - val_reg_433);

assign result_fu_322_p3 = ((xs_sign_reg_398[0:0] == 1'b1) ? result_2_fu_317_p2 : val_reg_433);

assign select_ln12_fu_145_p3 = ((and_ln12_fu_129_p2[0:0] == 1'b1) ? bitcast_ln12_1_fu_141_p1 : x_read_reg_359);

assign select_ln15_fu_193_p3 = ((and_ln15_fu_187_p2[0:0] == 1'b1) ? 32'd1086324736 : select_ln12_reg_371);

assign select_ln18_fu_253_p3 = ((tmp_fu_235_p3[0:0] == 1'b1) ? sext_ln18_fu_249_p1 : add_ln317_fu_229_p2);

assign sext_ln18_1_fu_274_p1 = $signed(select_ln18_reg_413);

assign sext_ln18_fu_249_p1 = $signed(sub_ln18_fu_243_p2);

assign shl_ln18_fu_297_p2 = zext_ln15_reg_418 << zext_ln18_reg_423;

assign sigmoidLUT_1_address0 = zext_ln19_fu_328_p1;

assign sub_ln18_fu_243_p2 = (8'd127 - xs_exp_fu_211_p4);

assign tmp_1_fu_97_p4 = {{bitcast_ln12_fu_94_p1[30:23]}};

assign tmp_3_fu_155_p4 = {{bitcast_ln15_fu_152_p1[30:23]}};

assign tmp_8_fu_301_p4 = {{shl_ln18_fu_297_p2[31:24]}};

assign tmp_fu_235_p3 = add_ln317_fu_229_p2[32'd8];

assign trunc_ln12_fu_107_p1 = bitcast_ln12_fu_94_p1[22:0];

assign trunc_ln15_fu_165_p1 = bitcast_ln15_fu_152_p1[22:0];

assign trunc_ln342_fu_221_p1 = data_fu_200_p1[22:0];

assign val_fu_311_p3 = ((tmp_reg_408[0:0] == 1'b1) ? tmp_7_reg_428 : tmp_8_fu_301_p4);

assign xor_ln12_fu_135_p2 = (bitcast_ln12_fu_94_p1 ^ 32'd2147483648);

assign xor_ln20_fu_341_p2 = (bitcast_ln20_fu_337_p1 ^ 32'd2147483648);

assign xs_exp_fu_211_p4 = {{data_fu_200_p1[30:23]}};

assign zext_ln15_fu_270_p1 = mantissa_fu_261_p4;

assign zext_ln18_fu_277_p1 = $unsigned(sext_ln18_1_fu_274_p1);

assign zext_ln19_fu_328_p1 = result_fu_322_p3;

assign zext_ln317_fu_225_p1 = xs_exp_fu_211_p4;

always @ (posedge ap_clk) begin
    zext_ln15_reg_418[0] <= 1'b0;
    zext_ln15_reg_418[78:24] <= 55'b0000000000000000000000000000000000000000000000000000001;
    zext_ln18_reg_423[78:32] <= 47'b00000000000000000000000000000000000000000000000;
end

endmodule //calculateLayer2_SIGMOID
