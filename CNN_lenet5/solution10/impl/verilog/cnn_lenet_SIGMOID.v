// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_lenet_SIGMOID (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] x;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [7:0] sigmoidLUT_1_address0;
reg    sigmoidLUT_1_ce0;
wire   [31:0] sigmoidLUT_1_q0;
reg   [31:0] x_read_reg_393;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] or_ln12_fu_148_p2;
reg   [0:0] or_ln12_reg_401;
reg   [0:0] or_ln12_reg_401_pp0_iter2_reg;
reg   [0:0] or_ln12_reg_401_pp0_iter3_reg;
reg   [0:0] or_ln12_reg_401_pp0_iter4_reg;
reg   [0:0] or_ln12_reg_401_pp0_iter5_reg;
reg   [0:0] or_ln12_reg_401_pp0_iter6_reg;
reg   [0:0] or_ln12_reg_401_pp0_iter7_reg;
reg   [0:0] or_ln12_reg_401_pp0_iter8_reg;
wire   [31:0] temp_fu_170_p3;
wire   [0:0] icmp_ln13_fu_197_p2;
reg   [0:0] icmp_ln13_reg_412;
reg   [0:0] icmp_ln13_reg_412_pp0_iter2_reg;
reg   [0:0] icmp_ln13_reg_412_pp0_iter3_reg;
reg   [0:0] icmp_ln13_reg_412_pp0_iter4_reg;
reg   [0:0] icmp_ln13_reg_412_pp0_iter5_reg;
reg   [0:0] icmp_ln13_reg_412_pp0_iter6_reg;
wire   [0:0] icmp_ln13_1_fu_203_p2;
reg   [0:0] icmp_ln13_1_reg_417;
reg   [0:0] icmp_ln13_1_reg_417_pp0_iter2_reg;
reg   [0:0] icmp_ln13_1_reg_417_pp0_iter3_reg;
reg   [0:0] icmp_ln13_1_reg_417_pp0_iter4_reg;
reg   [0:0] icmp_ln13_1_reg_417_pp0_iter5_reg;
reg   [0:0] icmp_ln13_1_reg_417_pp0_iter6_reg;
wire   [0:0] grp_fu_104_p2;
reg   [0:0] tmp_4_reg_422;
reg   [0:0] tmp_4_reg_422_pp0_iter3_reg;
reg   [0:0] tmp_4_reg_422_pp0_iter4_reg;
reg   [0:0] tmp_4_reg_422_pp0_iter5_reg;
reg   [0:0] tmp_4_reg_422_pp0_iter6_reg;
wire   [63:0] grp_fu_95_p1;
reg   [63:0] tmp_reg_427;
wire   [0:0] grp_fu_109_p2;
reg   [0:0] tmp_6_reg_432;
reg   [0:0] tmp_6_reg_432_pp0_iter3_reg;
reg   [0:0] tmp_6_reg_432_pp0_iter4_reg;
reg   [0:0] tmp_6_reg_432_pp0_iter5_reg;
reg   [0:0] tmp_6_reg_432_pp0_iter6_reg;
reg   [0:0] tmp_6_reg_432_pp0_iter7_reg;
reg   [0:0] tmp_6_reg_432_pp0_iter8_reg;
wire   [63:0] grp_fu_114_p2;
reg   [63:0] p_op_reg_437;
wire   [7:0] result_fu_355_p3;
reg   [7:0] result_reg_442;
wire   [63:0] zext_ln15_1_fu_363_p1;
wire    ap_block_pp0_stage0;
wire   [31:0] bitcast_ln12_fu_119_p1;
wire   [7:0] tmp_1_fu_122_p4;
wire   [22:0] trunc_ln12_fu_132_p1;
wire   [0:0] icmp_ln12_1_fu_142_p2;
wire   [0:0] icmp_ln12_fu_136_p2;
wire   [0:0] grp_fu_98_p2;
wire   [31:0] xor_ln12_fu_160_p2;
wire   [0:0] and_ln12_fu_154_p2;
wire   [31:0] bitcast_ln12_1_fu_166_p1;
wire   [31:0] bitcast_ln13_fu_179_p1;
wire   [7:0] tmp_3_fu_183_p4;
wire   [22:0] trunc_ln13_fu_193_p1;
wire   [0:0] or_ln13_fu_209_p2;
wire   [0:0] and_ln13_fu_213_p2;
wire   [63:0] bitcast_ln459_fu_218_p1;
wire   [63:0] data_fu_221_p3;
wire   [51:0] trunc_ln505_fu_247_p1;
wire   [53:0] mantissa_fu_251_p4;
wire   [10:0] xs_exp_fu_237_p4;
wire   [11:0] zext_ln486_fu_265_p1;
wire   [11:0] add_ln486_fu_269_p2;
wire   [10:0] sub_ln18_fu_283_p2;
wire   [0:0] tmp_303_fu_275_p3;
wire  signed [11:0] sext_ln18_fu_289_p1;
wire   [11:0] select_ln18_fu_293_p3;
wire  signed [31:0] sext_ln18_1_fu_301_p1;
wire   [136:0] zext_ln15_fu_261_p1;
wire   [136:0] zext_ln18_fu_305_p1;
wire   [136:0] lshr_ln18_fu_309_p2;
wire   [136:0] shl_ln18_fu_315_p2;
wire   [7:0] tmp_s_fu_321_p4;
wire   [7:0] tmp_152_fu_331_p4;
wire   [7:0] val_fu_341_p3;
wire   [0:0] xs_sign_fu_229_p3;
wire   [7:0] result_2_fu_349_p2;
wire   [31:0] bitcast_ln15_fu_371_p1;
wire   [31:0] xor_ln15_fu_375_p2;
wire   [0:0] and_ln15_fu_367_p2;
wire   [31:0] bitcast_ln15_1_fu_381_p1;
wire    ap_block_pp0_stage0_00001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to8;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

cnn_lenet_SIGMOID_sigmoidLUT_1_RAM_1P_LUTRAM_1R1W #(
    .DataWidth( 32 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sigmoidLUT_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoidLUT_1_address0),
    .ce0(sigmoidLUT_1_ce0),
    .q0(sigmoidLUT_1_q0)
);

cnn_lenet_fpext_32ns_64_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
fpext_32ns_64_2_no_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_fu_170_p3),
    .ce(1'b1),
    .dout(grp_fu_95_p1)
);

cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_98_p2)
);

cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(temp_fu_170_p3),
    .din1(32'd1086324736),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_104_p2)
);

cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fcmp_32ns_32ns_1_2_no_dsp_1_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(x_read_reg_393),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_109_p2)
);

cnn_lenet_dmul_64ns_64ns_64_4_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 64 ),
    .din1_WIDTH( 64 ),
    .dout_WIDTH( 64 ))
dmul_64ns_64ns_64_4_max_dsp_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_427),
    .din1(64'd4631178160564600832),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_1_reg_417 <= icmp_ln13_1_fu_203_p2;
        icmp_ln13_reg_412 <= icmp_ln13_fu_197_p2;
        or_ln12_reg_401 <= or_ln12_fu_148_p2;
        x_read_reg_393 <= x;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln13_1_reg_417_pp0_iter2_reg <= icmp_ln13_1_reg_417;
        icmp_ln13_1_reg_417_pp0_iter3_reg <= icmp_ln13_1_reg_417_pp0_iter2_reg;
        icmp_ln13_1_reg_417_pp0_iter4_reg <= icmp_ln13_1_reg_417_pp0_iter3_reg;
        icmp_ln13_1_reg_417_pp0_iter5_reg <= icmp_ln13_1_reg_417_pp0_iter4_reg;
        icmp_ln13_1_reg_417_pp0_iter6_reg <= icmp_ln13_1_reg_417_pp0_iter5_reg;
        icmp_ln13_reg_412_pp0_iter2_reg <= icmp_ln13_reg_412;
        icmp_ln13_reg_412_pp0_iter3_reg <= icmp_ln13_reg_412_pp0_iter2_reg;
        icmp_ln13_reg_412_pp0_iter4_reg <= icmp_ln13_reg_412_pp0_iter3_reg;
        icmp_ln13_reg_412_pp0_iter5_reg <= icmp_ln13_reg_412_pp0_iter4_reg;
        icmp_ln13_reg_412_pp0_iter6_reg <= icmp_ln13_reg_412_pp0_iter5_reg;
        or_ln12_reg_401_pp0_iter2_reg <= or_ln12_reg_401;
        or_ln12_reg_401_pp0_iter3_reg <= or_ln12_reg_401_pp0_iter2_reg;
        or_ln12_reg_401_pp0_iter4_reg <= or_ln12_reg_401_pp0_iter3_reg;
        or_ln12_reg_401_pp0_iter5_reg <= or_ln12_reg_401_pp0_iter4_reg;
        or_ln12_reg_401_pp0_iter6_reg <= or_ln12_reg_401_pp0_iter5_reg;
        or_ln12_reg_401_pp0_iter7_reg <= or_ln12_reg_401_pp0_iter6_reg;
        or_ln12_reg_401_pp0_iter8_reg <= or_ln12_reg_401_pp0_iter7_reg;
        p_op_reg_437 <= grp_fu_114_p2;
        result_reg_442 <= result_fu_355_p3;
        tmp_4_reg_422 <= grp_fu_104_p2;
        tmp_4_reg_422_pp0_iter3_reg <= tmp_4_reg_422;
        tmp_4_reg_422_pp0_iter4_reg <= tmp_4_reg_422_pp0_iter3_reg;
        tmp_4_reg_422_pp0_iter5_reg <= tmp_4_reg_422_pp0_iter4_reg;
        tmp_4_reg_422_pp0_iter6_reg <= tmp_4_reg_422_pp0_iter5_reg;
        tmp_6_reg_432 <= grp_fu_109_p2;
        tmp_6_reg_432_pp0_iter3_reg <= tmp_6_reg_432;
        tmp_6_reg_432_pp0_iter4_reg <= tmp_6_reg_432_pp0_iter3_reg;
        tmp_6_reg_432_pp0_iter5_reg <= tmp_6_reg_432_pp0_iter4_reg;
        tmp_6_reg_432_pp0_iter6_reg <= tmp_6_reg_432_pp0_iter5_reg;
        tmp_6_reg_432_pp0_iter7_reg <= tmp_6_reg_432_pp0_iter6_reg;
        tmp_6_reg_432_pp0_iter8_reg <= tmp_6_reg_432_pp0_iter7_reg;
        tmp_reg_427 <= grp_fu_95_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter9 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to8 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter8 == 1'b1))) begin
        sigmoidLUT_1_ce0 = 1'b1;
    end else begin
        sigmoidLUT_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln486_fu_269_p2 = ($signed(zext_ln486_fu_265_p1) + $signed(12'd3073));

assign and_ln12_fu_154_p2 = (or_ln12_fu_148_p2 & grp_fu_98_p2);

assign and_ln13_fu_213_p2 = (tmp_4_reg_422_pp0_iter6_reg & or_ln13_fu_209_p2);

assign and_ln15_fu_367_p2 = (tmp_6_reg_432_pp0_iter8_reg & or_ln12_reg_401_pp0_iter8_reg);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((and_ln15_fu_367_p2[0:0] == 1'b1) ? sigmoidLUT_1_q0 : bitcast_ln15_1_fu_381_p1);

assign bitcast_ln12_1_fu_166_p1 = xor_ln12_fu_160_p2;

assign bitcast_ln12_fu_119_p1 = x_read_reg_393;

assign bitcast_ln13_fu_179_p1 = temp_fu_170_p3;

assign bitcast_ln15_1_fu_381_p1 = xor_ln15_fu_375_p2;

assign bitcast_ln15_fu_371_p1 = sigmoidLUT_1_q0;

assign bitcast_ln459_fu_218_p1 = p_op_reg_437;

assign data_fu_221_p3 = ((and_ln13_fu_213_p2[0:0] == 1'b1) ? 64'd4643176031446892544 : bitcast_ln459_fu_218_p1);

assign icmp_ln12_1_fu_142_p2 = ((trunc_ln12_fu_132_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln12_fu_136_p2 = ((tmp_1_fu_122_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln13_1_fu_203_p2 = ((trunc_ln13_fu_193_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_197_p2 = ((tmp_3_fu_183_p4 != 8'd255) ? 1'b1 : 1'b0);

assign lshr_ln18_fu_309_p2 = zext_ln15_fu_261_p1 >> zext_ln18_fu_305_p1;

assign mantissa_fu_251_p4 = {{{{1'd1}, {trunc_ln505_fu_247_p1}}}, {1'd0}};

assign or_ln12_fu_148_p2 = (icmp_ln12_fu_136_p2 | icmp_ln12_1_fu_142_p2);

assign or_ln13_fu_209_p2 = (icmp_ln13_reg_412_pp0_iter6_reg | icmp_ln13_1_reg_417_pp0_iter6_reg);

assign result_2_fu_349_p2 = (8'd0 - val_fu_341_p3);

assign result_fu_355_p3 = ((xs_sign_fu_229_p3[0:0] == 1'b1) ? result_2_fu_349_p2 : val_fu_341_p3);

assign select_ln18_fu_293_p3 = ((tmp_303_fu_275_p3[0:0] == 1'b1) ? sext_ln18_fu_289_p1 : add_ln486_fu_269_p2);

assign sext_ln18_1_fu_301_p1 = $signed(select_ln18_fu_293_p3);

assign sext_ln18_fu_289_p1 = $signed(sub_ln18_fu_283_p2);

assign shl_ln18_fu_315_p2 = zext_ln15_fu_261_p1 << zext_ln18_fu_305_p1;

assign sigmoidLUT_1_address0 = zext_ln15_1_fu_363_p1;

assign sub_ln18_fu_283_p2 = (11'd1023 - xs_exp_fu_237_p4);

assign temp_fu_170_p3 = ((and_ln12_fu_154_p2[0:0] == 1'b1) ? bitcast_ln12_1_fu_166_p1 : x_read_reg_393);

assign tmp_152_fu_331_p4 = {{shl_ln18_fu_315_p2[60:53]}};

assign tmp_1_fu_122_p4 = {{bitcast_ln12_fu_119_p1[30:23]}};

assign tmp_303_fu_275_p3 = add_ln486_fu_269_p2[32'd11];

assign tmp_3_fu_183_p4 = {{bitcast_ln13_fu_179_p1[30:23]}};

assign tmp_s_fu_321_p4 = {{lshr_ln18_fu_309_p2[60:53]}};

assign trunc_ln12_fu_132_p1 = bitcast_ln12_fu_119_p1[22:0];

assign trunc_ln13_fu_193_p1 = bitcast_ln13_fu_179_p1[22:0];

assign trunc_ln505_fu_247_p1 = data_fu_221_p3[51:0];

assign val_fu_341_p3 = ((tmp_303_fu_275_p3[0:0] == 1'b1) ? tmp_s_fu_321_p4 : tmp_152_fu_331_p4);

assign xor_ln12_fu_160_p2 = (bitcast_ln12_fu_119_p1 ^ 32'd2147483648);

assign xor_ln15_fu_375_p2 = (bitcast_ln15_fu_371_p1 ^ 32'd2147483648);

assign xs_exp_fu_237_p4 = {{data_fu_221_p3[62:52]}};

assign xs_sign_fu_229_p3 = data_fu_221_p3[32'd63];

assign zext_ln15_1_fu_363_p1 = result_reg_442;

assign zext_ln15_fu_261_p1 = mantissa_fu_251_p4;

assign zext_ln18_fu_305_p1 = $unsigned(sext_ln18_1_fu_301_p1);

assign zext_ln486_fu_265_p1 = xs_exp_fu_237_p4;

endmodule //cnn_lenet_SIGMOID
