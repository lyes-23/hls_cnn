-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_lenet_SIGMOID is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn_lenet_SIGMOID is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_40C00000 : STD_LOGIC_VECTOR (31 downto 0) := "01000000110000000000000000000000";
    constant ap_const_lv64_4045400000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001000101010000000000000000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv64_406FE00000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0100000001101111111000000000000000000000000000000000000000000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv12_C01 : STD_LOGIC_VECTOR (11 downto 0) := "110000000001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sigmoidLUT_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sigmoidLUT_1_ce0 : STD_LOGIC;
    signal sigmoidLUT_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal x_read_reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln12_fu_148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_reg_401_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal temp_fu_170_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_197_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_412 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_412_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_412_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_412_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_412_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_412_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_417 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_417_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_1_reg_417_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_104_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_422 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_422_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_422_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_422_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_422_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_95_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_reg_427 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_109_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_432_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_114_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_op_reg_437 : STD_LOGIC_VECTOR (63 downto 0);
    signal result_fu_355_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_reg_442 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln15_1_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal bitcast_ln12_fu_119_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_122_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln12_fu_132_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln12_1_fu_142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln12_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln12_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln12_1_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln13_fu_179_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_183_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln13_fu_193_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal or_ln13_fu_209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln459_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal data_fu_221_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln505_fu_247_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal mantissa_fu_251_p4 : STD_LOGIC_VECTOR (53 downto 0);
    signal xs_exp_fu_237_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln486_fu_265_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln486_fu_269_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln18_fu_283_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_303_fu_275_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln18_fu_289_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln18_fu_293_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln18_1_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_261_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal zext_ln18_fu_305_p1 : STD_LOGIC_VECTOR (136 downto 0);
    signal lshr_ln18_fu_309_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal shl_ln18_fu_315_p2 : STD_LOGIC_VECTOR (136 downto 0);
    signal tmp_s_fu_321_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_fu_331_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_fu_341_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xs_sign_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_2_fu_349_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln15_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xor_ln15_fu_375_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln15_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln15_1_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to8 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component cnn_lenet_fpext_32ns_64_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_lenet_dmul_64ns_64ns_64_4_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_lenet_SIGMOID_sigmoidLUT_1_RAM_1P_LUTRAM_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sigmoidLUT_1_U : component cnn_lenet_SIGMOID_sigmoidLUT_1_RAM_1P_LUTRAM_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sigmoidLUT_1_address0,
        ce0 => sigmoidLUT_1_ce0,
        q0 => sigmoidLUT_1_q0);

    fpext_32ns_64_2_no_dsp_1_U1 : component cnn_lenet_fpext_32ns_64_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_fu_170_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_95_p1);

    fcmp_32ns_32ns_1_2_no_dsp_1_U2 : component cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_98_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U3 : component cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_fu_170_p3,
        din1 => ap_const_lv32_40C00000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_104_p2);

    fcmp_32ns_32ns_1_2_no_dsp_1_U4 : component cnn_lenet_fcmp_32ns_32ns_1_2_no_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => x_read_reg_393,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_109_p2);

    dmul_64ns_64ns_64_4_max_dsp_1_U5 : component cnn_lenet_dmul_64ns_64ns_64_4_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_427,
        din1 => ap_const_lv64_4045400000000000,
        ce => ap_const_logic_1,
        dout => grp_fu_114_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln13_1_reg_417 <= icmp_ln13_1_fu_203_p2;
                icmp_ln13_reg_412 <= icmp_ln13_fu_197_p2;
                or_ln12_reg_401 <= or_ln12_fu_148_p2;
                x_read_reg_393 <= x;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln13_1_reg_417_pp0_iter2_reg <= icmp_ln13_1_reg_417;
                icmp_ln13_1_reg_417_pp0_iter3_reg <= icmp_ln13_1_reg_417_pp0_iter2_reg;
                icmp_ln13_1_reg_417_pp0_iter4_reg <= icmp_ln13_1_reg_417_pp0_iter3_reg;
                icmp_ln13_1_reg_417_pp0_iter5_reg <= icmp_ln13_1_reg_417_pp0_iter4_reg;
                icmp_ln13_1_reg_417_pp0_iter6_reg <= icmp_ln13_1_reg_417_pp0_iter5_reg;
                icmp_ln13_reg_412_pp0_iter2_reg <= icmp_ln13_reg_412;
                icmp_ln13_reg_412_pp0_iter3_reg <= icmp_ln13_reg_412_pp0_iter2_reg;
                icmp_ln13_reg_412_pp0_iter4_reg <= icmp_ln13_reg_412_pp0_iter3_reg;
                icmp_ln13_reg_412_pp0_iter5_reg <= icmp_ln13_reg_412_pp0_iter4_reg;
                icmp_ln13_reg_412_pp0_iter6_reg <= icmp_ln13_reg_412_pp0_iter5_reg;
                or_ln12_reg_401_pp0_iter2_reg <= or_ln12_reg_401;
                or_ln12_reg_401_pp0_iter3_reg <= or_ln12_reg_401_pp0_iter2_reg;
                or_ln12_reg_401_pp0_iter4_reg <= or_ln12_reg_401_pp0_iter3_reg;
                or_ln12_reg_401_pp0_iter5_reg <= or_ln12_reg_401_pp0_iter4_reg;
                or_ln12_reg_401_pp0_iter6_reg <= or_ln12_reg_401_pp0_iter5_reg;
                or_ln12_reg_401_pp0_iter7_reg <= or_ln12_reg_401_pp0_iter6_reg;
                or_ln12_reg_401_pp0_iter8_reg <= or_ln12_reg_401_pp0_iter7_reg;
                p_op_reg_437 <= grp_fu_114_p2;
                result_reg_442 <= result_fu_355_p3;
                tmp_4_reg_422 <= grp_fu_104_p2;
                tmp_4_reg_422_pp0_iter3_reg <= tmp_4_reg_422;
                tmp_4_reg_422_pp0_iter4_reg <= tmp_4_reg_422_pp0_iter3_reg;
                tmp_4_reg_422_pp0_iter5_reg <= tmp_4_reg_422_pp0_iter4_reg;
                tmp_4_reg_422_pp0_iter6_reg <= tmp_4_reg_422_pp0_iter5_reg;
                tmp_6_reg_432 <= grp_fu_109_p2;
                tmp_6_reg_432_pp0_iter3_reg <= tmp_6_reg_432;
                tmp_6_reg_432_pp0_iter4_reg <= tmp_6_reg_432_pp0_iter3_reg;
                tmp_6_reg_432_pp0_iter5_reg <= tmp_6_reg_432_pp0_iter4_reg;
                tmp_6_reg_432_pp0_iter6_reg <= tmp_6_reg_432_pp0_iter5_reg;
                tmp_6_reg_432_pp0_iter7_reg <= tmp_6_reg_432_pp0_iter6_reg;
                tmp_6_reg_432_pp0_iter8_reg <= tmp_6_reg_432_pp0_iter7_reg;
                tmp_reg_427 <= grp_fu_95_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln486_fu_269_p2 <= std_logic_vector(unsigned(zext_ln486_fu_265_p1) + unsigned(ap_const_lv12_C01));
    and_ln12_fu_154_p2 <= (or_ln12_fu_148_p2 and grp_fu_98_p2);
    and_ln13_fu_213_p2 <= (tmp_4_reg_422_pp0_iter6_reg and or_ln13_fu_209_p2);
    and_ln15_fu_367_p2 <= (tmp_6_reg_432_pp0_iter8_reg and or_ln12_reg_401_pp0_iter8_reg);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to8_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to8 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to8)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to8 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        sigmoidLUT_1_q0 when (and_ln15_fu_367_p2(0) = '1') else 
        bitcast_ln15_1_fu_381_p1;
    bitcast_ln12_1_fu_166_p1 <= xor_ln12_fu_160_p2;
    bitcast_ln12_fu_119_p1 <= x_read_reg_393;
    bitcast_ln13_fu_179_p1 <= temp_fu_170_p3;
    bitcast_ln15_1_fu_381_p1 <= xor_ln15_fu_375_p2;
    bitcast_ln15_fu_371_p1 <= sigmoidLUT_1_q0;
    bitcast_ln459_fu_218_p1 <= p_op_reg_437;
    data_fu_221_p3 <= 
        ap_const_lv64_406FE00000000000 when (and_ln13_fu_213_p2(0) = '1') else 
        bitcast_ln459_fu_218_p1;
    icmp_ln12_1_fu_142_p2 <= "1" when (trunc_ln12_fu_132_p1 = ap_const_lv23_0) else "0";
    icmp_ln12_fu_136_p2 <= "0" when (tmp_1_fu_122_p4 = ap_const_lv8_FF) else "1";
    icmp_ln13_1_fu_203_p2 <= "1" when (trunc_ln13_fu_193_p1 = ap_const_lv23_0) else "0";
    icmp_ln13_fu_197_p2 <= "0" when (tmp_3_fu_183_p4 = ap_const_lv8_FF) else "1";
    lshr_ln18_fu_309_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_261_p1),to_integer(unsigned('0' & zext_ln18_fu_305_p1(31-1 downto 0)))));
    mantissa_fu_251_p4 <= ((ap_const_lv1_1 & trunc_ln505_fu_247_p1) & ap_const_lv1_0);
    or_ln12_fu_148_p2 <= (icmp_ln12_fu_136_p2 or icmp_ln12_1_fu_142_p2);
    or_ln13_fu_209_p2 <= (icmp_ln13_reg_412_pp0_iter6_reg or icmp_ln13_1_reg_417_pp0_iter6_reg);
    result_2_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv8_0) - unsigned(val_fu_341_p3));
    result_fu_355_p3 <= 
        result_2_fu_349_p2 when (xs_sign_fu_229_p3(0) = '1') else 
        val_fu_341_p3;
    select_ln18_fu_293_p3 <= 
        sext_ln18_fu_289_p1 when (tmp_303_fu_275_p3(0) = '1') else 
        add_ln486_fu_269_p2;
        sext_ln18_1_fu_301_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln18_fu_293_p3),32));

        sext_ln18_fu_289_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln18_fu_283_p2),12));

    shl_ln18_fu_315_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_261_p1),to_integer(unsigned('0' & zext_ln18_fu_305_p1(31-1 downto 0)))));
    sigmoidLUT_1_address0 <= zext_ln15_1_fu_363_p1(8 - 1 downto 0);

    sigmoidLUT_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter8, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
            sigmoidLUT_1_ce0 <= ap_const_logic_1;
        else 
            sigmoidLUT_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln18_fu_283_p2 <= std_logic_vector(unsigned(ap_const_lv11_3FF) - unsigned(xs_exp_fu_237_p4));
    temp_fu_170_p3 <= 
        bitcast_ln12_1_fu_166_p1 when (and_ln12_fu_154_p2(0) = '1') else 
        x_read_reg_393;
    tmp_152_fu_331_p4 <= shl_ln18_fu_315_p2(60 downto 53);
    tmp_1_fu_122_p4 <= bitcast_ln12_fu_119_p1(30 downto 23);
    tmp_303_fu_275_p3 <= add_ln486_fu_269_p2(11 downto 11);
    tmp_3_fu_183_p4 <= bitcast_ln13_fu_179_p1(30 downto 23);
    tmp_s_fu_321_p4 <= lshr_ln18_fu_309_p2(60 downto 53);
    trunc_ln12_fu_132_p1 <= bitcast_ln12_fu_119_p1(23 - 1 downto 0);
    trunc_ln13_fu_193_p1 <= bitcast_ln13_fu_179_p1(23 - 1 downto 0);
    trunc_ln505_fu_247_p1 <= data_fu_221_p3(52 - 1 downto 0);
    val_fu_341_p3 <= 
        tmp_s_fu_321_p4 when (tmp_303_fu_275_p3(0) = '1') else 
        tmp_152_fu_331_p4;
    xor_ln12_fu_160_p2 <= (bitcast_ln12_fu_119_p1 xor ap_const_lv32_80000000);
    xor_ln15_fu_375_p2 <= (bitcast_ln15_fu_371_p1 xor ap_const_lv32_80000000);
    xs_exp_fu_237_p4 <= data_fu_221_p3(62 downto 52);
    xs_sign_fu_229_p3 <= data_fu_221_p3(63 downto 63);
    zext_ln15_1_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_reg_442),64));
    zext_ln15_fu_261_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_251_p4),137));
    zext_ln18_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln18_1_fu_301_p1),137));
    zext_ln486_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_fu_237_p4),12));
end behav;
