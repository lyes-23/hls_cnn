#include "hls_design_meta.h"
const Port_Property HLS_Design_Meta::port_props[]={
	Port_Property("ap_clk", 1, hls_in, -1, "", "", 1),
	Port_Property("ap_rst_n", 1, hls_in, -1, "", "", 1),
	Port_Property("m_axi_Layer_Neurons_AWVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Neurons_AWREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Neurons_AWADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_Layer_Neurons_AWID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Neurons_AWLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_Layer_Neurons_AWSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_Layer_Neurons_AWBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_Layer_Neurons_AWLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_Layer_Neurons_AWCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_Layer_Neurons_AWPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_Layer_Neurons_AWQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_Layer_Neurons_AWREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_Layer_Neurons_AWUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Neurons_WVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Neurons_WREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Neurons_WDATA", 32, hls_out, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_Layer_Neurons_WSTRB", 4, hls_out, 0, "m_axi", "STRB", 1),
	Port_Property("m_axi_Layer_Neurons_WLAST", 1, hls_out, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_Layer_Neurons_WID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Neurons_WUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Neurons_ARVALID", 1, hls_out, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Neurons_ARREADY", 1, hls_in, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Neurons_ARADDR", 64, hls_out, 0, "m_axi", "ADDR", 1),
	Port_Property("m_axi_Layer_Neurons_ARID", 1, hls_out, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Neurons_ARLEN", 8, hls_out, 0, "m_axi", "SIZE", 1),
	Port_Property("m_axi_Layer_Neurons_ARSIZE", 3, hls_out, 0, "m_axi", "BURST", 1),
	Port_Property("m_axi_Layer_Neurons_ARBURST", 2, hls_out, 0, "m_axi", "LOCK", 1),
	Port_Property("m_axi_Layer_Neurons_ARLOCK", 2, hls_out, 0, "m_axi", "CACHE", 1),
	Port_Property("m_axi_Layer_Neurons_ARCACHE", 4, hls_out, 0, "m_axi", "PROT", 1),
	Port_Property("m_axi_Layer_Neurons_ARPROT", 3, hls_out, 0, "m_axi", "QOS", 1),
	Port_Property("m_axi_Layer_Neurons_ARQOS", 4, hls_out, 0, "m_axi", "REGION", 1),
	Port_Property("m_axi_Layer_Neurons_ARREGION", 4, hls_out, 0, "m_axi", "USER", 1),
	Port_Property("m_axi_Layer_Neurons_ARUSER", 1, hls_out, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Neurons_RVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Neurons_RREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Neurons_RDATA", 32, hls_in, 0, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_Layer_Neurons_RLAST", 1, hls_in, 0, "m_axi", "LAST", 1),
	Port_Property("m_axi_Layer_Neurons_RID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Neurons_RUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Neurons_RRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_Layer_Neurons_BVALID", 1, hls_in, 0, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Neurons_BREADY", 1, hls_out, 0, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Neurons_BRESP", 2, hls_in, 0, "m_axi", "RESP", 1),
	Port_Property("m_axi_Layer_Neurons_BID", 1, hls_in, 0, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Neurons_BUSER", 1, hls_in, 0, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Weights_AWVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Weights_AWREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Weights_AWADDR", 64, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_Layer_Weights_AWID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Weights_AWLEN", 8, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_Layer_Weights_AWSIZE", 3, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_Layer_Weights_AWBURST", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_Layer_Weights_AWLOCK", 2, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_Layer_Weights_AWCACHE", 4, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_Layer_Weights_AWPROT", 3, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_Layer_Weights_AWQOS", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_Layer_Weights_AWREGION", 4, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_Layer_Weights_AWUSER", 1, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Weights_WVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Weights_WREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Weights_WDATA", 32, hls_out, 1, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_Layer_Weights_WSTRB", 4, hls_out, 1, "m_axi", "STRB", 1),
	Port_Property("m_axi_Layer_Weights_WLAST", 1, hls_out, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_Layer_Weights_WID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Weights_WUSER", 1, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Weights_ARVALID", 1, hls_out, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Weights_ARREADY", 1, hls_in, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Weights_ARADDR", 64, hls_out, 1, "m_axi", "ADDR", 1),
	Port_Property("m_axi_Layer_Weights_ARID", 1, hls_out, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Weights_ARLEN", 8, hls_out, 1, "m_axi", "SIZE", 1),
	Port_Property("m_axi_Layer_Weights_ARSIZE", 3, hls_out, 1, "m_axi", "BURST", 1),
	Port_Property("m_axi_Layer_Weights_ARBURST", 2, hls_out, 1, "m_axi", "LOCK", 1),
	Port_Property("m_axi_Layer_Weights_ARLOCK", 2, hls_out, 1, "m_axi", "CACHE", 1),
	Port_Property("m_axi_Layer_Weights_ARCACHE", 4, hls_out, 1, "m_axi", "PROT", 1),
	Port_Property("m_axi_Layer_Weights_ARPROT", 3, hls_out, 1, "m_axi", "QOS", 1),
	Port_Property("m_axi_Layer_Weights_ARQOS", 4, hls_out, 1, "m_axi", "REGION", 1),
	Port_Property("m_axi_Layer_Weights_ARREGION", 4, hls_out, 1, "m_axi", "USER", 1),
	Port_Property("m_axi_Layer_Weights_ARUSER", 1, hls_out, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Weights_RVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Weights_RREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Weights_RDATA", 32, hls_in, 1, "m_axi", "FIFONUM", 1),
	Port_Property("m_axi_Layer_Weights_RLAST", 1, hls_in, 1, "m_axi", "LAST", 1),
	Port_Property("m_axi_Layer_Weights_RID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Weights_RUSER", 1, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("m_axi_Layer_Weights_RRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_Layer_Weights_BVALID", 1, hls_in, 1, "m_axi", "VALID", 1),
	Port_Property("m_axi_Layer_Weights_BREADY", 1, hls_out, 1, "m_axi", "READY", 1),
	Port_Property("m_axi_Layer_Weights_BRESP", 2, hls_in, 1, "m_axi", "RESP", 1),
	Port_Property("m_axi_Layer_Weights_BID", 1, hls_in, 1, "m_axi", "ID", 1),
	Port_Property("m_axi_Layer_Weights_BUSER", 1, hls_in, 1, "m_axi", "DATA", 1),
	Port_Property("s_axi_CTRL_bus_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_AWADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_ARADDR", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_CTRL_bus_BRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("interrupt", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_AWREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_AWADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_WDATA", 32, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_WSTRB", 4, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARVALID", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_ARREADY", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_ARADDR", 7, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_RDATA", 32, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_RRESP", 2, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BVALID", 1, hls_out, -1, "", "", 1),
	Port_Property("s_axi_control_BREADY", 1, hls_in, -1, "", "", 1),
	Port_Property("s_axi_control_BRESP", 2, hls_out, -1, "", "", 1),
};
const char* HLS_Design_Meta::dut_name = "cnn_lenet";
