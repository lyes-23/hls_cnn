-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn_lenet_cnn_lenet_Pipeline_col_loop2_kernelRow_Loop2_kernelCol_loop2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    somme : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Layer_Weights_AWVALID : OUT STD_LOGIC;
    m_axi_Layer_Weights_AWREADY : IN STD_LOGIC;
    m_axi_Layer_Weights_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_Layer_Weights_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Layer_Weights_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Layer_Weights_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Layer_Weights_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Layer_Weights_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Layer_Weights_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_WVALID : OUT STD_LOGIC;
    m_axi_Layer_Weights_WREADY : IN STD_LOGIC;
    m_axi_Layer_Weights_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Layer_Weights_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_WLAST : OUT STD_LOGIC;
    m_axi_Layer_Weights_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_ARVALID : OUT STD_LOGIC;
    m_axi_Layer_Weights_ARREADY : IN STD_LOGIC;
    m_axi_Layer_Weights_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_Layer_Weights_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Layer_Weights_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Layer_Weights_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Layer_Weights_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Layer_Weights_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_Layer_Weights_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_Layer_Weights_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_RVALID : IN STD_LOGIC;
    m_axi_Layer_Weights_RREADY : OUT STD_LOGIC;
    m_axi_Layer_Weights_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_Layer_Weights_RLAST : IN STD_LOGIC;
    m_axi_Layer_Weights_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_Layer_Weights_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Layer_Weights_BVALID : IN STD_LOGIC;
    m_axi_Layer_Weights_BREADY : OUT STD_LOGIC;
    m_axi_Layer_Weights_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_Layer_Weights_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_Layer_Weights_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln75 : IN STD_LOGIC_VECTOR (61 downto 0);
    Layer3_Neurons_CPU_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    Layer3_Neurons_CPU_ce0 : OUT STD_LOGIC;
    Layer3_Neurons_CPU_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    somme_61_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    somme_61_out_ap_vld : OUT STD_LOGIC;
    grp_fu_473_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_473_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_473_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_473_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_473_p_ce : OUT STD_LOGIC;
    grp_fu_477_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_477_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_477_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_477_p_ce : OUT STD_LOGIC );
end;


architecture behav of cnn_lenet_cnn_lenet_Pipeline_col_loop2_kernelRow_Loop2_kernelCol_loop2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_4E2 : STD_LOGIC_VECTOR (10 downto 0) := "10011100010";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_19 : STD_LOGIC_VECTOR (10 downto 0) := "00000011001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln75_reg_445 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal Layer_Weights_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln75_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_445_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_445_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_fu_204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_reg_461 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal Layer_Weights_addr_read_reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal Layer3_Neurons_CPU_load_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln79_fu_371_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul7_reg_491 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal zext_ln79_1_fu_355_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal somme_1_fu_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_somme_1_load_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal m_fu_84 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln77_fu_294_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal k_fu_88 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln76_fu_321_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten51_fu_92 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln76_1_fu_234_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten51_load : STD_LOGIC_VECTOR (5 downto 0);
    signal j_fu_96 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln75_fu_216_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_j_load : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten66_fu_100 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln75_fu_192_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten66_load : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal add_ln75_1_fu_210_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln76_1_fu_228_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln77_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_1_fu_282_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_fu_308_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln76_fu_315_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl1_fu_332_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_fu_328_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln79_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_388_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln79_fu_346_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln79_1_fu_350_p2 : STD_LOGIC_VECTOR (10 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln79_1_fu_350_p2 : signal is "no";
    signal grp_fu_388_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_388_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_388_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_141_ce : STD_LOGIC;
    signal grp_fu_145_ce : STD_LOGIC;
    signal grp_fu_388_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter2_stage1 : STD_LOGIC;
    signal ap_idle_pp0_0to1 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to3 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal grp_fu_388_p00 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_388_p20 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component cnn_lenet_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_lenet_fmul_32ns_32ns_32_2_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_lenet_mac_muladd_6ns_5ns_3ns_11_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component cnn_lenet_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mac_muladd_6ns_5ns_3ns_11_4_1_U40 : component cnn_lenet_mac_muladd_6ns_5ns_3ns_11_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 3,
        dout_WIDTH => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_388_p0,
        din1 => grp_fu_388_p1,
        din2 => grp_fu_388_p2,
        ce => grp_fu_388_ce,
        dout => grp_fu_388_p3);

    flow_control_loop_pipe_sequential_init_U : component cnn_lenet_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    indvar_flatten51_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln75_fu_186_p2 = ap_const_lv1_0))) then 
                    indvar_flatten51_fu_92 <= select_ln76_1_fu_234_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten51_fu_92 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten66_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln75_fu_186_p2 = ap_const_lv1_0))) then 
                    indvar_flatten66_fu_100 <= add_ln75_fu_192_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten66_fu_100 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    j_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln75_fu_186_p2 = ap_const_lv1_0))) then 
                    j_fu_96 <= select_ln75_fu_216_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_96 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    k_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_88 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then 
                    k_fu_88 <= select_ln76_fu_321_p3;
                end if;
            end if; 
        end if;
    end process;

    m_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                m_fu_84 <= ap_const_lv3_0;
            elsif (((icmp_ln75_reg_445 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                m_fu_84 <= add_ln77_fu_294_p2;
            end if; 
        end if;
    end process;

    somme_1_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                somme_1_fu_80 <= somme;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                somme_1_fu_80 <= grp_fu_473_p_dout0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                Layer3_Neurons_CPU_load_reg_481 <= Layer3_Neurons_CPU_q0;
                Layer_Weights_addr_read_reg_476 <= m_axi_Layer_Weights_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                and_ln29_reg_461 <= and_ln29_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln75_reg_445 <= icmp_ln75_fu_186_p2;
                icmp_ln75_reg_445_pp0_iter1_reg <= icmp_ln75_reg_445;
                icmp_ln75_reg_445_pp0_iter2_reg <= icmp_ln75_reg_445_pp0_iter1_reg;
                icmp_ln76_reg_449 <= icmp_ln76_fu_204_p2;
                mul7_reg_491 <= grp_fu_477_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_condition_exit_pp0_iter2_stage1, ap_idle_pp0_0to1, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to3, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to3 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if (((ap_idle_pp0_0to1 = ap_const_logic_1) and (ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    Layer3_Neurons_CPU_address0 <= zext_ln79_1_fu_355_p1(11 - 1 downto 0);

    Layer3_Neurons_CPU_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_1;
        else 
            Layer3_Neurons_CPU_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Layer_Weights_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter1, m_axi_Layer_Weights_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            Layer_Weights_blk_n_R <= m_axi_Layer_Weights_RVALID;
        else 
            Layer_Weights_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln75_1_fu_210_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_load) + unsigned(ap_const_lv6_1));
    add_ln75_fu_192_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten66_load) + unsigned(ap_const_lv11_1));
    add_ln76_1_fu_228_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten51_load) + unsigned(ap_const_lv6_1));
    add_ln76_fu_315_p2 <= std_logic_vector(unsigned(select_ln29_fu_308_p3) + unsigned(ap_const_lv3_1));
    add_ln77_fu_294_p2 <= std_logic_vector(unsigned(select_ln29_1_fu_282_p3) + unsigned(ap_const_lv3_1));
    add_ln79_1_fu_350_p2 <= std_logic_vector(unsigned(grp_fu_388_p3) + unsigned(zext_ln79_fu_346_p1));
    add_ln79_fu_340_p2 <= std_logic_vector(unsigned(p_shl1_fu_332_p3) + unsigned(zext_ln76_fu_328_p1));
    and_ln29_fu_271_p2 <= (xor_ln29_fu_260_p2 and icmp_ln77_fu_265_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_00001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_00001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1));
    end process;


    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage1_iter1));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_pp0_stage1_iter1_assign_proc : process(m_axi_Layer_Weights_RVALID)
    begin
                ap_block_state5_pp0_stage1_iter1 <= (m_axi_Layer_Weights_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln75_reg_445)
    begin
        if (((icmp_ln75_reg_445 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage1_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, icmp_ln75_reg_445_pp0_iter2_reg, ap_block_pp0_stage1_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln75_reg_445_pp0_iter2_reg = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter2_stage1 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to3_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to3 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten51_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten51_fu_92)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten51_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten51_load <= indvar_flatten51_fu_92;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten66_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten66_fu_100)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten66_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten66_load <= indvar_flatten66_fu_100;
        end if; 
    end process;


    ap_sig_allocacmp_j_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_j_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_j_load <= j_fu_96;
        end if; 
    end process;


    ap_sig_allocacmp_somme_1_load_1_assign_proc : process(ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, somme_1_fu_80, grp_fu_473_p_dout0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_sig_allocacmp_somme_1_load_1 <= grp_fu_473_p_dout0;
        else 
            ap_sig_allocacmp_somme_1_load_1 <= somme_1_fu_80;
        end if; 
    end process;

    bitcast_ln79_fu_371_p1 <= Layer_Weights_addr_read_reg_476;

    grp_fu_141_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_141_ce <= ap_const_logic_1;
        else 
            grp_fu_141_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_145_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_145_ce <= ap_const_logic_1;
        else 
            grp_fu_145_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_388_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_388_ce <= ap_const_logic_1;
        else 
            grp_fu_388_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_388_p0 <= grp_fu_388_p00(6 - 1 downto 0);
    grp_fu_388_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln75_fu_216_p3),11));
    grp_fu_388_p1 <= ap_const_lv11_19(5 - 1 downto 0);
    grp_fu_388_p2 <= grp_fu_388_p20(3 - 1 downto 0);
    grp_fu_388_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_1_fu_282_p3),11));
    grp_fu_473_p_ce <= grp_fu_141_ce;
    grp_fu_473_p_din0 <= ap_sig_allocacmp_somme_1_load_1;
    grp_fu_473_p_din1 <= mul7_reg_491;
    grp_fu_473_p_opcode <= ap_const_lv2_0;
    grp_fu_477_p_ce <= grp_fu_145_ce;
    grp_fu_477_p_din0 <= bitcast_ln79_fu_371_p1;
    grp_fu_477_p_din1 <= Layer3_Neurons_CPU_load_reg_481;
    icmp_ln75_fu_186_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten66_load = ap_const_lv11_4E2) else "0";
    icmp_ln76_fu_204_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten51_load = ap_const_lv6_19) else "0";
    icmp_ln77_fu_265_p2 <= "1" when (m_fu_84 = ap_const_lv3_5) else "0";
    m_axi_Layer_Weights_ARADDR <= ap_const_lv64_0;
    m_axi_Layer_Weights_ARBURST <= ap_const_lv2_0;
    m_axi_Layer_Weights_ARCACHE <= ap_const_lv4_0;
    m_axi_Layer_Weights_ARID <= ap_const_lv1_0;
    m_axi_Layer_Weights_ARLEN <= ap_const_lv32_0;
    m_axi_Layer_Weights_ARLOCK <= ap_const_lv2_0;
    m_axi_Layer_Weights_ARPROT <= ap_const_lv3_0;
    m_axi_Layer_Weights_ARQOS <= ap_const_lv4_0;
    m_axi_Layer_Weights_ARREGION <= ap_const_lv4_0;
    m_axi_Layer_Weights_ARSIZE <= ap_const_lv3_0;
    m_axi_Layer_Weights_ARUSER <= ap_const_lv1_0;
    m_axi_Layer_Weights_ARVALID <= ap_const_logic_0;
    m_axi_Layer_Weights_AWADDR <= ap_const_lv64_0;
    m_axi_Layer_Weights_AWBURST <= ap_const_lv2_0;
    m_axi_Layer_Weights_AWCACHE <= ap_const_lv4_0;
    m_axi_Layer_Weights_AWID <= ap_const_lv1_0;
    m_axi_Layer_Weights_AWLEN <= ap_const_lv32_0;
    m_axi_Layer_Weights_AWLOCK <= ap_const_lv2_0;
    m_axi_Layer_Weights_AWPROT <= ap_const_lv3_0;
    m_axi_Layer_Weights_AWQOS <= ap_const_lv4_0;
    m_axi_Layer_Weights_AWREGION <= ap_const_lv4_0;
    m_axi_Layer_Weights_AWSIZE <= ap_const_lv3_0;
    m_axi_Layer_Weights_AWUSER <= ap_const_lv1_0;
    m_axi_Layer_Weights_AWVALID <= ap_const_logic_0;
    m_axi_Layer_Weights_BREADY <= ap_const_logic_0;

    m_axi_Layer_Weights_RREADY_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            m_axi_Layer_Weights_RREADY <= ap_const_logic_1;
        else 
            m_axi_Layer_Weights_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_Layer_Weights_WDATA <= ap_const_lv32_0;
    m_axi_Layer_Weights_WID <= ap_const_lv1_0;
    m_axi_Layer_Weights_WLAST <= ap_const_logic_0;
    m_axi_Layer_Weights_WSTRB <= ap_const_lv4_0;
    m_axi_Layer_Weights_WUSER <= ap_const_lv1_0;
    m_axi_Layer_Weights_WVALID <= ap_const_logic_0;
    or_ln29_fu_277_p2 <= (icmp_ln76_reg_449 or and_ln29_fu_271_p2);
    p_shl1_fu_332_p3 <= (select_ln76_fu_321_p3 & ap_const_lv2_0);
    select_ln29_1_fu_282_p3 <= 
        ap_const_lv3_0 when (or_ln29_fu_277_p2(0) = '1') else 
        m_fu_84;
    select_ln29_fu_308_p3 <= 
        ap_const_lv3_0 when (icmp_ln76_reg_449(0) = '1') else 
        k_fu_88;
    select_ln75_fu_216_p3 <= 
        add_ln75_1_fu_210_p2 when (icmp_ln76_fu_204_p2(0) = '1') else 
        ap_sig_allocacmp_j_load;
    select_ln76_1_fu_234_p3 <= 
        ap_const_lv6_1 when (icmp_ln76_fu_204_p2(0) = '1') else 
        add_ln76_1_fu_228_p2;
    select_ln76_fu_321_p3 <= 
        add_ln76_fu_315_p2 when (and_ln29_reg_461(0) = '1') else 
        select_ln29_fu_308_p3;
    somme_61_out <= somme_1_fu_80;

    somme_61_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage1, icmp_ln75_reg_445_pp0_iter2_reg, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln75_reg_445_pp0_iter2_reg = ap_const_lv1_1))) then 
            somme_61_out_ap_vld <= ap_const_logic_1;
        else 
            somme_61_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln29_fu_260_p2 <= (icmp_ln76_reg_449 xor ap_const_lv1_1);
    zext_ln76_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln76_fu_321_p3),5));
    zext_ln79_1_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_fu_350_p2),64));
    zext_ln79_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_fu_340_p2),11));
end behav;
