// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module cnn_lenet_cnn_lenet_Pipeline_col_loop2_kernelRow_Loop2_kernelCol_loop2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        somme,
        m_axi_Layer_Weights_AWVALID,
        m_axi_Layer_Weights_AWREADY,
        m_axi_Layer_Weights_AWADDR,
        m_axi_Layer_Weights_AWID,
        m_axi_Layer_Weights_AWLEN,
        m_axi_Layer_Weights_AWSIZE,
        m_axi_Layer_Weights_AWBURST,
        m_axi_Layer_Weights_AWLOCK,
        m_axi_Layer_Weights_AWCACHE,
        m_axi_Layer_Weights_AWPROT,
        m_axi_Layer_Weights_AWQOS,
        m_axi_Layer_Weights_AWREGION,
        m_axi_Layer_Weights_AWUSER,
        m_axi_Layer_Weights_WVALID,
        m_axi_Layer_Weights_WREADY,
        m_axi_Layer_Weights_WDATA,
        m_axi_Layer_Weights_WSTRB,
        m_axi_Layer_Weights_WLAST,
        m_axi_Layer_Weights_WID,
        m_axi_Layer_Weights_WUSER,
        m_axi_Layer_Weights_ARVALID,
        m_axi_Layer_Weights_ARREADY,
        m_axi_Layer_Weights_ARADDR,
        m_axi_Layer_Weights_ARID,
        m_axi_Layer_Weights_ARLEN,
        m_axi_Layer_Weights_ARSIZE,
        m_axi_Layer_Weights_ARBURST,
        m_axi_Layer_Weights_ARLOCK,
        m_axi_Layer_Weights_ARCACHE,
        m_axi_Layer_Weights_ARPROT,
        m_axi_Layer_Weights_ARQOS,
        m_axi_Layer_Weights_ARREGION,
        m_axi_Layer_Weights_ARUSER,
        m_axi_Layer_Weights_RVALID,
        m_axi_Layer_Weights_RREADY,
        m_axi_Layer_Weights_RDATA,
        m_axi_Layer_Weights_RLAST,
        m_axi_Layer_Weights_RID,
        m_axi_Layer_Weights_RFIFONUM,
        m_axi_Layer_Weights_RUSER,
        m_axi_Layer_Weights_RRESP,
        m_axi_Layer_Weights_BVALID,
        m_axi_Layer_Weights_BREADY,
        m_axi_Layer_Weights_BRESP,
        m_axi_Layer_Weights_BID,
        m_axi_Layer_Weights_BUSER,
        sext_ln75,
        Layer3_Neurons_CPU_address0,
        Layer3_Neurons_CPU_ce0,
        Layer3_Neurons_CPU_q0,
        somme_61_out,
        somme_61_out_ap_vld,
        grp_fu_473_p_din0,
        grp_fu_473_p_din1,
        grp_fu_473_p_opcode,
        grp_fu_473_p_dout0,
        grp_fu_473_p_ce,
        grp_fu_477_p_din0,
        grp_fu_477_p_din1,
        grp_fu_477_p_dout0,
        grp_fu_477_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] somme;
output   m_axi_Layer_Weights_AWVALID;
input   m_axi_Layer_Weights_AWREADY;
output  [63:0] m_axi_Layer_Weights_AWADDR;
output  [0:0] m_axi_Layer_Weights_AWID;
output  [31:0] m_axi_Layer_Weights_AWLEN;
output  [2:0] m_axi_Layer_Weights_AWSIZE;
output  [1:0] m_axi_Layer_Weights_AWBURST;
output  [1:0] m_axi_Layer_Weights_AWLOCK;
output  [3:0] m_axi_Layer_Weights_AWCACHE;
output  [2:0] m_axi_Layer_Weights_AWPROT;
output  [3:0] m_axi_Layer_Weights_AWQOS;
output  [3:0] m_axi_Layer_Weights_AWREGION;
output  [0:0] m_axi_Layer_Weights_AWUSER;
output   m_axi_Layer_Weights_WVALID;
input   m_axi_Layer_Weights_WREADY;
output  [31:0] m_axi_Layer_Weights_WDATA;
output  [3:0] m_axi_Layer_Weights_WSTRB;
output   m_axi_Layer_Weights_WLAST;
output  [0:0] m_axi_Layer_Weights_WID;
output  [0:0] m_axi_Layer_Weights_WUSER;
output   m_axi_Layer_Weights_ARVALID;
input   m_axi_Layer_Weights_ARREADY;
output  [63:0] m_axi_Layer_Weights_ARADDR;
output  [0:0] m_axi_Layer_Weights_ARID;
output  [31:0] m_axi_Layer_Weights_ARLEN;
output  [2:0] m_axi_Layer_Weights_ARSIZE;
output  [1:0] m_axi_Layer_Weights_ARBURST;
output  [1:0] m_axi_Layer_Weights_ARLOCK;
output  [3:0] m_axi_Layer_Weights_ARCACHE;
output  [2:0] m_axi_Layer_Weights_ARPROT;
output  [3:0] m_axi_Layer_Weights_ARQOS;
output  [3:0] m_axi_Layer_Weights_ARREGION;
output  [0:0] m_axi_Layer_Weights_ARUSER;
input   m_axi_Layer_Weights_RVALID;
output   m_axi_Layer_Weights_RREADY;
input  [31:0] m_axi_Layer_Weights_RDATA;
input   m_axi_Layer_Weights_RLAST;
input  [0:0] m_axi_Layer_Weights_RID;
input  [8:0] m_axi_Layer_Weights_RFIFONUM;
input  [0:0] m_axi_Layer_Weights_RUSER;
input  [1:0] m_axi_Layer_Weights_RRESP;
input   m_axi_Layer_Weights_BVALID;
output   m_axi_Layer_Weights_BREADY;
input  [1:0] m_axi_Layer_Weights_BRESP;
input  [0:0] m_axi_Layer_Weights_BID;
input  [0:0] m_axi_Layer_Weights_BUSER;
input  [61:0] sext_ln75;
output  [10:0] Layer3_Neurons_CPU_address0;
output   Layer3_Neurons_CPU_ce0;
input  [31:0] Layer3_Neurons_CPU_q0;
output  [31:0] somme_61_out;
output   somme_61_out_ap_vld;
output  [31:0] grp_fu_473_p_din0;
output  [31:0] grp_fu_473_p_din1;
output  [1:0] grp_fu_473_p_opcode;
input  [31:0] grp_fu_473_p_dout0;
output   grp_fu_473_p_ce;
output  [31:0] grp_fu_477_p_din0;
output  [31:0] grp_fu_477_p_din1;
input  [31:0] grp_fu_477_p_dout0;
output   grp_fu_477_p_ce;

reg ap_idle;
reg m_axi_Layer_Weights_RREADY;
reg Layer3_Neurons_CPU_ce0;
reg somme_61_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln75_reg_445;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    Layer_Weights_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln75_fu_186_p2;
reg   [0:0] icmp_ln75_reg_445_pp0_iter1_reg;
reg   [0:0] icmp_ln75_reg_445_pp0_iter2_reg;
wire   [0:0] icmp_ln76_fu_204_p2;
reg   [0:0] icmp_ln76_reg_449;
wire   [0:0] and_ln29_fu_271_p2;
reg   [0:0] and_ln29_reg_461;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] Layer_Weights_addr_read_reg_476;
reg    ap_block_state5_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] Layer3_Neurons_CPU_load_reg_481;
wire   [31:0] bitcast_ln79_fu_371_p1;
reg   [31:0] mul7_reg_491;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage1_subdone;
wire   [63:0] zext_ln79_1_fu_355_p1;
wire    ap_block_pp0_stage0;
reg   [31:0] somme_1_fu_80;
reg   [31:0] ap_sig_allocacmp_somme_1_load_1;
wire    ap_loop_init;
reg   [2:0] m_fu_84;
wire   [2:0] add_ln77_fu_294_p2;
wire    ap_block_pp0_stage2;
reg   [2:0] k_fu_88;
wire   [2:0] select_ln76_fu_321_p3;
reg   [5:0] indvar_flatten51_fu_92;
wire   [5:0] select_ln76_1_fu_234_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten51_load;
reg   [5:0] j_fu_96;
wire   [5:0] select_ln75_fu_216_p3;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [10:0] indvar_flatten66_fu_100;
wire   [10:0] add_ln75_fu_192_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten66_load;
reg    ap_block_pp0_stage1_01001;
wire   [5:0] add_ln75_1_fu_210_p2;
wire   [5:0] add_ln76_1_fu_228_p2;
wire   [0:0] icmp_ln77_fu_265_p2;
wire   [0:0] xor_ln29_fu_260_p2;
wire   [0:0] or_ln29_fu_277_p2;
wire   [2:0] select_ln29_1_fu_282_p3;
wire   [2:0] select_ln29_fu_308_p3;
wire   [2:0] add_ln76_fu_315_p2;
wire   [4:0] p_shl1_fu_332_p3;
wire   [4:0] zext_ln76_fu_328_p1;
wire   [4:0] add_ln79_fu_340_p2;
wire   [10:0] grp_fu_388_p3;
wire   [10:0] zext_ln79_fu_346_p1;
(* use_dsp48 = "no" *) wire   [10:0] add_ln79_1_fu_350_p2;
wire   [5:0] grp_fu_388_p0;
wire   [4:0] grp_fu_388_p1;
wire   [2:0] grp_fu_388_p2;
reg    grp_fu_141_ce;
reg    grp_fu_145_ce;
reg    grp_fu_388_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter2_stage1;
reg    ap_idle_pp0_0to1;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to3;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_block_pp0_stage1_00001;
wire   [10:0] grp_fu_388_p00;
wire   [10:0] grp_fu_388_p20;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 somme_1_fu_80 = 32'd0;
#0 m_fu_84 = 3'd0;
#0 k_fu_88 = 3'd0;
#0 indvar_flatten51_fu_92 = 6'd0;
#0 j_fu_96 = 6'd0;
#0 indvar_flatten66_fu_100 = 11'd0;
#0 ap_done_reg = 1'b0;
end

cnn_lenet_mac_muladd_6ns_5ns_3ns_11_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 3 ),
    .dout_WIDTH( 11 ))
mac_muladd_6ns_5ns_3ns_11_4_1_U40(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_388_p0),
    .din1(grp_fu_388_p1),
    .din2(grp_fu_388_p2),
    .ce(grp_fu_388_ce),
    .dout(grp_fu_388_p3)
);

cnn_lenet_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln75_fu_186_p2 == 1'd0))) begin
            indvar_flatten51_fu_92 <= select_ln76_1_fu_234_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten51_fu_92 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln75_fu_186_p2 == 1'd0))) begin
            indvar_flatten66_fu_100 <= add_ln75_fu_192_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten66_fu_100 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln75_fu_186_p2 == 1'd0))) begin
            j_fu_96 <= select_ln75_fu_216_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_96 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_88 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
            k_fu_88 <= select_ln76_fu_321_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_fu_84 <= 3'd0;
    end else if (((icmp_ln75_reg_445 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        m_fu_84 <= add_ln77_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        somme_1_fu_80 <= somme;
    end else if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        somme_1_fu_80 <= grp_fu_473_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Layer3_Neurons_CPU_load_reg_481 <= Layer3_Neurons_CPU_q0;
        Layer_Weights_addr_read_reg_476 <= m_axi_Layer_Weights_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        and_ln29_reg_461 <= and_ln29_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln75_reg_445 <= icmp_ln75_fu_186_p2;
        icmp_ln75_reg_445_pp0_iter1_reg <= icmp_ln75_reg_445;
        icmp_ln75_reg_445_pp0_iter2_reg <= icmp_ln75_reg_445_pp0_iter1_reg;
        icmp_ln76_reg_449 <= icmp_ln76_fu_204_p2;
        mul7_reg_491 <= grp_fu_477_p_dout0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        Layer3_Neurons_CPU_ce0 = 1'b1;
    end else begin
        Layer3_Neurons_CPU_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        Layer_Weights_blk_n_R = m_axi_Layer_Weights_RVALID;
    end else begin
        Layer_Weights_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_445 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln75_reg_445_pp0_iter2_reg == 1'd1))) begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter2_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_loop_exit_ready_pp0_iter2_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to3 = 1'b1;
    end else begin
        ap_idle_pp0_1to3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten51_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten51_load = indvar_flatten51_fu_92;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten66_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten66_load = indvar_flatten66_fu_100;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_96;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_sig_allocacmp_somme_1_load_1 = grp_fu_473_p_dout0;
    end else begin
        ap_sig_allocacmp_somme_1_load_1 = somme_1_fu_80;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_141_ce = 1'b1;
    end else begin
        grp_fu_141_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_145_ce = 1'b1;
    end else begin
        grp_fu_145_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_388_ce = 1'b1;
    end else begin
        grp_fu_388_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_Layer_Weights_RREADY = 1'b1;
    end else begin
        m_axi_Layer_Weights_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln75_reg_445_pp0_iter2_reg == 1'd1))) begin
        somme_61_out_ap_vld = 1'b1;
    end else begin
        somme_61_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to3 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if (((ap_idle_pp0_0to1 == 1'b1) & (1'b1 == ap_condition_exit_pp0_iter2_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Layer3_Neurons_CPU_address0 = zext_ln79_1_fu_355_p1;

assign add_ln75_1_fu_210_p2 = (ap_sig_allocacmp_j_load + 6'd1);

assign add_ln75_fu_192_p2 = (ap_sig_allocacmp_indvar_flatten66_load + 11'd1);

assign add_ln76_1_fu_228_p2 = (ap_sig_allocacmp_indvar_flatten51_load + 6'd1);

assign add_ln76_fu_315_p2 = (select_ln29_fu_308_p3 + 3'd1);

assign add_ln77_fu_294_p2 = (select_ln29_1_fu_282_p3 + 3'd1);

assign add_ln79_1_fu_350_p2 = (grp_fu_388_p3 + zext_ln79_fu_346_p1);

assign add_ln79_fu_340_p2 = (p_shl1_fu_332_p3 + zext_ln76_fu_328_p1);

assign and_ln29_fu_271_p2 = (xor_ln29_fu_260_p2 & icmp_ln77_fu_265_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_00001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage1_iter1));
end

always @ (*) begin
    ap_block_pp0_stage1_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage1_iter1));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage1_iter1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state5_pp0_stage1_iter1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_pp0_stage1_iter1 = (m_axi_Layer_Weights_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign bitcast_ln79_fu_371_p1 = Layer_Weights_addr_read_reg_476;

assign grp_fu_388_p0 = grp_fu_388_p00;

assign grp_fu_388_p00 = select_ln75_fu_216_p3;

assign grp_fu_388_p1 = 11'd25;

assign grp_fu_388_p2 = grp_fu_388_p20;

assign grp_fu_388_p20 = select_ln29_1_fu_282_p3;

assign grp_fu_473_p_ce = grp_fu_141_ce;

assign grp_fu_473_p_din0 = ap_sig_allocacmp_somme_1_load_1;

assign grp_fu_473_p_din1 = mul7_reg_491;

assign grp_fu_473_p_opcode = 2'd0;

assign grp_fu_477_p_ce = grp_fu_145_ce;

assign grp_fu_477_p_din0 = bitcast_ln79_fu_371_p1;

assign grp_fu_477_p_din1 = Layer3_Neurons_CPU_load_reg_481;

assign icmp_ln75_fu_186_p2 = ((ap_sig_allocacmp_indvar_flatten66_load == 11'd1250) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_204_p2 = ((ap_sig_allocacmp_indvar_flatten51_load == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_265_p2 = ((m_fu_84 == 3'd5) ? 1'b1 : 1'b0);

assign m_axi_Layer_Weights_ARADDR = 64'd0;

assign m_axi_Layer_Weights_ARBURST = 2'd0;

assign m_axi_Layer_Weights_ARCACHE = 4'd0;

assign m_axi_Layer_Weights_ARID = 1'd0;

assign m_axi_Layer_Weights_ARLEN = 32'd0;

assign m_axi_Layer_Weights_ARLOCK = 2'd0;

assign m_axi_Layer_Weights_ARPROT = 3'd0;

assign m_axi_Layer_Weights_ARQOS = 4'd0;

assign m_axi_Layer_Weights_ARREGION = 4'd0;

assign m_axi_Layer_Weights_ARSIZE = 3'd0;

assign m_axi_Layer_Weights_ARUSER = 1'd0;

assign m_axi_Layer_Weights_ARVALID = 1'b0;

assign m_axi_Layer_Weights_AWADDR = 64'd0;

assign m_axi_Layer_Weights_AWBURST = 2'd0;

assign m_axi_Layer_Weights_AWCACHE = 4'd0;

assign m_axi_Layer_Weights_AWID = 1'd0;

assign m_axi_Layer_Weights_AWLEN = 32'd0;

assign m_axi_Layer_Weights_AWLOCK = 2'd0;

assign m_axi_Layer_Weights_AWPROT = 3'd0;

assign m_axi_Layer_Weights_AWQOS = 4'd0;

assign m_axi_Layer_Weights_AWREGION = 4'd0;

assign m_axi_Layer_Weights_AWSIZE = 3'd0;

assign m_axi_Layer_Weights_AWUSER = 1'd0;

assign m_axi_Layer_Weights_AWVALID = 1'b0;

assign m_axi_Layer_Weights_BREADY = 1'b0;

assign m_axi_Layer_Weights_WDATA = 32'd0;

assign m_axi_Layer_Weights_WID = 1'd0;

assign m_axi_Layer_Weights_WLAST = 1'b0;

assign m_axi_Layer_Weights_WSTRB = 4'd0;

assign m_axi_Layer_Weights_WUSER = 1'd0;

assign m_axi_Layer_Weights_WVALID = 1'b0;

assign or_ln29_fu_277_p2 = (icmp_ln76_reg_449 | and_ln29_fu_271_p2);

assign p_shl1_fu_332_p3 = {{select_ln76_fu_321_p3}, {2'd0}};

assign select_ln29_1_fu_282_p3 = ((or_ln29_fu_277_p2[0:0] == 1'b1) ? 3'd0 : m_fu_84);

assign select_ln29_fu_308_p3 = ((icmp_ln76_reg_449[0:0] == 1'b1) ? 3'd0 : k_fu_88);

assign select_ln75_fu_216_p3 = ((icmp_ln76_fu_204_p2[0:0] == 1'b1) ? add_ln75_1_fu_210_p2 : ap_sig_allocacmp_j_load);

assign select_ln76_1_fu_234_p3 = ((icmp_ln76_fu_204_p2[0:0] == 1'b1) ? 6'd1 : add_ln76_1_fu_228_p2);

assign select_ln76_fu_321_p3 = ((and_ln29_reg_461[0:0] == 1'b1) ? add_ln76_fu_315_p2 : select_ln29_fu_308_p3);

assign somme_61_out = somme_1_fu_80;

assign xor_ln29_fu_260_p2 = (icmp_ln76_reg_449 ^ 1'd1);

assign zext_ln76_fu_328_p1 = select_ln76_fu_321_p3;

assign zext_ln79_1_fu_355_p1 = add_ln79_1_fu_350_p2;

assign zext_ln79_fu_346_p1 = add_ln79_fu_340_p2;

endmodule //cnn_lenet_cnn_lenet_Pipeline_col_loop2_kernelRow_Loop2_kernelCol_loop2
