#include <stdio.h>

#include "calculateLayer2.h"
#include <math.h>



int main(int argc, char **argv) {


	ap_uint<8> Layer1_Neurons_CPU[29 * 29] = {
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,0,0,0,1,1,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
    		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 };

	fixed_p Layer1_Weights_CPU[26 * 6] = { -0.128699,-0.294234,-0.572720,-0.477717,-0.330117,-0.313071,0.059302,-0.009758,0.073799,0.105014,0.050010,-0.473893,-0.465177,-0.278933,-0.121841,-0.393294,0.120856,0.156379,0.162290,0.225350,-0.035025,0.795318,0.667981,0.417556,0.729779,0.503688,0.058203,-0.481869,-0.288764,-0.302428,-0.039637,0.122296,-0.050064,0.158429,0.070476,0.383555,0.658865,0.124121,0.042149,-0.237838,0.172505,0.717111,0.199389,0.045258,-0.318497,-0.244299,0.375453,-0.340148,-0.349426,-0.140191,-0.468162,0.043821,-5.184510,-0.028240,-0.364351,-0.089856,0.424986,0.912931,-0.248503,0.042593,-0.008765,0.575381,0.583164,-0.138700,-0.298323,-0.003608,1.342493,0.098635,-0.014191,-0.068890,0.662406,0.895394,0.139756,-0.048130,0.644871,0.786853,0.276979,-0.270359,5.199109,-1.248204,-0.624005,0.002666,0.458744,0.382522,-0.183476,-0.880592,-1.770948,-1.032724,0.000344,0.283475,0.203442,-0.079846,-1.009834,-1.200034,0.023033,0.098519,0.369909,0.220495,-0.475309,0.178515,0.003688,0.070996,0.053507,0.342984,-0.556939,0.741284,0.151460,-0.192776,-0.244063,0.258671,0.343853,-0.114678,-0.695652,-0.047821,0.590676,0.324569,0.097104,0.046672,0.522139,0.333754,0.043623,0.466328,0.624887,0.416439,-0.381890,-0.220061,-0.189085,-0.082523,-0.268194,-0.265404,-3.965558,-0.397193,-0.052149,-0.090007,-0.024704,0.159324,-0.387205,-0.546696,-0.438742,-0.619636,-0.332641,-0.289360,-0.276616,-0.146848,0.404469,0.886874,0.852427,1.103901,1.542013,1.172929,0.339742,0.908563,0.619337,-0.024800,-0.484093,-0.392891 };
	fixed_p Layer2_Neurons_CPU[6 * 13 * 13];
	fixed_p expected_output[6 * 13 * 13];





    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 13; j++) {
            for (int k = 0; k < 13; k++) {
                float somme = (float)Layer1_Weights_CPU[26 * i];
                for (int m = 0; m < 5; m++) {
                    for (int n = 0; n < 5; n++) {
                        if ((m + 2 * j) < 29 && (n + 2 * k) < 29) {
                            somme +=(float) Layer1_Weights_CPU[26 * i + 5 * m + n + 1] *
                                    (float)Layer1_Neurons_CPU[29 * (m + 2 * j) + n + 2 * k];
                        }
                    }
                }
                expected_output[13 * 13 * i + 13 * j + k] = (1.7159*tanh(0.66666667*somme));
            }
        }
    }

#ifdef HW_COSIM
    calculateLayer2(Layer1_Neurons_CPU, Layer1_Weights_CPU, Layer2_Neurons_CPU);
#endif

    int error_count = 0;
   #ifdef HW_COSIM
       for (int i = 0; i < 6 * 13 * 13; i++) {
           if (fabs((float) Layer2_Neurons_CPU[i] - (float) expected_output[i]) > (0.05f)) {
               error_count++;
               printf("Mismatch at index %d: Expected %f, Got %f\n", i, expected_output[i], Layer2_Neurons_CPU[i]);
           }
       }
   #endif

       if (error_count == 0) {
           printf("Test Passed!\n");
       } else {
           printf("Test Failed with %d errors!\n", error_count);
       }

       return 0 ;
   }
